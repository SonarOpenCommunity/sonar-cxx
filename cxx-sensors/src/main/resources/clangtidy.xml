<?xml version="1.0" encoding="UTF-8"?>
<!--
  C and C++ rules from
  * https://clang.llvm.org/extra/clang-tidy/checks/list.html
  * https://clang-analyzer.llvm.org/available_checks.html
  * last update: llvmorg-19-init (git describe)
-->
<rules>

  <!-- Template Rule -->

  <rule>
    <key>CustomRuleTemplate</key>
    <cardinality>MULTIPLE</cardinality>
    <name>Rule template for Clang-Tidy custom rules</name>
    <description><![CDATA[
      <p>Follow these steps to make your custom rules available in SonarQube:</p>
<ol>
  <ol>
    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>
    <li>Enable the newly created rule in your quality profile</li>
  </ol>
  <li>Relaunch an analysis on your projects, et voil√†, your custom rules are executed!</li>
</ol>
      ]]></description>
  </rule>

  <!-- Default Rules -->

  <rule>
    <key>clang-diagnostic-error</key>
    <name>clang-diagnostic-error</name>
    <description><![CDATA[
      <p>Default compiler diagnostic for errors without an explicit check name. Compiler error, e.g header file not found.</p>
      ]]></description>
    <severity>INFO</severity>
    <type>BUG</type>
  </rule>
  <rule>
    <key>clang-diagnostic-warning</key>
    <name>clang-diagnostic-warning</name>
    <description><![CDATA[
      <p>Default compiler diagnostic for warnings without an explicit check name.</p>
      ]]></description>
  </rule>
  <rule>
    <key>clang-diagnostic-unknown</key>
    <name>clang-diagnostic-unknown</name>
    <description><![CDATA[
      <p>(Unkown) compiler diagnostic without an explicit check name.</p>
      ]]></description>
    <severity>INFO</severity>
  </rule>

  <!-- Clang-Tidy Rules -->

  <rule>
    <key>abseil-cleanup-ctad</key>
    <name>abseil-cleanup-ctad</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-cleanup-ctad</p>
</div>
<h1 id="abseil-cleanup-ctad">abseil-cleanup-ctad</h1>
<p>Suggests switching the initialization pattern of <code>absl::Cleanup</code> instances from the factory function to class template argument deduction (CTAD), in C++17 and higher.</p>
<pre class="c++"><code>auto c1 = absl::MakeCleanup([] {});

const auto c2 = absl::MakeCleanup(std::function&lt;void()&gt;([] {}));</code></pre>
<p>becomes</p>
<pre class="c++"><code>absl::Cleanup c1 = [] {};

const absl::Cleanup c2 = std::function&lt;void()&gt;([] {});</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/cleanup-ctad.html" target="_blank">clang.llvm.org</a></p>]]>
      <![CDATA[]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-addition</key>
    <name>abseil-duration-addition</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-addition</p>
</div>
<h1 id="abseil-duration-addition">abseil-duration-addition</h1>
<p>Check for cases where addition should be performed in the <code>absl::Time</code> domain. When adding two values, and one is known to be an <code>absl::Time</code>, we can infer that the other should be interpreted as an <code>absl::Duration</code> of a similar scale, and make that inference explicit.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Addition in the integer domain
int x;
absl::Time t;
int result = absl::ToUnixSeconds(t) + x;

// Suggestion - Addition in the absl::Time domain
int result = absl::ToUnixSeconds(t + absl::Seconds(x));</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-addition.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-comparison</key>
    <name>abseil-duration-comparison</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-comparison</p>
</div>
<h1 id="abseil-duration-comparison">abseil-duration-comparison</h1>
<p>Checks for comparisons which should be in the <code>absl::Duration</code> domain instead of the floating point or integer domains.</p>
<p>N.B.: In cases where a <code>Duration</code> was being converted to an integer and then compared against a floating-point value, truncation during the <code>Duration</code> conversion might yield a different result. In practice this is very rare, and still indicates a bug which should be fixed.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Comparison in the floating point domain
double x;
absl::Duration d;
if (x &lt; absl::ToDoubleSeconds(d)) ...

// Suggested - Compare in the absl::Duration domain instead
if (absl::Seconds(x) &lt; d) ...


// Original - Comparison in the integer domain
int x;
absl::Duration d;
if (x &lt; absl::ToInt64Microseconds(d)) ...

// Suggested - Compare in the absl::Duration domain instead
if (absl::Microseconds(x) &lt; d) ...</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-comparison.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-conversion-cast</key>
    <name>abseil-duration-conversion-cast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-conversion-cast</p>
</div>
<h1 id="abseil-duration-conversion-cast">abseil-duration-conversion-cast</h1>
<p>Checks for casts of <code>absl::Duration</code> conversion functions, and recommends the right conversion function instead.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Cast from a double to an integer
absl::Duration d;
int i = static_cast&lt;int&gt;(absl::ToDoubleSeconds(d));

// Suggested - Use the integer conversion function directly.
int i = absl::ToInt64Seconds(d);


// Original - Cast from a double to an integer
absl::Duration d;
double x = static_cast&lt;double&gt;(absl::ToInt64Seconds(d));

// Suggested - Use the integer conversion function directly.
double x = absl::ToDoubleSeconds(d);</code></pre>
<p>Note: In the second example, the suggested fix could yield a different result, as the conversion to integer could truncate. In practice, this is very rare, and you should use <code>absl::Trunc</code> to perform this operation explicitly instead.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-conversion-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-division</key>
    <name>abseil-duration-division</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-division</p>
</div>
<h1 id="abseil-duration-division">abseil-duration-division</h1>
<p><code>absl::Duration</code> arithmetic works like it does with integers. That means that division of two <code>absl::Duration</code> objects returns an <code>int64</code> with any fractional component truncated toward 0. See <a href="https://github.com/abseil/abseil-cpp/blob/29ff6d4860070bf8fcbd39c8805d0c32d56628a3/absl/time/time.h#L137">this link</a> for more information on arithmetic with <code>absl::Duration</code>.</p>
<p>For example:</p>
<pre class="c++"><code>absl::Duration d = absl::Seconds(3.5);
int64 sec1 = d / absl::Seconds(1);     // Truncates toward 0.
int64 sec2 = absl::ToInt64Seconds(d);  // Equivalent to division.
assert(sec1 == 3 &amp;&amp; sec2 == 3);

double dsec = d / absl::Seconds(1);  // WRONG: Still truncates toward 0.
assert(dsec == 3.0);</code></pre>
<p>If you want floating-point division, you should use either the <code>absl::FDivDuration()</code> function, or one of the unit conversion functions such as <code>absl::ToDoubleSeconds()</code>. For example:</p>
<pre class="c++"><code>absl::Duration d = absl::Seconds(3.5);
double dsec1 = absl::FDivDuration(d, absl::Seconds(1));  // GOOD: No truncation.
double dsec2 = absl::ToDoubleSeconds(d);                 // GOOD: No truncation.
assert(dsec1 == 3.5 &amp;&amp; dsec2 == 3.5);</code></pre>
<p>This check looks for uses of <code>absl::Duration</code> division that is done in a floating-point context, and recommends the use of a function that returns a floating-point value.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-division.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-factory-float</key>
    <name>abseil-duration-factory-float</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-factory-float</p>
</div>
<h1 id="abseil-duration-factory-float">abseil-duration-factory-float</h1>
<p>Checks for cases where the floating-point overloads of various <code>absl::Duration</code> factory functions are called when the more-efficient integer versions could be used instead.</p>
<p>This check will not suggest fixes for literals which contain fractional floating point values or non-literals. It will suggest removing superfluous casts.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Providing a floating-point literal.
absl::Duration d = absl::Seconds(10.0);

// Suggested - Use an integer instead.
absl::Duration d = absl::Seconds(10);


// Original - Explicitly casting to a floating-point type.
absl::Duration d = absl::Seconds(static_cast&lt;double&gt;(10));

// Suggested - Remove the explicit cast
absl::Duration d = absl::Seconds(10);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-factory-float.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-factory-scale</key>
    <name>abseil-duration-factory-scale</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-factory-scale</p>
</div>
<h1 id="abseil-duration-factory-scale">abseil-duration-factory-scale</h1>
<p>Checks for cases where arguments to <code>absl::Duration</code> factory functions are scaled internally and could be changed to a different factory function. This check also looks for arguments with a zero value and suggests using <code>absl::ZeroDuration()</code> instead.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Internal multiplication.
int x;
absl::Duration d = absl::Seconds(60 * x);

// Suggested - Use absl::Minutes instead.
absl::Duration d = absl::Minutes(x);


// Original - Internal division.
int y;
absl::Duration d = absl::Milliseconds(y / 1000.);

// Suggested - Use absl:::Seconds instead.
absl::Duration d = absl::Seconds(y);


// Original - Zero-value argument.
absl::Duration d = absl::Hours(0);

// Suggested = Use absl::ZeroDuration instead
absl::Duration d = absl::ZeroDuration();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-factory-scale.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-subtraction</key>
    <name>abseil-duration-subtraction</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-subtraction</p>
</div>
<h1 id="abseil-duration-subtraction">abseil-duration-subtraction</h1>
<p>Checks for cases where subtraction should be performed in the <code>absl::Duration</code> domain. When subtracting two values, and the first one is known to be a conversion from <code>absl::Duration</code>, we can infer that the second should also be interpreted as an <code>absl::Duration</code>, and make that inference explicit.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Subtraction in the double domain
double x;
absl::Duration d;
double result = absl::ToDoubleSeconds(d) - x;

// Suggestion - Subtraction in the absl::Duration domain instead
double result = absl::ToDoubleSeconds(d - absl::Seconds(x));

// Original - Subtraction of two Durations in the double domain
absl::Duration d1, d2;
double result = absl::ToDoubleSeconds(d1) - absl::ToDoubleSeconds(d2);

// Suggestion - Subtraction in the absl::Duration domain instead
double result = absl::ToDoubleSeconds(d1 - d2);</code></pre>
<p>Note: As with other <code>clang-tidy</code> checks, it is possible that multiple fixes may overlap (as in the case of nested expressions), so not all occurrences can be transformed in one run. In particular, this may occur for nested subtraction expressions. Running <code>clang-tidy</code> multiple times will find and fix these overlaps.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-subtraction.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-duration-unnecessary-conversion</key>
    <name>abseil-duration-unnecessary-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-duration-unnecessary-conversion</p>
</div>
<h1 id="abseil-duration-unnecessary-conversion">abseil-duration-unnecessary-conversion</h1>
<p>Finds and fixes cases where <code>absl::Duration</code> values are being converted to numeric types and back again.</p>
<p>Floating-point examples:</p>
<pre class="c++"><code>// Original - Conversion to double and back again
absl::Duration d1;
absl::Duration d2 = absl::Seconds(absl::ToDoubleSeconds(d1));

// Suggestion - Remove unnecessary conversions
absl::Duration d2 = d1;

// Original - Division to convert to double and back again
absl::Duration d2 = absl::Seconds(absl::FDivDuration(d1, absl::Seconds(1)));

// Suggestion - Remove division and conversion
absl::Duration d2 = d1;</code></pre>
<p>Integer examples:</p>
<pre class="c++"><code>// Original - Conversion to integer and back again
absl::Duration d1;
absl::Duration d2 = absl::Hours(absl::ToInt64Hours(d1));

// Suggestion - Remove unnecessary conversions
absl::Duration d2 = d1;

// Original - Integer division followed by conversion
absl::Duration d2 = absl::Seconds(d1 / absl::Seconds(1));

// Suggestion - Remove division and conversion
absl::Duration d2 = d1;</code></pre>
<p>Unwrapping scalar operations:</p>
<pre class="c++"><code>// Original - Multiplication by a scalar
absl::Duration d1;
absl::Duration d2 = absl::Seconds(absl::ToInt64Seconds(d1) * 2);

// Suggestion - Remove unnecessary conversion
absl::Duration d2 = d1 * 2;</code></pre>
<p>Note: Converting to an integer and back to an <code>absl::Duration</code> might be a truncating operation if the value is not aligned to the scale of conversion. In the rare case where this is the intended result, callers should use <code>absl::Trunc</code> to truncate explicitly.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/duration-unnecessary-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-faster-strsplit-delimiter</key>
    <name>abseil-faster-strsplit-delimiter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-faster-strsplit-delimiter</p>
</div>
<h1 id="abseil-faster-strsplit-delimiter">abseil-faster-strsplit-delimiter</h1>
<p>Finds instances of <code>absl::StrSplit()</code> or <code>absl::MaxSplits()</code> where the delimiter is a single character string literal and replaces with a character. The check will offer a suggestion to change the string literal into a character. It will also catch code using <code>absl::ByAnyChar()</code> for just a single character and will transform that into a single character as well.</p>
<p>These changes will give the same result, but using characters rather than single character string literals is more efficient and readable.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - the argument is a string literal.
for (auto piece : absl::StrSplit(str, &quot;B&quot;)) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used.
for (auto piece : absl::StrSplit(str, &#39;B&#39;)) {


// Original - the argument is a string literal inside absl::ByAnyChar call.
for (auto piece : absl::StrSplit(str, absl::ByAnyChar(&quot;B&quot;))) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used and we do not need absl::ByAnyChar
// anymore.
for (auto piece : absl::StrSplit(str, &#39;B&#39;)) {


// Original - the argument is a string literal inside absl::MaxSplits call.
for (auto piece : absl::StrSplit(str, absl::MaxSplits(&quot;B&quot;, 1))) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used.
for (auto piece : absl::StrSplit(str, absl::MaxSplits(&#39;B&#39;, 1))) {</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/faster-strsplit-delimiter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-no-internal-dependencies</key>
    <name>abseil-no-internal-dependencies</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-no-internal-dependencies</p>
</div>
<h1 id="abseil-no-internal-dependencies">abseil-no-internal-dependencies</h1>
<p>Warns if code using Abseil depends on internal details. If something is in a namespace that includes the word "internal", code is not allowed to depend upon it because it's an implementation detail. They cannot friend it, include it, you mention it or refer to it in any way. Doing so violates Abseil's compatibility guidelines and may result in breakage. See <a href="https://abseil.io/about/compatibility">https://abseil.io/about/compatibility</a> for more information.</p>
<p>The following cases will result in warnings:</p>
<pre class="c++"><code>absl::strings_internal::foo();
// warning triggered on this line
class foo {
  friend struct absl::container_internal::faa;
  // warning triggered on this line
};
absl::memory_internal::MakeUniqueResult();
// warning triggered on this line</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/no-internal-dependencies.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-no-namespace</key>
    <name>abseil-no-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-no-namespace</p>
</div>
<h1 id="abseil-no-namespace">abseil-no-namespace</h1>
<p>Ensures code does not open <code>namespace absl</code> as that violates Abseil's compatibility guidelines. Code should not open <code>namespace absl</code> as that conflicts with Abseil's compatibility guidelines and may result in breakage.</p>
<p>Any code that uses:</p>
<pre class="c++"><code>namespace absl {
 ...
}</code></pre>
<p>will be prompted with a warning.</p>
<p>See <a href="https://abseil.io/about/compatibility">the full Abseil compatibility guidelines</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/no-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-redundant-strcat-calls</key>
    <name>abseil-redundant-strcat-calls</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-redundant-strcat-calls</p>
</div>
<h1 id="abseil-redundant-strcat-calls">abseil-redundant-strcat-calls</h1>
<p>Suggests removal of unnecessary calls to <code>absl::StrCat</code> when the result is being passed to another call to <code>absl::StrCat</code> or <code>absl::StrAppend</code>.</p>
<p>The extra calls cause unnecessary temporary strings to be constructed. Removing them makes the code smaller and faster.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string s = absl::StrCat(&quot;A&quot;, absl::StrCat(&quot;B&quot;, absl::StrCat(&quot;C&quot;, &quot;D&quot;)));
//before

std::string s = absl::StrCat(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;);
//after

absl::StrAppend(&amp;s, absl::StrCat(&quot;E&quot;, &quot;F&quot;, &quot;G&quot;));
//before

absl::StrAppend(&amp;s, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;);
//after</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/redundant-strcat-calls.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>abseil-str-cat-append</key>
    <name>abseil-str-cat-append</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-str-cat-append</p>
</div>
<h1 id="abseil-str-cat-append">abseil-str-cat-append</h1>
<p>Flags uses of <code>absl::StrCat()</code> to append to a <code>std::string</code>. Suggests <code>absl::StrAppend()</code> should be used instead.</p>
<p>The extra calls cause unnecessary temporary strings to be constructed. Removing them makes the code smaller and faster.</p>
<pre class="c++"><code>a = absl::StrCat(a, b); // Use absl::StrAppend(&amp;a, b) instead.</code></pre>
<p>Does not diagnose cases where <code>absl::StrCat()</code> is used as a template argument for a functor.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/str-cat-append.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>abseil-string-find-startswith</key>
    <name>abseil-string-find-startswith</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-string-find-startswith</p>
</div>
<h1 id="abseil-string-find-startswith">abseil-string-find-startswith</h1>
<p>Checks whether a <code>std::string::find()</code> or <code>std::string::rfind()</code> (and corresponding <code>std::string_view</code> methods) result is compared with 0, and suggests replacing with <code>absl::StartsWith()</code>. This is both a readability and performance issue.</p>
<p><code>starts_with</code> was added as a built-in function on those types in C++20. If available, prefer enabling <code class="interpreted-text" role="doc">modernize-use-starts-ends-with
&lt;../modernize/use-starts-ends-with&gt;</code> instead of this check.</p>
<pre class="c++"><code>string s = &quot;...&quot;;
if (s.find(&quot;Hello World&quot;) == 0) { /* do something */ }
if (s.rfind(&quot;Hello World&quot;, 0) == 0) { /* do something */ }</code></pre>
<p>becomes</p>
<pre class="c++"><code>string s = &quot;...&quot;;
if (absl::StartsWith(s, &quot;Hello World&quot;)) { /* do something */ }
if (absl::StartsWith(s, &quot;Hello World&quot;)) { /* do something */ }</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringLikeClasses</p>
<p>Semicolon-separated list of names of string-like classes. By default both <code>std::basic_string</code> and <code>std::basic_string_view</code> are considered. The list of methods to be considered is fixed.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>AbseilStringsMatchHeader</p>
<p>The location of Abseil's <code>strings/match.h</code>. Defaults to <code>absl/strings/match.h</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/string-find-startswith.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>abseil-string-find-str-contains</key>
    <name>abseil-string-find-str-contains</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-string-find-str-contains</p>
</div>
<h1 id="abseil-string-find-str-contains">abseil-string-find-str-contains</h1>
<p>Finds <code>s.find(...) == string::npos</code> comparisons (for various string-like types) and suggests replacing with <code>absl::StrContains()</code>.</p>
<p>This improves readability and reduces the likelihood of accidentally mixing <code>find()</code> and <code>npos</code> from different string-like types.</p>
<p>By default, "string-like types" includes <code>::std::basic_string</code>, <code>::std::basic_string_view</code>, and <code>::absl::string_view</code>. See the StringLikeClasses option to change this.</p>
<pre class="c++"><code>std::string s = &quot;...&quot;;
if (s.find(&quot;Hello World&quot;) == std::string::npos) { /* do something */ }

absl::string_view a = &quot;...&quot;;
if (absl::string_view::npos != a.find(&quot;Hello World&quot;)) { /* do something */ }</code></pre>
<p>becomes</p>
<pre class="c++"><code>std::string s = &quot;...&quot;;
if (!absl::StrContains(s, &quot;Hello World&quot;)) { /* do something */ }

absl::string_view a = &quot;...&quot;;
if (absl::StrContains(a, &quot;Hello World&quot;)) { /* do something */ }</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringLikeClasses</p>
<p>Semicolon-separated list of names of string-like classes. By default includes <code>::std::basic_string</code>, <code>::std::basic_string_view</code>, and <code>::absl::string_view</code>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>AbseilStringsMatchHeader</p>
<p>The location of Abseil's <code>strings/match.h</code>. Defaults to <code>absl/strings/match.h</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/string-find-str-contains.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-time-comparison</key>
    <name>abseil-time-comparison</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-time-comparison</p>
</div>
<h1 id="abseil-time-comparison">abseil-time-comparison</h1>
<p>Prefer comparisons in the <code>absl::Time</code> domain instead of the integer domain.</p>
<p>N.B.: In cases where an <code>absl::Time</code> is being converted to an integer, alignment may occur. If the comparison depends on this alignment, doing the comparison in the <code>absl::Time</code> domain may yield a different result. In practice this is very rare, and still indicates a bug which should be fixed.</p>
<p>Examples:</p>
<pre class="c++"><code>// Original - Comparison in the integer domain
int x;
absl::Time t;
if (x &lt; absl::ToUnixSeconds(t)) ...

// Suggested - Compare in the absl::Time domain instead
if (absl::FromUnixSeconds(x) &lt; t) ...</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/time-comparison.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-time-subtraction</key>
    <name>abseil-time-subtraction</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-time-subtraction</p>
</div>
<h1 id="abseil-time-subtraction">abseil-time-subtraction</h1>
<p>Finds and fixes <code>absl::Time</code> subtraction expressions to do subtraction in the Time domain instead of the numeric domain.</p>
<p>There are two cases of Time subtraction in which deduce additional type information:</p>
<ul>
<li>When the result is an <code>absl::Duration</code> and the first argument is an <code>absl::Time</code>.</li>
<li>When the second argument is a <code>absl::Time</code>.</li>
</ul>
<p>In the first case, we must know the result of the operation, since without that the second operand could be either an <code>absl::Time</code> or an <code>absl::Duration</code>. In the second case, the first operand <em>must</em> be an <code>absl::Time</code>, because subtracting an <code>absl::Time</code> from an <code>absl::Duration</code> is not defined.</p>
<p>Examples:</p>
<pre class="c++"><code>int x;
absl::Time t;

// Original - absl::Duration result and first operand is an absl::Time.
absl::Duration d = absl::Seconds(absl::ToUnixSeconds(t) - x);

// Suggestion - Perform subtraction in the Time domain instead.
absl::Duration d = t - absl::FromUnixSeconds(x);


// Original - Second operand is an absl::Time.
int i = x - absl::ToUnixSeconds(t);

// Suggestion - Perform subtraction in the Time domain instead.
int i = absl::ToInt64Seconds(absl::FromUnixSeconds(x) - t);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/time-subtraction.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>abseil-upgrade-duration-conversions</key>
    <name>abseil-upgrade-duration-conversions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - abseil-upgrade-duration-conversions</p>
</div>
<h1 id="abseil-upgrade-duration-conversions">abseil-upgrade-duration-conversions</h1>
<p>Finds calls to <code>absl::Duration</code> arithmetic operators and factories whose argument needs an explicit cast to continue compiling after upcoming API changes.</p>
<p>The operators <code>*=</code>, <code>/=</code>, <code>*</code>, and <code>/</code> for <code>absl::Duration</code> currently accept an argument of class type that is convertible to an arithmetic type. Such a call currently converts the value to an <code>int64_t</code>, even in a case such as <code>std::atomic&lt;float&gt;</code> that would result in lossy conversion.</p>
<p>Additionally, the <code>absl::Duration</code> factory functions (<code>absl::Hours</code>, <code>absl::Minutes</code>, etc) currently accept an <code>int64_t</code> or a floating-point type. Similar to the arithmetic operators, calls with an argument of class type that is convertible to an arithmetic type go through the <code>int64_t</code> path.</p>
<p>These operators and factories will be changed to only accept arithmetic types to prevent unintended behavior. After these changes are released, passing an argument of class type will no longer compile, even if the type is implicitly convertible to an arithmetic type.</p>
<p>Here are example fixes created by this check:</p>
<pre class="c++"><code>std::atomic&lt;int&gt; a;
absl::Duration d = absl::Milliseconds(a);
d *= a;</code></pre>
<p>becomes</p>
<pre class="c++"><code>std::atomic&lt;int&gt; a;
absl::Duration d = absl::Milliseconds(static_cast&lt;int64_t&gt;(a));
d *= static_cast&lt;int64_t&gt;(a);</code></pre>
<p>Note that this check always adds a cast to <code>int64_t</code> in order to preserve the current behavior of user code. It is possible that this uncovers unintended behavior due to types implicitly convertible to a floating-point type.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil/upgrade-duration-conversions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>altera-id-dependent-backward-branch</key>
    <name>altera-id-dependent-backward-branch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - altera-id-dependent-backward-branch</p>
</div>
<h1 id="altera-id-dependent-backward-branch">altera-id-dependent-backward-branch</h1>
<p>Finds ID-dependent variables and fields that are used within loops. This causes branches to occur inside the loops, and thus leads to performance degradation.</p>
<pre class="c++"><code>// The following code will produce a warning because this ID-dependent
// variable is used in a loop condition statement.
int ThreadID = get_local_id(0);
// The following loop will produce a warning because the loop condition
// statement depends on an ID-dependent variable.
for (int i = 0; i &lt; ThreadID; ++i) {
  std::cout &lt;&lt; i &lt;&lt; std::endl;
}
// The following loop will not produce a warning, because the ID-dependent
// variable is not used in the loop condition statement.
for (int i = 0; i &lt; 100; ++i) {
  std::cout &lt;&lt; ThreadID &lt;&lt; std::endl;
}</code></pre>
<p>Based on the <a href="https://www.altera.com/en_US/pdfs/literature/hb/opencl-sdk/aocl_optimization_guide.pdf">Altera SDK for OpenCL: Best Practices Guide</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/altera/id-dependent-backward-branch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>altera-kernel-name-restriction</key>
    <name>altera-kernel-name-restriction</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - altera-kernel-name-restriction</p>
</div>
<h1 id="altera-kernel-name-restriction">altera-kernel-name-restriction</h1>
<p>Finds kernel files and include directives whose filename is <span class="title-ref">kernel.cl</span>, <span class="title-ref">Verilog.cl</span>, or <span class="title-ref">VHDL.cl</span>. The check is case insensitive.</p>
<p>Such kernel file names cause the offline compiler to generate intermediate design files that have the same names as certain internal files, which leads to a compilation error.</p>
<p>Based on the <span class="title-ref">Guidelines for Naming the Kernel</span> section in the <a href="https://www.intel.com/content/www/us/en/programmable/documentation/mwh1391807965224.html#ewa1412973930963">Intel FPGA SDK for OpenCL Pro Edition: Programming Guide</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/altera/kernel-name-restriction.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>altera-single-work-item-barrier</key>
    <name>altera-single-work-item-barrier</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - altera-single-work-item-barrier</p>
</div>
<h1 id="altera-single-work-item-barrier">altera-single-work-item-barrier</h1>
<p>Finds OpenCL kernel functions that call a barrier function but do not call an ID function (<code>get_local_id</code>, <code>get_local_id</code>, <code>get_group_id</code>, or <code>get_local_linear_id</code>).</p>
<p>These kernels may be viable single work-item kernels, but will be forced to execute as NDRange kernels if using a newer version of the Altera Offline Compiler (&gt;= v17.01).</p>
<p>If using an older version of the Altera Offline Compiler, these kernel functions will be treated as single work-item kernels, which could be inefficient or lead to errors if NDRange semantics were intended.</p>
<p>Based on the <a href="https://www.altera.com/en_US/pdfs/literature/hb/opencl-sdk/aocl_optimization_guide.pdf">Altera SDK for OpenCL: Best Practices Guide</a>.</p>
<p>Examples:</p>
<pre class="c++"><code>// error: function calls barrier but does not call an ID function.
void __kernel barrier_no_id(__global int * foo, int size) {
  for (int i = 0; i &lt; 100; i++) {
    foo[i] += 5;
  }
  barrier(CLK_GLOBAL_MEM_FENCE);
}

// ok: function calls barrier and an ID function.
void __kernel barrier_with_id(__global int * foo, int size) {
  for (int i = 0; i &lt; 100; i++) {
    int tid = get_global_id(0);
    foo[tid] += 5;
  }
  barrier(CLK_GLOBAL_MEM_FENCE);
}

// ok with AOC Version 17.01: the reqd_work_group_size turns this into
// an NDRange.
__attribute__((reqd_work_group_size(2,2,2)))
void __kernel barrier_with_id(__global int * foo, int size) {
  for (int i = 0; i &lt; 100; i++) {
    foo[tid] += 5;
  }
  barrier(CLK_GLOBAL_MEM_FENCE);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>AOCVersion</p>
<p>Defines the version of the Altera Offline Compiler. Defaults to <code>1600</code> (corresponding to version 16.00).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/altera/single-work-item-barrier.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>altera-struct-pack-align</key>
    <name>altera-struct-pack-align</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - altera-struct-pack-align</p>
</div>
<h1 id="altera-struct-pack-align">altera-struct-pack-align</h1>
<p>Finds structs that are inefficiently packed or aligned, and recommends packing and/or aligning of said structs as needed.</p>
<p>Structs that are not packed take up more space than they should, and accessing structs that are not well aligned is inefficient.</p>
<p>Fix-its are provided to fix both of these issues by inserting and/or amending relevant struct attributes.</p>
<p>Based on the <a href="https://www.altera.com/en_US/pdfs/literature/hb/opencl-sdk/aocl_optimization_guide.pdf">Altera SDK for OpenCL: Best Practices Guide</a>.</p>
<pre class="c++"><code>// The following struct is originally aligned to 4 bytes, and thus takes up
// 12 bytes of memory instead of 10. Packing the struct will make it use
// only 10 bytes of memory, and aligning it to 16 bytes will make it
// efficient to access.
struct example {
  char a;    // 1 byte
  double b;  // 8 bytes
  char c;    // 1 byte
};

// The following struct is arranged in such a way that packing is not needed.
// However, it is aligned to 4 bytes instead of 8, and thus needs to be
// explicitly aligned.
struct implicitly_packed_example {
  char a;  // 1 byte
  char b;  // 1 byte
  char c;  // 1 byte
  char d;  // 1 byte
  int e;   // 4 bytes
};

// The following struct is explicitly aligned and packed.
struct good_example {
  char a;    // 1 byte
  double b;  // 8 bytes
  char c;    // 1 byte
} __attribute__((packed)) __attribute__((aligned(16));

// Explicitly aligning a struct to the wrong value will result in a warning.
// The following example should be aligned to 16 bytes, not 32.
struct badly_aligned_example {
  char a;    // 1 byte
  double b;  // 8 bytes
  char c;    // 1 byte
} __attribute__((packed)) __attribute__((aligned(32)));</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/altera/struct-pack-align.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>altera-unroll-loops</key>
    <name>altera-unroll-loops</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - altera-unroll-loops</p>
</div>
<h1 id="altera-unroll-loops">altera-unroll-loops</h1>
<p>Finds inner loops that have not been unrolled, as well as fully unrolled loops with unknown loop bounds or a large number of iterations.</p>
<p>Unrolling inner loops could improve the performance of OpenCL kernels. However, if they have unknown loop bounds or a large number of iterations, they cannot be fully unrolled, and should be partially unrolled.</p>
<p>Notes:</p>
<ul>
<li>This check is unable to determine the number of iterations in a <code>while</code> or <code>do..while</code> loop; hence if such a loop is fully unrolled, a note is emitted advising the user to partially unroll instead.</li>
<li>In <code>for</code> loops, our check only works with simple arithmetic increments ( <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>). For all other increments, partial unrolling is advised.</li>
<li>Depending on the exit condition, the calculations for determining if the number of iterations is large may be off by 1. This should not be an issue since the cut-off is generally arbitrary.</li>
</ul>
<p>Based on the <a href="https://www.altera.com/en_US/pdfs/literature/hb/opencl-sdk/aocl_optimization_guide.pdf">Altera SDK for OpenCL: Best Practices Guide</a>.</p>
<pre class="c++"><code>for (int i = 0; i &lt; 10; i++) {  // ok: outer loops should not be unrolled
   int j = 0;
   do {  // warning: this inner do..while loop should be unrolled
      j++;
   } while (j &lt; 15);

   int k = 0;
   #pragma unroll
   while (k &lt; 20) {  // ok: this inner loop is already unrolled
      k++;
   }
}

int A[1000];
#pragma unroll
// warning: this loop is large and should be partially unrolled
for (int a : A) {
   printf(&quot;%d&quot;, a);
}

#pragma unroll 5
// ok: this loop is large, but is partially unrolled
for (int a : A) {
   printf(&quot;%d&quot;, a);
}

#pragma unroll
// warning: this loop is large and should be partially unrolled
for (int i = 0; i &lt; 1000; ++i) {
   printf(&quot;%d&quot;, i);
}

#pragma unroll 5
// ok: this loop is large, but is partially unrolled
for (int i = 0; i &lt; 1000; ++i) {
   printf(&quot;%d&quot;, i);
}

#pragma unroll
// warning: &lt;&lt; operator not supported, recommend partial unrolling
for (int i = 0; i &lt; 1000; i&lt;&lt;1) {
   printf(&quot;%d&quot;, i);
}

std::vector&lt;int&gt; someVector (100, 0);
int i = 0;
#pragma unroll
// note: loop may be large, recommend partial unrolling
while (i &lt; someVector.size()) {
   someVector[i]++;
}

#pragma unroll
// note: loop may be large, recommend partial unrolling
while (true) {
   printf(&quot;In loop&quot;);
}

#pragma unroll 5
// ok: loop may be large, but is partially unrolled
while (i &lt; someVector.size()) {
   someVector[i]++;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>MaxLoopIterations</p>
<p>Defines the maximum number of loop iterations that a fully unrolled loop can have. By default, it is set to <span class="title-ref">100</span>.</p>
<p>In practice, this refers to the integer value of the upper bound within the loop statement's condition expression.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/altera/unroll-loops.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>android-cloexec-accept</key>
    <name>android-cloexec-accept</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-accept</p>
</div>
<h1 id="android-cloexec-accept">android-cloexec-accept</h1>
<p>The usage of <code>accept()</code> is not recommended, it's better to use <code>accept4()</code>. Without this flag, an opened sensitive file descriptor would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>accept(sockfd, addr, addrlen);

// becomes

accept4(sockfd, addr, addrlen, SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-accept.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>android-cloexec-accept4</key>
    <name>android-cloexec-accept4</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-accept4</p>
</div>
<h1 id="android-cloexec-accept4">android-cloexec-accept4</h1>
<p><code>accept4()</code> should include <code>SOCK_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>accept4(sockfd, addr, addrlen, SOCK_NONBLOCK);

// becomes

accept4(sockfd, addr, addrlen, SOCK_NONBLOCK | SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-accept4.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-creat</key>
    <name>android-cloexec-creat</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-creat</p>
</div>
<h1 id="android-cloexec-creat">android-cloexec-creat</h1>
<p>The usage of <code>creat()</code> is not recommended, it's better to use <code>open()</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>int fd = creat(path, mode);

// becomes

int fd = open(path, O_WRONLY | O_CREAT | O_TRUNC | O_CLOEXEC, mode);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-creat.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>android-cloexec-dup</key>
    <name>android-cloexec-dup</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-dup</p>
</div>
<h1 id="android-cloexec-dup">android-cloexec-dup</h1>
<p>The usage of <code>dup()</code> is not recommended, it's better to use <code>fcntl()</code>, which can set the close-on-exec flag. Otherwise, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>int fd = dup(oldfd);

// becomes

int fd = fcntl(oldfd, F_DUPFD_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-dup.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-epoll-create</key>
    <name>android-cloexec-epoll-create</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-epoll-create</p>
</div>
<h1 id="android-cloexec-epoll-create">android-cloexec-epoll-create</h1>
<p>The usage of <code>epoll_create()</code> is not recommended, it's better to use <code>epoll_create1()</code>, which allows close-on-exec.</p>
<p>Examples:</p>
<pre class="c++"><code>epoll_create(size);

// becomes

epoll_create1(EPOLL_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-epoll-create.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-epoll-create1</key>
    <name>android-cloexec-epoll-create1</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-epoll-create1</p>
</div>
<h1 id="android-cloexec-epoll-create1">android-cloexec-epoll-create1</h1>
<p><code>epoll_create1()</code> should include <code>EPOLL_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>epoll_create1(0);

// becomes

epoll_create1(EPOLL_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-epoll-create1.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-fopen</key>
    <name>android-cloexec-fopen</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-fopen</p>
</div>
<h1 id="android-cloexec-fopen">android-cloexec-fopen</h1>
<p><code>fopen()</code> should include <code>e</code> in their mode string; so <code>re</code> would be valid. This is equivalent to having set <code>FD_CLOEXEC on</code> that descriptor.</p>
<p>Examples:</p>
<pre class="c++"><code>fopen(&quot;fn&quot;, &quot;r&quot;);

// becomes

fopen(&quot;fn&quot;, &quot;re&quot;);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-fopen.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-inotify-init</key>
    <name>android-cloexec-inotify-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-inotify-init</p>
</div>
<h1 id="android-cloexec-inotify-init">android-cloexec-inotify-init</h1>
<p>The usage of <code>inotify_init()</code> is not recommended, it's better to use <code>inotify_init1()</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>inotify_init();

// becomes

inotify_init1(IN_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-inotify-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-inotify-init1</key>
    <name>android-cloexec-inotify-init1</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-inotify-init1</p>
</div>
<h1 id="android-cloexec-inotify-init1">android-cloexec-inotify-init1</h1>
<p><code>inotify_init1()</code> should include <code>IN_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>inotify_init1(IN_NONBLOCK);

// becomes

inotify_init1(IN_NONBLOCK | IN_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-inotify-init1.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-memfd-create</key>
    <name>android-cloexec-memfd-create</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-memfd-create</p>
</div>
<h1 id="android-cloexec-memfd-create">android-cloexec-memfd-create</h1>
<p><code>memfd_create()</code> should include <code>MFD_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>memfd_create(name, MFD_ALLOW_SEALING);

// becomes

memfd_create(name, MFD_ALLOW_SEALING | MFD_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-memfd-create.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-open</key>
    <name>android-cloexec-open</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-open</p>
</div>
<h1 id="android-cloexec-open">android-cloexec-open</h1>
<p>A common source of security bugs is code that opens a file without using the <code>O_CLOEXEC</code> flag. Without that flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain, leaking that sensitive data. Open-like functions including <code>open()</code>, <code>openat()</code>, and <code>open64()</code> should include <code>O_CLOEXEC</code> in their flags argument.</p>
<p>Examples:</p>
<pre class="c++"><code>open(&quot;filename&quot;, O_RDWR);
open64(&quot;filename&quot;, O_RDWR);
openat(0, &quot;filename&quot;, O_RDWR);

// becomes

open(&quot;filename&quot;, O_RDWR | O_CLOEXEC);
open64(&quot;filename&quot;, O_RDWR | O_CLOEXEC);
openat(0, &quot;filename&quot;, O_RDWR | O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-open.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-cloexec-pipe</key>
    <name>android-cloexec-pipe</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-pipe</p>
</div>
<h1 id="android-cloexec-pipe">android-cloexec-pipe</h1>
<p>This check detects usage of <code>pipe()</code>. Using <code>pipe()</code> is not recommended, <code>pipe2()</code> is the suggested replacement. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>pipe(pipefd);</code></pre>
<p>Suggested replacement:</p>
<pre class="c++"><code>pipe2(pipefd, O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-pipe.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>android-cloexec-pipe2</key>
    <name>android-cloexec-pipe2</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-pipe2</p>
</div>
<h1 id="android-cloexec-pipe2">android-cloexec-pipe2</h1>
<p>This check ensures that pipe2() is called with the O_CLOEXEC flag. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>pipe2(pipefd, O_NONBLOCK);</code></pre>
<p>Suggested replacement:</p>
<pre class="c++"><code>pipe2(pipefd, O_NONBLOCK | O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-pipe2.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>android-cloexec-socket</key>
    <name>android-cloexec-socket</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-cloexec-socket</p>
</div>
<h1 id="android-cloexec-socket">android-cloexec-socket</h1>
<p><code>socket()</code> should include <code>SOCK_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="c++"><code>socket(domain, type, SOCK_STREAM);

// becomes

socket(domain, type, SOCK_STREAM | SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/cloexec-socket.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>VULNERABILITY</type>
    </rule>
  <rule>
    <key>android-comparison-in-temp-failure-retry</key>
    <name>android-comparison-in-temp-failure-retry</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - android-comparison-in-temp-failure-retry</p>
</div>
<h1 id="android-comparison-in-temp-failure-retry">android-comparison-in-temp-failure-retry</h1>
<p>Diagnoses comparisons that appear to be incorrectly placed in the argument to the <code>TEMP_FAILURE_RETRY</code> macro. Having such a use is incorrect in the vast majority of cases, and will often silently defeat the purpose of the <code>TEMP_FAILURE_RETRY</code> macro.</p>
<p>For context, <code>TEMP_FAILURE_RETRY</code> is <a href="https://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html">a convenience macro</a> provided by both glibc and Bionic. Its purpose is to repeatedly run a syscall until it either succeeds, or fails for reasons other than being interrupted.</p>
<p>Example buggy usage looks like:</p>
<pre class="c"><code>char cs[1];
while (TEMP_FAILURE_RETRY(read(STDIN_FILENO, cs, sizeof(cs)) != 0)) {
  // Do something with cs.
}</code></pre>
<p>Because TEMP_FAILURE_RETRY will check for whether the result <em>of the comparison</em> is <code>-1</code>, and retry if so.</p>
<p>If you encounter this, the fix is simple: lift the comparison out of the <code>TEMP_FAILURE_RETRY</code> argument, like so:</p>
<pre class="c"><code>char cs[1];
while (TEMP_FAILURE_RETRY(read(STDIN_FILENO, cs, sizeof(cs))) != 0) {
  // Do something with cs.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>RetryMacros</p>
<p>A comma-separated list of the names of retry macros to be checked.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android/comparison-in-temp-failure-retry.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>boost-use-to-string</key>
    <name>boost-use-to-string</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - boost-use-to-string</p>
</div>
<h1 id="boost-use-to-string">boost-use-to-string</h1>
<p>This check finds conversion from integer type like <code>int</code> to <code>std::string</code> or <code>std::wstring</code> using <code>boost::lexical_cast</code>, and replace it with calls to <code>std::to_string</code> and <code>std::to_wstring</code>.</p>
<p>It doesn't replace conversion from floating points despite the <code>to_string</code> overloads, because it would change the behavior.</p>
<pre class="c++"><code>auto str = boost::lexical_cast&lt;std::string&gt;(42);
auto wstr = boost::lexical_cast&lt;std::wstring&gt;(2137LL);

// Will be changed to
auto str = std::to_string(42);
auto wstr = std::to_wstring(2137LL);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/boost/use-to-string.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-argument-comment</key>
    <name>bugprone-argument-comment</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-argument-comment</p>
</div>
<h1 id="bugprone-argument-comment">bugprone-argument-comment</h1>
<p>Checks that argument comments match parameter names.</p>
<p>The check understands argument comments in the form <code>/*parameter_name=*/</code> that are placed right before the argument.</p>
<pre class="c++"><code>void f(bool foo);

...

f(/*bar=*/true);
// warning: argument name &#39;bar&#39; in comment does not match parameter name &#39;foo&#39;</code></pre>
<p>The check tries to detect typos and suggest automated fixes for them.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When <span class="title-ref">false</span> (default value), the check will ignore leading and trailing underscores and case when comparing names -- otherwise they are taken into account.</p>
</div>
<div class="option">
<p>IgnoreSingleArgument</p>
<p>When <span class="title-ref">true</span>, the check will ignore the single argument.</p>
</div>
<div class="option">
<p>CommentBoolLiterals</p>
<p>When <span class="title-ref">true</span>, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the boolean literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(bool TurnKey, bool PressButton);

foo(true, false);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(bool TurnKey, bool PressButton);

foo(/*TurnKey=*/true, /*PressButton=*/false);</code></pre>
<div class="option">
<p>CommentIntegerLiterals</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the integer literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(int MeaningOfLife);

foo(42);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(int MeaningOfLife);

foo(/*MeaningOfLife=*/42);</code></pre>
<div class="option">
<p>CommentFloatLiterals</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the float/double literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(float Pi);

foo(3.14159);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(float Pi);

foo(/*Pi=*/3.14159);</code></pre>
<div class="option">
<p>CommentStringLiterals</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the string literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(const char *String);
void foo(const wchar_t *WideString);

foo(&quot;Hello World&quot;);
foo(L&quot;Hello World&quot;);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(const char *String);
void foo(const wchar_t *WideString);

foo(/*String=*/&quot;Hello World&quot;);
foo(/*WideString=*/L&quot;Hello World&quot;);</code></pre>
<div class="option">
<p>CommentCharacterLiterals</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the character literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(char *Character);

foo(&#39;A&#39;);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(char *Character);

foo(/*Character=*/&#39;A&#39;);</code></pre>
<div class="option">
<p>CommentUserDefinedLiterals</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the user defined literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(double Distance);

double operator&quot;&quot; _km(long double);

foo(402.0_km);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(double Distance);

double operator&quot;&quot; _km(long double);

foo(/*Distance=*/402.0_km);</code></pre>
<div class="option">
<p>CommentNullPtrs</p>
<p>When true, the check will add argument comments in the format <code>/*ParameterName=*/</code> right before the nullptr literal argument.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>void foo(A* Value);

foo(nullptr);</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo(A* Value);

foo(/*Value=*/nullptr);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/argument-comment.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-assert-side-effect</key>
    <name>bugprone-assert-side-effect</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-assert-side-effect</p>
</div>
<h1 id="bugprone-assert-side-effect">bugprone-assert-side-effect</h1>
<p>Finds <code>assert()</code> with side effect.</p>
<p>The condition of <code>assert()</code> is evaluated only in debug builds so a condition with side effect can cause different behavior in debug / release builds.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AssertMacros</p>
<p>A comma-separated list of the names of assert macros to be checked.</p>
</div>
<div class="option">
<p>CheckFunctionCalls</p>
<p>Whether to treat non-const member and non-member functions as they produce side effects. Disabled by default because it can increase the number of false positive warnings.</p>
</div>
<div class="option">
<p>IgnoredFunctions</p>
<p>A semicolon-separated list of the names of functions or methods to be considered as not having side-effects. Regular expressions are accepted, e.g. <span class="title-ref">[Rr]ef(erence)?$</span> matches every type with suffix <span class="title-ref">Ref</span>, <span class="title-ref">ref</span>, <span class="title-ref">Reference</span> and <span class="title-ref">reference</span>. The default is empty. If a name in the list contains the sequence <span class="title-ref">::</span> it is matched against the qualified typename (i.e. <span class="title-ref">namespace::Type</span>, otherwise it is matched against only the type name (i.e. <span class="title-ref">Type</span>).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/assert-side-effect.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-assignment-in-if-condition</key>
    <name>bugprone-assignment-in-if-condition</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-assignment-in-if-condition</p>
</div>
<h1 id="bugprone-assignment-in-if-condition">bugprone-assignment-in-if-condition</h1>
<p>Finds assignments within conditions of <span class="title-ref">if</span> statements. Such assignments are bug-prone because they may have been intended as equality tests.</p>
<p>This check finds all assignments within <span class="title-ref">if</span> conditions, including ones that are not flagged by <span class="title-ref">-Wparentheses</span> due to an extra set of parentheses, and including assignments that call an overloaded <span class="title-ref">operator=()</span>. The identified assignments violate <a href="https://barrgroup.com/embedded-systems/books/embedded-c-coding-standard/statement-rules/if-else-statements">BARR group "Rule 8.2.c"</a>.</p>
<pre class="c++"><code>int f = 3;
if(f = 4) { // This is identified by both `Wparentheses` and this check - should it have been: `if (f == 4)` ?
  f = f + 1;
}

if((f == 5) || (f = 6)) { // the assignment here `(f = 6)` is identified by this check, but not by `-Wparentheses`. Should it have been `(f == 6)` ?
  f = f + 2;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/assignment-in-if-condition.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-bad-signal-to-kill-thread</key>
    <name>bugprone-bad-signal-to-kill-thread</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-bad-signal-to-kill-thread</p>
</div>
<h1 id="bugprone-bad-signal-to-kill-thread">bugprone-bad-signal-to-kill-thread</h1>
<p>Finds <code>pthread_kill</code> function calls when a thread is terminated by raising <code>SIGTERM</code> signal and the signal kills the entire process, not just the individual thread. Use any signal except <code>SIGTERM</code>.</p>
<pre class="c++"><code>pthread_kill(thread, SIGTERM);</code></pre>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/POS44-C.+Do+not+use+signals+to+terminate+threads">POS44-C. Do not use signals to terminate threads</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/bad-signal-to-kill-thread.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-bool-pointer-implicit-conversion</key>
    <name>bugprone-bool-pointer-implicit-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-bool-pointer-implicit-conversion</p>
</div>
<h1 id="bugprone-bool-pointer-implicit-conversion">bugprone-bool-pointer-implicit-conversion</h1>
<p>Checks for conditions based on implicit conversion from a <code>bool</code> pointer to <code>bool</code>.</p>
<p>Example:</p>
<pre class="c++"><code>bool *p;
if (p) {
  // Never used in a pointer-specific way.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/bool-pointer-implicit-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-branch-clone</key>
    <name>bugprone-branch-clone</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-branch-clone</p>
</div>
<h1 id="bugprone-branch-clone">bugprone-branch-clone</h1>
<p>Checks for repeated branches in <code>if/else if/else</code> chains, consecutive repeated branches in <code>switch</code> statements and identical true and false branches in conditional operators.</p>
<pre class="c++"><code>if (test_value(x)) {
  y++;
  do_something(x, y);
} else {
  y++;
  do_something(x, y);
}</code></pre>
<p>In this simple example (which could arise e.g. as a copy-paste error) the <code>then</code> and <code>else</code> branches are identical and the code is equivalent the following shorter and cleaner code:</p>
<pre class="c++"><code>test_value(x); // can be omitted unless it has side effects
y++;
do_something(x, y);</code></pre>
<p>If this is the intended behavior, then there is no reason to use a conditional statement; otherwise the issue can be solved by fixing the branch that is handled incorrectly.</p>
<p>The check also detects repeated branches in longer <code>if/else if/else</code> chains where it would be even harder to notice the problem.</p>
<p>In <code>switch</code> statements the check only reports repeated branches when they are consecutive, because it is relatively common that the <code>case:</code> labels have some natural ordering and rearranging them would decrease the readability of the code. For example:</p>
<pre class="c++"><code>switch (ch) {
case &#39;a&#39;:
  return 10;
case &#39;A&#39;:
  return 10;
case &#39;b&#39;:
  return 11;
case &#39;B&#39;:
  return 11;
default:
  return 10;
}</code></pre>
<p>Here the check reports that the <code>'a'</code> and <code>'A'</code> branches are identical (and that the <code>'b'</code> and <code>'B'</code> branches are also identical), but does not report that the <code>default:</code> branch is also identical to the first two branches. If this is indeed the correct behavior, then it could be implemented as:</p>
<pre class="c++"><code>switch (ch) {
case &#39;a&#39;:
case &#39;A&#39;:
  return 10;
case &#39;b&#39;:
case &#39;B&#39;:
  return 11;
default:
  return 10;
}</code></pre>
<p>Here the check does not warn for the repeated <code>return 10;</code>, which is good if we want to preserve that <code>'a'</code> is before <code>'b'</code> and <code>default:</code> is the last branch.</p>
<p>Switch cases marked with the <code>[[fallthrough]]</code> attribute are ignored.</p>
<p>Finally, the check also examines conditional operators and reports code like:</p>
<pre class="c++"><code>return test_value(x) ? x : x;</code></pre>
<p>Unlike if statements, the check does not detect chains of conditional operators.</p>
<p>Note: This check also reports situations where branches become identical only after preprocessing.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/branch-clone.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-casting-through-void</key>
    <name>bugprone-casting-through-void</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-casting-through-void</p>
</div>
<h1 id="bugprone-casting-through-void">bugprone-casting-through-void</h1>
<p>Detects unsafe or redundant two-step casting operations involving <code>void*</code>.</p>
<p>Two-step type conversions via <code>void*</code> are discouraged for several reasons.</p>
<ul>
<li>They obscure code and impede its understandability, complicating maintenance.</li>
<li>These conversions bypass valuable compiler support, erasing warnings related to pointer alignment. It may violate strict aliasing rule and leading to undefined behavior.</li>
<li>In scenarios involving multiple inheritance, ambiguity and unexpected outcomes can arise due to the loss of type information, posing runtime issues.</li>
</ul>
<p>In summary, avoiding two-step type conversions through <code>void*</code> ensures clearer code, maintains essential compiler warnings, and prevents ambiguity and potential runtime errors, particularly in complex inheritance scenarios.</p>
<p>Examples:</p>
<pre class="c++"><code>using IntegerPointer = int *;
double *ptr;

static_cast&lt;IntegerPointer&gt;(static_cast&lt;void *&gt;(ptr)); // WRONG
reinterpret_cast&lt;IntegerPointer&gt;(reinterpret_cast&lt;void *&gt;(ptr)); // WRONG
(IntegerPointer)(void *)ptr; // WRONG
IntegerPointer(static_cast&lt;void *&gt;(ptr)); // WRONG</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/casting-through-void.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-chained-comparison</key>
    <name>bugprone-chained-comparison</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-chained-comparison</p>
</div>
<h1 id="bugprone-chained-comparison">bugprone-chained-comparison</h1>
<p>Check detects chained comparison operators that can lead to unintended behavior or logical errors.</p>
<p>Chained comparisons are expressions that use multiple comparison operators to compare three or more values. For example, the expression <code>a &lt; b &lt; c</code> compares the values of <code>a</code>, <code>b</code>, and <code>c</code>. However, this expression does not evaluate as <code>(a &lt; b) &amp;&amp; (b &lt; c)</code>, which is probably what the developer intended. Instead, it evaluates as <code>(a &lt; b) &lt; c</code>, which may produce unintended results, especially when the types of <code>a</code>, <code>b</code>, and <code>c</code> are different.</p>
<p>To avoid such errors, the check will issue a warning when a chained comparison operator is detected, suggesting to use parentheses to specify the order of evaluation or to use a logical operator to separate comparison expressions.</p>
<p>Consider the following examples:</p>
<pre class="c++"><code>int a = 2, b = 6, c = 4;
if (a &lt; b &lt; c) {
    // This block will be executed
}</code></pre>
<p>In this example, the developer intended to check if <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>. However, the expression <code>a &lt; b &lt; c</code> is equivalent to <code>(a &lt; b) &lt; c</code>. Since <code>a &lt; b</code> is <code>true</code>, the expression <code>(a &lt; b) &lt; c</code> is evaluated as <code>1 &lt; c</code>, which is equivalent to <code>true &lt; c</code> and is invalid in this case as <code>b &lt; c</code> is <code>false</code>.</p>
<p>Even that above issue could be detected as comparison of <code>int</code> to <code>bool</code>, there is more dangerous example:</p>
<pre class="c++"><code>bool a = false, b = false, c = true;
if (a == b == c) {
    // This block will be executed
}</code></pre>
<p>In this example, the developer intended to check if <code>a</code>, <code>b</code>, and <code>c</code> are all equal. However, the expression <code>a == b == c</code> is evaluated as <code>(a == b) == c</code>. Since <code>a == b</code> is true, the expression <code>(a == b) == c</code> is evaluated as <code>true == c</code>, which is equivalent to <code>true == true</code>. This comparison yields <code>true</code>, even though <code>a</code> and <code>b</code> are <code>false</code>, and are not equal to <code>c</code>.</p>
<p>To avoid this issue, the developer can use a logical operator to separate the comparison expressions, like this:</p>
<pre class="c++"><code>if (a == b &amp;&amp; b == c) {
    // This block will not be executed
}</code></pre>
<p>Alternatively, use of parentheses in the comparison expressions can make the developer's intention more explicit and help avoid misunderstanding.</p>
<pre class="c++"><code>if ((a == b) == c) {
    // This block will be executed
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/chained-comparison.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-compare-pointer-to-member-virtual-function</key>
    <name>bugprone-compare-pointer-to-member-virtual-function</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-compare-pointer-to-member-virtual-function</p>
</div>
<h1 id="bugprone-compare-pointer-to-member-virtual-function">bugprone-compare-pointer-to-member-virtual-function</h1>
<p>Detects unspecified behavior about equality comparison between pointer to member virtual function and anything other than null-pointer-constant.</p>
<pre class="c++"><code>struct A {
  void f1();
  void f2();
  virtual void f3();
  virtual void f4();

  void g1(int);
};

void fn() {
  bool r1 = (&amp;A::f1 == &amp;A::f2);  // ok
  bool r2 = (&amp;A::f1 == &amp;A::f3);  // bugprone
  bool r3 = (&amp;A::f1 != &amp;A::f3);  // bugprone
  bool r4 = (&amp;A::f3 == nullptr); // ok
  bool r5 = (&amp;A::f3 == &amp;A::f4);  // bugprone

  void (A::*v1)() = &amp;A::f3;
  bool r6 = (v1 == &amp;A::f1); // bugprone
  bool r6 = (v1 == nullptr); // ok

  void (A::*v2)() = &amp;A::f2;
  bool r7 = (v2 == &amp;A::f1); // false positive, but potential risk if assigning other value to v2.

  void (A::*v3)(int) = &amp;A::g1;
  bool r8 = (v3 == &amp;A::g1); // ok, no virtual function match void(A::*)(int) signature.
}</code></pre>
<p>Provide warnings on equality comparisons involve pointers to member virtual function or variables which is potential pointer to member virtual function and any entity other than a null-pointer constant.</p>
<p>In certain compilers, virtual function addresses are not conventional pointers but instead consist of offsets and indexes within a virtual function table (vtable). Consequently, these pointers may vary between base and derived classes, leading to unpredictable behavior when compared directly. This issue becomes particularly challenging when dealing with pointers to pure virtual functions, as they may not even have a valid address, further complicating comparisons.</p>
<p>Instead, it is recommended to utilize the <code>typeid</code> operator or other appropriate mechanisms for comparing objects to ensure robust and predictable behavior in your codebase. By heeding this detection and adopting a more reliable comparison method, you can mitigate potential issues related to unspecified behavior, especially when dealing with pointers to member virtual functions or pure virtual functions, thereby improving the overall stability and maintainability of your code. In scenarios involving pointers to member virtual functions, it's only advisable to employ <code>nullptr</code> for comparisons.</p>
<h2 id="limitations">Limitations</h2>
<p>Does not analyze values stored in a variable. For variable, only analyze all virtual methods in the same <code>class</code> or <code>struct</code> and diagnose when assigning a pointer to member virtual function to this variable is possible.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/compare-pointer-to-member-virtual-function.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-copy-constructor-init</key>
    <name>bugprone-copy-constructor-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-copy-constructor-init</p>
</div>
<h1 id="bugprone-copy-constructor-init">bugprone-copy-constructor-init</h1>
<p>Finds copy constructors where the constructor doesn't call the copy constructor of the base class.</p>
<pre class="c++"><code>class Copyable {
public:
  Copyable() = default;
  Copyable(const Copyable &amp;) = default;

  int memberToBeCopied = 0;
};
class X2 : public Copyable {
  X2(const X2 &amp;other) {} // Copyable(other) is missing
};</code></pre>
<p>Also finds copy constructors where the constructor of the base class don't have parameter.</p>
<pre class="c++"><code>class X3 : public Copyable {
  X3(const X3 &amp;other) : Copyable() {} // other is missing
};</code></pre>
<p>Failure to properly initialize base class sub-objects during copy construction can result in undefined behavior, crashes, data corruption, or other unexpected outcomes. The check ensures that the copy constructor of a derived class properly calls the copy constructor of the base class, helping to prevent bugs and improve code quality.</p>
<p>Limitations:</p>
<ul>
<li>It won't generate warnings for empty classes, as there are no class members (including base class sub-objects) to worry about.</li>
<li>It won't generate warnings for base classes that have copy constructor private or deleted.</li>
<li>It won't generate warnings for base classes that are initialized using other non-default constructor, as this could be intentional.</li>
</ul>
<p>The check also suggests a fix-its in some cases.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/copy-constructor-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-dangling-handle</key>
    <name>bugprone-dangling-handle</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-dangling-handle</p>
</div>
<h1 id="bugprone-dangling-handle">bugprone-dangling-handle</h1>
<p>Detect dangling references in value handles like <code>std::string_view</code>. These dangling references can be a result of constructing handles from temporary values, where the temporary is destroyed soon after the handle is created.</p>
<p>Examples:</p>
<pre class="c++"><code>string_view View = string();  // View will dangle.
string A;
View = A + &quot;A&quot;;  // still dangle.

vector&lt;string_view&gt; V;
V.push_back(string());  // V[0] is dangling.
V.resize(3, string());  // V[1] and V[2] will also dangle.

string_view f() {
  // All these return values will dangle.
  return string();
  string S;
  return S;
  char Array[10]{};
  return Array;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HandleClasses</p>
<p>A semicolon-separated list of class names that should be treated as handles. By default only <code>std::basic_string_view</code> and <code>std::experimental::basic_string_view</code> are considered.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/dangling-handle.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-dynamic-static-initializers</key>
    <name>bugprone-dynamic-static-initializers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-dynamic-static-initializers</p>
</div>
<h1 id="bugprone-dynamic-static-initializers">bugprone-dynamic-static-initializers</h1>
<p>Finds instances of static variables that are dynamically initialized in header files.</p>
<p>This can pose problems in certain multithreaded contexts. For example, when disabling compiler generated synchronization instructions for static variables initialized at runtime (e.g. by <code>-fno-threadsafe-statics</code>), even if a particular project takes the necessary precautions to prevent race conditions during initialization by providing their own synchronization, header files included from other projects may not. Therefore, such a check is helpful for ensuring that disabling compiler generated synchronization for static variable initialization will not cause problems.</p>
<p>Consider the following code:</p>
<pre class="c"><code>int foo() {
  static int k = bar();
  return k;
}</code></pre>
<p>When synchronization of static initialization is disabled, if two threads both call <span class="title-ref">foo</span> for the first time, there is the possibility that <span class="title-ref">k</span> will be double initialized, creating a race condition.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/dynamic-static-initializers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-easily-swappable-parameters</key>
    <name>bugprone-easily-swappable-parameters</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-easily-swappable-parameters</p>
</div>
<h1 id="bugprone-easily-swappable-parameters">bugprone-easily-swappable-parameters</h1>
<p>Finds function definitions where parameters of convertible types follow each other directly, making call sites prone to calling the function with swapped (or badly ordered) arguments.</p>
<pre class="c++"><code>void drawPoint(int X, int Y) { /* ... */ }
FILE *open(const char *Dir, const char *Name, Flags Mode) { /* ... */ }</code></pre>
<p>A potential call like <code>drawPoint(-2, 5)</code> or <code>openPath("a.txt", "tmp", Read)</code> is perfectly legal from the language's perspective, but might not be what the developer of the function intended.</p>
<p>More elaborate and type-safe constructs, such as opaque typedefs or strong types should be used instead, to prevent a mistaken order of arguments.</p>
<pre class="c++"><code>struct Coord2D { int X; int Y; };
void drawPoint(const Coord2D Pos) { /* ... */ }
FILE *open(const Path &amp;Dir, const Filename &amp;Name, Flags Mode) { /* ... */ }</code></pre>
<p>Due to the potentially elaborate refactoring and API-breaking that is necessary to strengthen the type safety of a project, no automatic fix-its are offered.</p>
<h2 id="options">Options</h2>
<h3 id="extensionrelaxation-options">Extension/relaxation options</h3>
<p>Relaxation (or extension) options can be used to broaden the scope of the analysis and fine-tune the enabling of more mixes between types. Some mixes may depend on coding style or preference specific to a project, however, it should be noted that enabling <em>all</em> of these relaxations model the way of mixing at call sites the most. These options are expected to make the check report for more functions, and report longer mixable ranges.</p>
<div class="option">
<p>QualifiersMix</p>
<p>Whether to consider parameters of some <em>cvr-qualified</em> <code>T</code> and a differently <em>cvr-qualified</em> <code>T</code> (i.e. <code>T</code> and <code>const T</code>, <code>const T</code> and <code>volatile T</code>, etc.) mixable between one another. If <span class="title-ref">false</span>, the check will consider differently qualified types unmixable. <span class="title-ref">True</span> turns the warnings on. Defaults to <span class="title-ref">false</span>.</p>
<p>The following example produces a diagnostic only if <span class="title-ref">QualifiersMix</span> is enabled:</p>
<pre class="c++"><code>void *memcpy(const void *Destination, void *Source, std::size_t N) { /* ... */ }</code></pre>
</div>
<div class="option">
<p>ModelImplicitConversions</p>
<p>Whether to consider parameters of type <code>T</code> and <code>U</code> mixable if there exists an implicit conversion from <code>T</code> to <code>U</code> and <code>U</code> to <code>T</code>. If <span class="title-ref">false</span>, the check will not consider implicitly convertible types for mixability. <span class="title-ref">True</span> turns warnings for implicit conversions on. Defaults to <span class="title-ref">true</span>.</p>
<p>The following examples produce a diagnostic only if <span class="title-ref">ModelImplicitConversions</span> is enabled:</p>
<pre class="c++"><code>void fun(int Int, double Double) { /* ... */ }
void compare(const char *CharBuf, std::string String) { /* ... */ }</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Changing the qualifiers of an expression's type (e.g. from <code>int</code> to <code>const int</code>) is defined as an <em>implicit conversion</em> in the C++ Standard. However, the check separates this decision-making on the mixability of differently qualified types based on whether <span class="title-ref">QualifiersMix</span> was enabled.</p>
<p>For example, the following code snippet will only produce a diagnostic if <strong>both</strong> <span class="title-ref">QualifiersMix</span> and <span class="title-ref">ModelImplicitConversions</span> are enabled:</p>
<pre class="c++"><code>void fun2(int Int, const double Double) { /* ... */ }</code></pre>
</div>
</div>
<h3 id="filtering-options">Filtering options</h3>
<p>Filtering options can be used to lessen the size of the diagnostics emitted by the checker, whether the aim is to ignore certain constructs or dampen the noisiness.</p>
<div class="option">
<p>MinimumLength</p>
<p>The minimum length required from an adjacent parameter sequence to be diagnosed. Defaults to <span class="title-ref">2</span>. Might be any positive integer greater or equal to <span class="title-ref">2</span>. If <span class="title-ref">0</span> or <span class="title-ref">1</span> is given, the default value <span class="title-ref">2</span> will be used instead.</p>
<p>For example, if <span class="title-ref">3</span> is specified, the examples above will not be matched.</p>
</div>
<div class="option">
<p>IgnoredParameterNames</p>
<p>The list of parameter <strong>names</strong> that should never be considered part of a swappable adjacent parameter sequence. The value is a <span class="title-ref">;</span>-separated list of names. To ignore unnamed parameters, add <span class="title-ref">""</span> to the list verbatim (not the empty string, but the two quotes, potentially escaped!). <strong>This option is case-sensitive!</strong></p>
<p>By default, the following parameter names, and their Uppercase-initial variants are ignored: <span class="title-ref">""</span> (unnamed parameters), <span class="title-ref">iterator</span>, <span class="title-ref">begin</span>, <span class="title-ref">end</span>, <span class="title-ref">first</span>, <span class="title-ref">last</span>, <span class="title-ref">lhs</span>, <span class="title-ref">rhs</span>.</p>
</div>
<div class="option">
<p>IgnoredParameterTypeSuffixes</p>
<p>The list of parameter <strong>type name suffixes</strong> that should never be considered part of a swappable adjacent parameter sequence. Parameters which type, as written in the source code, end with an element of this option will be ignored. The value is a <span class="title-ref">;</span>-separated list of names. <strong>This option is case-sensitive!</strong></p>
<p>By default, the following, and their lowercase-initial variants are ignored: <span class="title-ref">bool</span>, <span class="title-ref">It</span>, <span class="title-ref">Iterator</span>, <span class="title-ref">InputIt</span>, <span class="title-ref">ForwardIt</span>, <span class="title-ref">BidirIt</span>, <span class="title-ref">RandomIt</span>, <span class="title-ref">random_iterator</span>, <span class="title-ref">ReverseIt</span>, <span class="title-ref">reverse_iterator</span>, <span class="title-ref">reverse_const_iterator</span>, <span class="title-ref">RandomIt</span>, <span class="title-ref">random_iterator</span>, <span class="title-ref">ReverseIt</span>, <span class="title-ref">reverse_iterator</span>, <span class="title-ref">reverse_const_iterator</span>, <span class="title-ref">Const_Iterator</span>, <span class="title-ref">ConstIterator</span>, <span class="title-ref">const_reverse_iterator</span>, <span class="title-ref">ConstReverseIterator</span>. In addition, <span class="title-ref">_Bool</span> (but not <span class="title-ref">_bool</span>) is also part of the default value.</p>
</div>
<div class="option">
<p>SuppressParametersUsedTogether</p>
<p>Suppresses diagnostics about parameters that are used together or in a similar fashion inside the function's body. Defaults to <span class="title-ref">true</span>. Specifying <span class="title-ref">false</span> will turn off the heuristics.</p>
<p>Currently, the following heuristics are implemented which will suppress the warning about the parameter pair involved:</p>
<ul>
<li><p>The parameters are used in the same expression, e.g. <code>f(a, b)</code> or <code>a &lt; b</code>.</p></li>
<li><p>The parameters are further passed to the same function to the same parameter of that function, of the same overload. E.g. <code>f(a, 1)</code> and <code>f(b, 2)</code> to some <code>f(T, int)</code>.</p>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>The check does not perform path-sensitive analysis, and as such, "same function" in this context means the same function declaration. If the same member function of a type on two distinct instances are called with the parameters, it will still be regarded as "same function".</p>
</div></li>
<li><p>The same member field is accessed, or member method is called of the two parameters, e.g. <code>a.foo()</code> and <code>b.foo()</code>.</p></li>
<li><p>Separate <code>return</code> statements return either of the parameters on different code paths.</p></li>
</ul>
</div>
<div class="option">
<p>NamePrefixSuffixSilenceDissimilarityTreshold</p>
<p>The number of characters two parameter names might be different on <em>either</em> the head or the tail end with the rest of the name the same so that the warning about the two parameters are silenced. Defaults to <span class="title-ref">1</span>. Might be any positive integer. If <span class="title-ref">0</span>, the filtering heuristic based on the parameters' names is turned off.</p>
<p>This option can be used to silence warnings about parameters where the naming scheme indicates that the order of those parameters do not matter.</p>
<p>For example, the parameters <code>LHS</code> and <code>RHS</code> are 1-dissimilar suffixes of each other: <code>L</code> and <code>R</code> is the different character, while <code>HS</code> is the common suffix. Similarly, parameters <code>text1, text2, text3</code> are 1-dissimilar prefixes of each other, with the numbers at the end being the dissimilar part. If the value is at least <span class="title-ref">1</span>, such cases will not be reported.</p>
</div>
<h2 id="limitations">Limitations</h2>
<p><strong>This check is designed to check function signatures!</strong></p>
<p>The check does not investigate functions that are generated by the compiler in a context that is only determined from a call site. These cases include variadic functions, functions in C code that do not have an argument list, and C++ template instantiations. Most of these cases, which are otherwise swappable from a caller's standpoint, have no way of getting "fixed" at the definition point. In the case of C++ templates, only primary template definitions and explicit specializations are matched and analyzed.</p>
<p>None of the following cases produce a diagnostic:</p>
<pre class="c++"><code>int printf(const char *Format, ...) { /* ... */ }
int someOldCFunction() { /* ... */ }
template &lt;typename T, typename U&gt;
int add(T X, U Y) { return X + Y };
void theseAreNotWarnedAbout() {
    printf(&quot;%d %d\n&quot;, 1, 2);   // Two ints passed, they could be swapped.
    someOldCFunction(1, 2, 3); // Similarly, multiple ints passed.
    add(1, 2); // Instantiates &#39;add&lt;int, int&gt;&#39;, but that&#39;s not a user-defined function.
}</code></pre>
<p>Due to the limitation above, parameters which type are further dependent upon template instantiations to <em>prove</em> that they mix with another parameter's is not diagnosed.</p>
<pre class="c++"><code>template &lt;typename T&gt;
struct Vector {
  typedef T element_type;
};
// Diagnosed: Explicit instantiation was done by the user, we can prove it
// is the same type.
void instantiated(int A, Vector&lt;int&gt;::element_type B) { /* ... */ }
// Diagnosed: The two parameter types are exactly the same.
template &lt;typename T&gt;
void exact(typename Vector&lt;T&gt;::element_type A,
           typename Vector&lt;T&gt;::element_type B) { /* ... */ }
// Skipped: The two parameters are both &#39;T&#39; but we cannot prove this
// without actually instantiating.
template &lt;typename T&gt;
void falseNegative(T A, typename Vector&lt;T&gt;::element_type B) { /* ... */ }</code></pre>
<p>In the context of <em>implicit conversions</em> (when <span class="title-ref">ModelImplicitConversions</span> is enabled), the modelling performed by the check warns if the parameters are swappable and the swapped order matches implicit conversions. It does not model whether there exists an unrelated third type from which <em>both</em> parameters can be given in a function call. This means that in the following example, even while <code>strs()</code> clearly carries the possibility to be called with swapped arguments (as long as the arguments are string literals), will not be warned about.</p>
<pre class="c++"><code>struct String {
    String(const char *Buf);
};
struct StringView {
    StringView(const char *Buf);
    operator const char *() const;
};
// Skipped: Directly swapping expressions of the two type cannot mix.
// (Note: StringView -&gt; const char * -&gt; String would be **two**
// user-defined conversions, which is disallowed by the language.)
void strs(String Str, StringView SV) { /* ... */ }
// Diagnosed: StringView implicitly converts to and from a buffer.
void cStr(StringView SV, const char *Buf() { /* ... */ }</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/easily-swappable-parameters.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-empty-catch</key>
    <name>bugprone-empty-catch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-empty-catch</p>
</div>
<h1 id="bugprone-empty-catch">bugprone-empty-catch</h1>
<p>Detects and suggests addressing issues with empty catch statements.</p>
<pre class="c++"><code>try {
  // Some code that can throw an exception
} catch(const std::exception&amp;) {
}</code></pre>
<p>Having empty catch statements in a codebase can be a serious problem that developers should be aware of. Catch statements are used to handle exceptions that are thrown during program execution. When an exception is thrown, the program jumps to the nearest catch statement that matches the type of the exception.</p>
<p>Empty catch statements, also known as "swallowing" exceptions, catch the exception but do nothing with it. This means that the exception is not handled properly, and the program continues to run as if nothing happened. This can lead to several issues, such as:</p>
<ul>
<li><em>Hidden Bugs</em>: If an exception is caught and ignored, it can lead to hidden bugs that are difficult to diagnose and fix. The root cause of the problem may not be apparent, and the program may continue to behave in unexpected ways.</li>
<li><em>Security Issues</em>: Ignoring exceptions can lead to security issues, such as buffer overflows or null pointer dereferences. Hackers can exploit these vulnerabilities to gain access to sensitive data or execute malicious code.</li>
<li><em>Poor Code Quality</em>: Empty catch statements can indicate poor code quality and a lack of attention to detail. This can make the codebase difficult to maintain and update, leading to longer development cycles and increased costs.</li>
<li><em>Unreliable Code</em>: Code that ignores exceptions is often unreliable and can lead to unpredictable behavior. This can cause frustration for users and erode trust in the software.</li>
</ul>
<p>To avoid these issues, developers should always handle exceptions properly. This means either fixing the underlying issue that caused the exception or propagating the exception up the call stack to a higher-level handler. If an exception is not important, it should still be logged or reported in some way so that it can be tracked and addressed later.</p>
<p>If the exception is something that can be handled locally, then it should be handled within the catch block. This could involve logging the exception or taking other appropriate action to ensure that the exception is not ignored.</p>
<p>Here is an example:</p>
<pre class="c++"><code>try {
  // Some code that can throw an exception
} catch (const std::exception&amp; ex) {
  // Properly handle the exception, e.g.:
  std::cerr &lt;&lt; &quot;Exception caught: &quot; &lt;&lt; ex.what() &lt;&lt; std::endl;
}</code></pre>
<p>If the exception cannot be handled locally and needs to be propagated up the call stack, it should be re-thrown or new exception should be thrown.</p>
<p>Here is an example:</p>
<pre class="c++"><code>try {
  // Some code that can throw an exception
} catch (const std::exception&amp; ex) {
  // Re-throw the exception
  throw;
}</code></pre>
<p>In some cases, catching the exception at this level may not be necessary, and it may be appropriate to let the exception propagate up the call stack. This can be done simply by not using <code>try/catch</code> block.</p>
<p>Here is an example:</p>
<pre class="c++"><code>void function() {
  // Some code that can throw an exception
}

void callerFunction() {
  try {
    function();
  } catch (const std::exception&amp; ex) {
    // Handling exception on higher level
    std::cerr &lt;&lt; &quot;Exception caught: &quot; &lt;&lt; ex.what() &lt;&lt; std::endl;
  }
}</code></pre>
<p>Other potential solution to avoid empty catch statements is to modify the code to avoid throwing the exception in the first place. This can be achieved by using a different API, checking for error conditions beforehand, or handling errors in a different way that does not involve exceptions. By eliminating the need for try-catch blocks, the code becomes simpler and less error-prone.</p>
<p>Here is an example:</p>
<pre class="c++"><code>// Old code:
try {
  mapContainer[&quot;Key&quot;].callFunction();
} catch(const std::out_of_range&amp;) {
}

// New code
if (auto it = mapContainer.find(&quot;Key&quot;); it != mapContainer.end()) {
  it-&gt;second.callFunction();
}</code></pre>
<p>In conclusion, empty catch statements are a bad practice that can lead to hidden bugs, security issues, poor code quality, and unreliable code. By handling exceptions properly, developers can ensure that their code is robust, secure, and maintainable.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreCatchWithKeywords</p>
<p>This option can be used to ignore specific catch statements containing certain keywords. If a <code>catch</code> statement body contains (case-insensitive) any of the keywords listed in this semicolon-separated option, then the catch will be ignored, and no warning will be raised. Default value: <span class="title-ref">@TODO;@FIXME</span>.</p>
</div>
<div class="option">
<p>AllowEmptyCatchForExceptions</p>
<p>This option can be used to ignore empty catch statements for specific exception types. By default, the check will raise a warning if an empty catch statement is detected, regardless of the type of exception being caught. However, in certain situations, such as when a developer wants to intentionally ignore certain exceptions or handle them in a different way, it may be desirable to allow empty catch statements for specific exception types. To configure this option, a semicolon-separated list of exception type names should be provided. If an exception type name in the list is caught in an empty catch statement, no warning will be raised. Default value: empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/empty-catch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-exception-escape</key>
    <name>bugprone-exception-escape</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-exception-escape</p>
</div>
<h1 id="bugprone-exception-escape">bugprone-exception-escape</h1>
<p>Finds functions which may throw an exception directly or indirectly, but they should not. The functions which should not throw exceptions are the following:</p>
<ul>
<li>Destructors</li>
<li>Move constructors</li>
<li>Move assignment operators</li>
<li>The <code>main()</code> functions</li>
<li><code>swap()</code> functions</li>
<li><code>iter_swap()</code> functions</li>
<li><code>iter_move()</code> functions</li>
<li>Functions marked with <code>throw()</code> or <code>noexcept</code></li>
<li>Other functions given as option</li>
</ul>
<p>A destructor throwing an exception may result in undefined behavior, resource leaks or unexpected termination of the program. Throwing move constructor or move assignment also may result in undefined behavior or resource leak. The <code>swap()</code> operations expected to be non throwing most of the cases and they are always possible to implement in a non throwing way. Non throwing <code>swap()</code> operations are also used to create move operations. A throwing <code>main()</code> function also results in unexpected termination.</p>
<p>Functions declared explicitly with <code>noexcept(false)</code> or <code>throw(exception)</code> will be excluded from the analysis, as even though it is not recommended for functions like <code>swap()</code>, <code>main()</code>, move constructors, move assignment operators and destructors, it is a clear indication of the developer's intention and should be respected.</p>
<p>WARNING! This check may be expensive on large source files.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>FunctionsThatShouldNotThrow</p>
<p>Comma separated list containing function names which should not throw. An example value for this parameter can be <code>WinMain</code> which adds function <code>WinMain()</code> in the Windows API to the list of the functions which should not throw. Default value is an empty string.</p>
</div>
<div class="option">
<p>IgnoredExceptions</p>
<p>Comma separated list containing type names which are not counted as thrown exceptions in the check. Default value is an empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/exception-escape.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-fold-init-type</key>
    <name>bugprone-fold-init-type</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-fold-init-type</p>
</div>
<h1 id="bugprone-fold-init-type">bugprone-fold-init-type</h1>
<p>The check flags type mismatches in <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">folds</a> like <code>std::accumulate</code> that might result in loss of precision. <code>std::accumulate</code> folds an input range into an initial value using the type of the latter, with <code>operator+</code> by default. This can cause loss of precision through:</p>
<ul>
<li>Truncation: The following code uses a floating point range and an int initial value, so truncation will happen at every application of <code>operator+</code> and the result will be <span class="title-ref">0</span>, which might not be what the user expected.</li>
</ul>
<pre class="c++"><code>auto a = {0.5f, 0.5f, 0.5f, 0.5f};
return std::accumulate(std::begin(a), std::end(a), 0);</code></pre>
<ul>
<li>Overflow: The following code also returns <span class="title-ref">0</span>.</li>
</ul>
<pre class="c++"><code>auto a = {65536LL * 65536 * 65536};
return std::accumulate(std::begin(a), std::end(a), 0);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/fold-init-type.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-forward-declaration-namespace</key>
    <name>bugprone-forward-declaration-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-forward-declaration-namespace</p>
</div>
<h1 id="bugprone-forward-declaration-namespace">bugprone-forward-declaration-namespace</h1>
<p>Checks if an unused forward declaration is in a wrong namespace.</p>
<p>The check inspects all unused forward declarations and checks if there is any declaration/definition with the same name existing, which could indicate that the forward declaration is in a potentially wrong namespace.</p>
<pre class="c++"><code>namespace na { struct A; }
namespace nb { struct A {}; }
nb::A a;
// warning : no definition found for &#39;A&#39;, but a definition with the same name
// &#39;A&#39; found in another namespace &#39;nb::&#39;</code></pre>
<p>This check can only generate warnings, but it can't suggest a fix at this point.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/forward-declaration-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-forwarding-reference-overload</key>
    <name>bugprone-forwarding-reference-overload</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-forwarding-reference-overload</p>
</div>
<h1 id="bugprone-forwarding-reference-overload">bugprone-forwarding-reference-overload</h1>
<p>The check looks for perfect forwarding constructors that can hide copy or move constructors. If a non const lvalue reference is passed to the constructor, the forwarding reference parameter will be a better match than the const reference parameter of the copy constructor, so the perfect forwarding constructor will be called, which can be confusing. For detailed description of this issue see: Scott Meyers, Effective Modern C++, Item 26.</p>
<p>Consider the following example:</p>
<pre class="c++"><code>class Person {
public:
  // C1: perfect forwarding ctor
  template&lt;typename T&gt;
  explicit Person(T&amp;&amp; n) {}

  // C2: perfect forwarding ctor with parameter default value
  template&lt;typename T&gt;
  explicit Person(T&amp;&amp; n, int x = 1) {}

  // C3: perfect forwarding ctor guarded with enable_if
  template&lt;typename T, typename X = enable_if_t&lt;is_special&lt;T&gt;,void&gt;&gt;
  explicit Person(T&amp;&amp; n) {}

  // C4: variadic perfect forwarding ctor guarded with enable_if
  template&lt;typename... A,
    enable_if_t&lt;is_constructible_v&lt;tuple&lt;string, int&gt;, A&amp;&amp;...&gt;, int&gt; = 0&gt;
  explicit Person(A&amp;&amp;... a) {}

  // C5: perfect forwarding ctor guarded with requires expression
  template&lt;typename T&gt;
  requires requires { is_special&lt;T&gt;; }
  explicit Person(T&amp;&amp; n) {}

  // C6: perfect forwarding ctor guarded with concept requirement
  template&lt;Special T&gt;
  explicit Person(T&amp;&amp; n) {}

  // (possibly compiler generated) copy ctor
  Person(const Person&amp; rhs);
};</code></pre>
<p>The check warns for constructors C1 and C2, because those can hide copy and move constructors. We suppress warnings if the copy and the move constructors are both disabled (deleted or private), because there is nothing the perfect forwarding constructor could hide in this case. We also suppress warnings for constructors like C3-C6 that are guarded with an <code>enable_if</code> or a concept, assuming the programmer was aware of the possible hiding.</p>
<h2 id="background">Background</h2>
<p>For deciding whether a constructor is guarded with enable_if, we consider the types of the constructor parameters, the default values of template type parameters and the types of non-type template parameters with a default literal value. If any part of these types is <code>std::enable_if</code> or <code>std::enable_if_t</code>, we assume the constructor is guarded.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/forwarding-reference-overload.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-implicit-widening-of-multiplication-result</key>
    <name>bugprone-implicit-widening-of-multiplication-result</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-implicit-widening-of-multiplication-result</p>
</div>
<h1 id="bugprone-implicit-widening-of-multiplication-result">bugprone-implicit-widening-of-multiplication-result</h1>
<p>The check diagnoses instances where a result of a multiplication is implicitly widened, and suggests (with fix-it) to either silence the code by making widening explicit, or to perform the multiplication in a wider type, to avoid the widening afterwards.</p>
<p>This is mainly useful when operating on very large buffers. For example, consider:</p>
<pre class="c++"><code>void zeroinit(char* base, unsigned width, unsigned height) {
  for(unsigned row = 0; row != height; ++row) {
    for(unsigned col = 0; col != width; ++col) {
      char* ptr = base + row * width + col;
      *ptr = 0;
    }
  }
}</code></pre>
<p>This is fine in general, but if <code>width * height</code> overflows, you end up wrapping back to the beginning of <code>base</code> instead of processing the entire requested buffer.</p>
<p>Indeed, this only matters for pretty large buffers (4GB+), but that can happen very easily for example in image processing, where for that to happen you "only" need a ~269MPix image.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>UseCXXStaticCastsInCppSources</p>
<p>When suggesting fix-its for C++ code, should C++-style <code>static_cast&lt;&gt;()</code>'s be suggested, or C-style casts. Defaults to <code>true</code>.</p>
</div>
<div class="option">
<p>UseCXXHeadersInCppSources</p>
<p>When suggesting to include the appropriate header in C++ code, should <code>&lt;cstddef&gt;</code> header be suggested, or <code>&lt;stddef.h&gt;</code>. Defaults to <code>true</code>.</p>
</div>
<p>Examples:</p>
<pre class="c++"><code>long mul(int a, int b) {
  return a * b; // warning: performing an implicit widening conversion to type &#39;long&#39; of a multiplication performed in type &#39;int&#39;
}
char* ptr_add(char *base, int a, int b) {
  return base + a * b; // warning: result of multiplication in type &#39;int&#39; is used as a pointer offset after an implicit widening conversion to type &#39;ssize_t&#39;
}
char ptr_subscript(char *base, int a, int b) {
  return base[a * b]; // warning: result of multiplication in type &#39;int&#39; is used as a pointer offset after an implicit widening conversion to type &#39;ssize_t&#39;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/implicit-widening-of-multiplication-result.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-inaccurate-erase</key>
    <name>bugprone-inaccurate-erase</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-inaccurate-erase</p>
</div>
<h1 id="bugprone-inaccurate-erase">bugprone-inaccurate-erase</h1>
<p>Checks for inaccurate use of the <code>erase()</code> method.</p>
<p>Algorithms like <code>remove()</code> do not actually remove any element from the container but return an iterator to the first redundant element at the end of the container. These redundant elements must be removed using the <code>erase()</code> method. This check warns when not all of the elements will be removed due to using an inappropriate overload.</p>
<p>For example, the following code erases only one element:</p>
<pre class="c++"><code>std::vector&lt;int&gt; xs;
...
xs.erase(std::remove(xs.begin(), xs.end(), 10));</code></pre>
<p>Call the two-argument overload of <code>erase()</code> to remove the subrange:</p>
<pre class="c++"><code>std::vector&lt;int&gt; xs;
...
xs.erase(std::remove(xs.begin(), xs.end(), 10), xs.end());</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/inaccurate-erase.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-inc-dec-in-conditions</key>
    <name>bugprone-inc-dec-in-conditions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-inc-dec-in-conditions</p>
</div>
<h1 id="bugprone-inc-dec-in-conditions">bugprone-inc-dec-in-conditions</h1>
<p>Detects when a variable is both incremented/decremented and referenced inside a complex condition and suggests moving them outside to avoid ambiguity in the variable's value.</p>
<p>When a variable is modified and also used in a complex condition, it can lead to unexpected behavior. The side-effect of changing the variable's value within the condition can make the code difficult to reason about. Additionally, the developer's intended timing for the modification of the variable may not be clear, leading to misunderstandings and errors. This can be particularly problematic when the condition involves logical operators like <code>&amp;&amp;</code> and <code>||</code>, where the order of evaluation can further complicate the situation.</p>
<p>Consider the following example:</p>
<pre class="c++"><code>int i = 0;
// ...
if (i++ &lt; 5 &amp;&amp; i &gt; 0) {
  // do something
}</code></pre>
<p>In this example, the result of the expression may not be what the developer intended. The original intention of the developer could be to increment <code>i</code> after the entire condition is evaluated, but in reality, i will be incremented before <code>i &gt; 0</code> is executed. This can lead to unexpected behavior and bugs in the code. To fix this issue, the developer should separate the increment operation from the condition and perform it separately. For example, they can increment <code>i</code> in a separate statement before or after the condition is evaluated. This ensures that the value of <code>i</code> is predictable and consistent throughout the code.</p>
<pre class="c++"><code>int i = 0;
// ...
i++;
if (i &lt;= 5 &amp;&amp; i &gt; 0) {
  // do something
}</code></pre>
<p>Another common issue occurs when multiple increments or decrements are performed on the same variable inside a complex condition. For example:</p>
<pre class="c++"><code>int i = 4;
// ...
if (i++ &lt; 5 || --i &gt; 2) {
  // do something
}</code></pre>
<p>There is a potential issue with this code due to the order of evaluation in C++. The <code>||</code> operator used in the condition statement guarantees that if the first operand evaluates to <code>true</code>, the second operand will not be evaluated. This means that if <code>i</code> were initially <code>4</code>, the first operand <code>i &lt; 5</code> would evaluate to <code>true</code> and the second operand <code>i &gt; 2</code> would not be evaluated. As a result, the decrement operation <code>--i</code> would not be executed and <code>i</code> would hold value <code>5</code>, which may not be the intended behavior for the developer.</p>
<p>To avoid this potential issue, the both increment and decrement operation on <code>i</code> should be moved outside the condition statement.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/inc-dec-in-conditions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-incorrect-enable-if</key>
    <name>bugprone-incorrect-enable-if</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-incorrect-enable-if</p>
</div>
<h1 id="bugprone-incorrect-enable-if">bugprone-incorrect-enable-if</h1>
<p>Detects incorrect usages of <code>std::enable_if</code> that don't name the nested <code>type</code> type.</p>
<p>In C++11 introduced <code>std::enable_if</code> as a convenient way to leverage SFINAE. One form of using <code>std::enable_if</code> is to declare an unnamed template type parameter with a default type equal to <code>typename std::enable_if&lt;condition&gt;::type</code>. If the author forgets to name the nested type <code>type</code>, then the code will always consider the candidate template even if the condition is not met.</p>
<p>Below are some examples of code using <code>std::enable_if</code> correctly and incorrect examples that this check flags.</p>
<pre class="c++"><code>template &lt;typename T, typename = typename std::enable_if&lt;T::some_trait&gt;::type&gt;
void valid_usage() { ... }

template &lt;typename T, typename = std::enable_if_t&lt;T::some_trait&gt;&gt;
void valid_usage_with_trait_helpers() { ... }

// The below code is not a correct application of SFINAE. Even if
// T::some_trait is not true, the function will still be considered in the
// set of function candidates. It can either incorrectly select the function
// when it should not be a candidates, and/or lead to hard compile errors
// if the body of the template does not compile if the condition is not
// satisfied.
template &lt;typename T, typename = std::enable_if&lt;T::some_trait&gt;&gt;
void invalid_usage() { ... }

// The tool suggests the following replacement for &#39;invalid_usage&#39;:
template &lt;typename T, typename = typename std::enable_if&lt;T::some_trait&gt;::type&gt;
void fixed_invalid_usage() { ... }</code></pre>
<p>C++14 introduced the trait helper <code>std::enable_if_t</code> which reduces the likelihood of this error. C++20 introduces constraints, which generally supersede the use of <code>std::enable_if</code>. See <code class="interpreted-text" role="doc">modernize-type-traits &lt;../modernize/type-traits&gt;</code> for another tool that will replace <code>std::enable_if</code> with <code>std::enable_if_t</code>, and see <code class="interpreted-text" role="doc">modernize-use-constraints &lt;../modernize/use-constraints&gt;</code> for another tool that replaces <code>std::enable_if</code> with C++20 constraints. Consider these newer mechanisms where possible.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/incorrect-enable-if.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-incorrect-roundings</key>
    <name>bugprone-incorrect-roundings</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-incorrect-roundings</p>
</div>
<h1 id="bugprone-incorrect-roundings">bugprone-incorrect-roundings</h1>
<p>Checks the usage of patterns known to produce incorrect rounding. Programmers often use:</p>
<pre><code>(int)(double_expression + 0.5)</code></pre>
<p>to round the double expression to an integer. The problem with this:</p>
<ol type="1">
<li>It is unnecessarily slow.</li>
<li>It is incorrect. The number 0.499999975 (smallest representable float number below 0.5) rounds to 1.0. Even worse behavior for negative numbers where both -0.5f and -1.4f both round to 0.0.</li>
</ol>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/incorrect-roundings.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-infinite-loop</key>
    <name>bugprone-infinite-loop</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-infinite-loop</p>
</div>
<h1 id="bugprone-infinite-loop">bugprone-infinite-loop</h1>
<p>Finds obvious infinite loops (loops where the condition variable is not changed at all).</p>
<p>Finding infinite loops is well-known to be impossible (halting problem). However, it is possible to detect some obvious infinite loops, for example, if the loop condition is not changed. This check detects such loops. A loop is considered infinite if it does not have any loop exit statement (<code>break</code>, <code>continue</code>, <code>goto</code>, <code>return</code>, <code>throw</code> or a call to a function called as <code>[[noreturn]]</code>) and all of the following conditions hold for every variable in the condition:</p>
<ul>
<li>It is a local variable.</li>
<li>It has no reference or pointer aliases.</li>
<li>It is not a structure or class member.</li>
</ul>
<p>Furthermore, the condition must not contain a function call to consider the loop infinite since functions may return different values for different calls.</p>
<p>For example, the following loop is considered infinite <span class="title-ref">i</span> is not changed in the body:</p>
<pre class="c++"><code>int i = 0, j = 0;
while (i &lt; 10) {
  ++j;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/infinite-loop.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>bugprone-integer-division</key>
    <name>bugprone-integer-division</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-integer-division</p>
</div>
<h1 id="bugprone-integer-division">bugprone-integer-division</h1>
<p>Finds cases where integer division in a floating point context is likely to cause unintended loss of precision.</p>
<p>No reports are made if divisions are part of the following expressions:</p>
<ul>
<li>operands of operators expecting integral or bool types,</li>
<li>call expressions of integral or bool types, and</li>
<li>explicit cast expressions to integral or bool types,</li>
</ul>
<p>as these are interpreted as signs of deliberateness from the programmer.</p>
<p>Examples:</p>
<pre class="c++"><code>float floatFunc(float);
int intFunc(int);
double d;
int i = 42;

// Warn, floating-point values expected.
d = 32 * 8 / (2 + i);
d = 8 * floatFunc(1 + 7 / 2);
d = i / (1 &lt;&lt; 4);

// OK, no integer division.
d = 32 * 8.0 / (2 + i);
d = 8 * floatFunc(1 + 7.0 / 2);
d = (double)i / (1 &lt;&lt; 4);

// OK, there are signs of deliberateness.
d = 1 &lt;&lt; (i / 2);
d = 9 + intFunc(6 * i / 32);
d = (int)(i / 32) - 8;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/integer-division.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-lambda-function-name</key>
    <name>bugprone-lambda-function-name</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-lambda-function-name</p>
</div>
<h1 id="bugprone-lambda-function-name">bugprone-lambda-function-name</h1>
<p>Checks for attempts to get the name of a function from within a lambda expression. The name of a lambda is always something like <code>operator()</code>, which is almost never what was intended.</p>
<p>Example:</p>
<pre class="c++"><code>void FancyFunction() {
  [] { printf(&quot;Called from %s\n&quot;, __func__); }();
  [] { printf(&quot;Now called from %s\n&quot;, __FUNCTION__); }();
}</code></pre>
<p>Output:</p>
<pre><code>Called from operator()
Now called from operator()</code></pre>
<p>Likely intended output:</p>
<pre><code>Called from FancyFunction
Now called from FancyFunction</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>The value <span class="title-ref">true</span> specifies that attempting to get the name of a function from within a macro should not be diagnosed. The default value is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/lambda-function-name.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-macro-parentheses</key>
    <name>bugprone-macro-parentheses</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-macro-parentheses</p>
</div>
<h1 id="bugprone-macro-parentheses">bugprone-macro-parentheses</h1>
<p>Finds macros that can have unexpected behavior due to missing parentheses.</p>
<p>Macros are expanded by the preprocessor as-is. As a result, there can be unexpected behavior; operators may be evaluated in unexpected order and unary operators may become binary operators, etc.</p>
<p>When the replacement list has an expression, it is recommended to surround it with parentheses. This ensures that the macro result is evaluated completely before it is used.</p>
<p>It is also recommended to surround macro arguments in the replacement list with parentheses. This ensures that the argument value is calculated properly.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/macro-parentheses.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-macro-repeated-side-effects</key>
    <name>bugprone-macro-repeated-side-effects</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-macro-repeated-side-effects</p>
</div>
<h1 id="bugprone-macro-repeated-side-effects">bugprone-macro-repeated-side-effects</h1>
<p>Checks for repeated argument with side effects in macros.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/macro-repeated-side-effects.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-misplaced-operator-in-strlen-in-alloc</key>
    <name>bugprone-misplaced-operator-in-strlen-in-alloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-misplaced-operator-in-strlen-in-alloc</p>
</div>
<h1 id="bugprone-misplaced-operator-in-strlen-in-alloc">bugprone-misplaced-operator-in-strlen-in-alloc</h1>
<p>Finds cases where <code>1</code> is added to the string in the argument to <code>strlen()</code>, <code>strnlen()</code>, <code>strnlen_s()</code>, <code>wcslen()</code>, <code>wcsnlen()</code>, and <code>wcsnlen_s()</code> instead of the result and the value is used as an argument to a memory allocation function (<code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, <code>alloca()</code>) or the <code>new[]</code> operator in <span class="title-ref">C++</span>. The check detects error cases even if one of these functions (except the <code>new[]</code> operator) is called by a constant function pointer. Cases where <code>1</code> is added both to the parameter and the result of the <code>strlen()</code>-like function are ignored, as are cases where the whole addition is surrounded by extra parentheses.</p>
<p><span class="title-ref">C</span> example code:</p>
<pre class="c"><code>void bad_malloc(char *str) {
  char *c = (char*) malloc(strlen(str + 1));
}</code></pre>
<p>The suggested fix is to add <code>1</code> to the return value of <code>strlen()</code> and not to its argument. In the example above the fix would be</p>
<pre class="c"><code>char *c = (char*) malloc(strlen(str) + 1);</code></pre>
<p><span class="title-ref">C++</span> example code:</p>
<pre class="c++"><code>void bad_new(char *str) {
  char *c = new char[strlen(str + 1)];
}</code></pre>
<p>As in the <span class="title-ref">C</span> code with the <code>malloc()</code> function, the suggested fix is to add <code>1</code> to the return value of <code>strlen()</code> and not to its argument. In the example above the fix would be</p>
<pre class="c++"><code>char *c = new char[strlen(str) + 1];</code></pre>
<p>Example for silencing the diagnostic:</p>
<pre class="c"><code>void bad_malloc(char *str) {
  char *c = (char*) malloc(strlen((str + 1)));
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/misplaced-operator-in-strlen-in-alloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-misplaced-pointer-arithmetic-in-alloc</key>
    <name>bugprone-misplaced-pointer-arithmetic-in-alloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-misplaced-pointer-arithmetic-in-alloc</p>
</div>
<h1 id="bugprone-misplaced-pointer-arithmetic-in-alloc">bugprone-misplaced-pointer-arithmetic-in-alloc</h1>
<p>Finds cases where an integer expression is added to or subtracted from the result of a memory allocation function (<code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, <code>alloca()</code>) instead of its argument. The check detects error cases even if one of these functions is called by a constant function pointer.</p>
<p>Example code:</p>
<pre class="c"><code>void bad_malloc(int n) {
  char *p = (char*) malloc(n) + 10;
}</code></pre>
<p>The suggested fix is to add the integer expression to the argument of <code>malloc</code> and not to its result. In the example above the fix would be</p>
<pre class="c"><code>char *p = (char*) malloc(n + 10);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/misplaced-pointer-arithmetic-in-alloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-misplaced-widening-cast</key>
    <name>bugprone-misplaced-widening-cast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-misplaced-widening-cast</p>
</div>
<h1 id="bugprone-misplaced-widening-cast">bugprone-misplaced-widening-cast</h1>
<p>This check will warn when there is a cast of a calculation result to a bigger type. If the intention of the cast is to avoid loss of precision then the cast is misplaced, and there can be loss of precision. Otherwise the cast is ineffective.</p>
<p>Example code:</p>
<pre class="c++"><code>long f(int x) {
    return (long)(x * 1000);
}</code></pre>
<p>The result <code>x * 1000</code> is first calculated using <code>int</code> precision. If the result exceeds <code>int</code> precision there is loss of precision. Then the result is casted to <code>long</code>.</p>
<p>If there is no loss of precision then the cast can be removed or you can explicitly cast to <code>int</code> instead.</p>
<p>If you want to avoid loss of precision then put the cast in a proper location, for instance:</p>
<pre class="c++"><code>long f(int x) {
    return (long)x * 1000;
}</code></pre>
<h2 id="implicit-casts">Implicit casts</h2>
<p>Forgetting to place the cast at all is at least as dangerous and at least as common as misplacing it. If <code class="interpreted-text" role="option">CheckImplicitCasts</code> is enabled the check also detects these cases, for instance:</p>
<pre class="c++"><code>long f(int x) {
    return x * 1000;
}</code></pre>
<h2 id="floating-point">Floating point</h2>
<p>Currently warnings are only written for integer conversion. No warning is written for this code:</p>
<pre class="c++"><code>double f(float x) {
    return (double)(x * 10.0f);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckImplicitCasts</p>
<p>If <span class="title-ref">true</span>, enables detection of implicit casts. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/misplaced-widening-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-move-forwarding-reference</key>
    <name>bugprone-move-forwarding-reference</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-move-forwarding-reference</p>
</div>
<h1 id="bugprone-move-forwarding-reference">bugprone-move-forwarding-reference</h1>
<p>Warns if <code>std::move</code> is called on a forwarding reference, for example:</p>
<pre class="c++"><code>template &lt;typename T&gt;
void foo(T&amp;&amp; t) {
  bar(std::move(t));
}</code></pre>
<p><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf">Forwarding references</a> should typically be passed to <code>std::forward</code> instead of <code>std::move</code>, and this is the fix that will be suggested.</p>
<p>(A forwarding reference is an rvalue reference of a type that is a deduced function template argument.)</p>
<p>In this example, the suggested fix would be</p>
<pre class="c++"><code>bar(std::forward&lt;T&gt;(t));</code></pre>
<h2 id="background">Background</h2>
<p>Code like the example above is sometimes written with the expectation that <code>T&amp;&amp;</code> will always end up being an rvalue reference, no matter what type is deduced for <code>T</code>, and that it is therefore not possible to pass an lvalue to <code>foo()</code>. However, this is not true. Consider this example:</p>
<pre class="c++"><code>std::string s = &quot;Hello, world&quot;;
foo(s);</code></pre>
<p>This code compiles and, after the call to <code>foo()</code>, <code>s</code> is left in an indeterminate state because it has been moved from. This may be surprising to the caller of <code>foo()</code> because no <code>std::move</code> was used when calling <code>foo()</code>.</p>
<p>The reason for this behavior lies in the special rule for template argument deduction on function templates like <code>foo()</code> -- i.e. on function templates that take an rvalue reference argument of a type that is a deduced function template argument. (See section [temp.deduct.call]/3 in the C++11 standard.)</p>
<p>If <code>foo()</code> is called on an lvalue (as in the example above), then <code>T</code> is deduced to be an lvalue reference. In the example, <code>T</code> is deduced to be <code>std::string &amp;</code>. The type of the argument <code>t</code> therefore becomes <code>std::string&amp; &amp;&amp;</code>; by the reference collapsing rules, this collapses to <code>std::string&amp;</code>.</p>
<p>This means that the <code>foo(s)</code> call passes <code>s</code> as an lvalue reference, and <code>foo()</code> ends up moving <code>s</code> and thereby placing it into an indeterminate state.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/move-forwarding-reference.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-multi-level-implicit-pointer-conversion</key>
    <name>bugprone-multi-level-implicit-pointer-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-multi-level-implicit-pointer-conversion</p>
</div>
<h1 id="bugprone-multi-level-implicit-pointer-conversion">bugprone-multi-level-implicit-pointer-conversion</h1>
<p>Detects implicit conversions between pointers of different levels of indirection.</p>
<p>Conversions between pointer types of different levels of indirection can be dangerous and may lead to undefined behavior, particularly if the converted pointer is later cast to a type with a different level of indirection. For example, converting a pointer to a pointer to an <code>int</code> (<code>int**</code>) to a <code>void*</code> can result in the loss of information about the original level of indirection, which can cause problems when attempting to use the converted pointer. If the converted pointer is later cast to a type with a different level of indirection and dereferenced, it may lead to access violations, memory corruption, or other undefined behavior.</p>
<p>Consider the following example:</p>
<pre class="c++"><code>void foo(void* ptr);

int main() {
  int x = 42;
  int* ptr = &amp;x;
  int** ptr_ptr = &amp;ptr;
  foo(ptr_ptr); // warning will trigger here
  return 0;
}</code></pre>
<p>In this example, <code>foo()</code> is called with <code>ptr_ptr</code> as its argument. However, <code>ptr_ptr</code> is a <code>int**</code> pointer, while <code>foo()</code> expects a <code>void*</code> pointer. This results in an implicit pointer level conversion, which could cause issues if <code>foo()</code> dereferences the pointer assuming it's a <code>int*</code> pointer.</p>
<p>Using an explicit cast is a recommended solution to prevent issues caused by implicit pointer level conversion, as it allows the developer to explicitly state their intention and show their reasoning for the type conversion. Additionally, it is recommended that developers thoroughly check and verify the safety of the conversion before using an explicit cast. This extra level of caution can help catch potential issues early on in the development process, improving the overall reliability and maintainability of the code.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/multi-level-implicit-pointer-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-multiple-new-in-one-expression</key>
    <name>bugprone-multiple-new-in-one-expression</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-multiple-new-in-one-expression</p>
</div>
<h1 id="bugprone-multiple-new-in-one-expression">bugprone-multiple-new-in-one-expression</h1>
<p>Finds multiple <code>new</code> operator calls in a single expression, where the allocated memory by the first <code>new</code> may leak if the second allocation fails and throws exception.</p>
<p>C++ does often not specify the exact order of evaluation of the operands of an operator or arguments of a function. Therefore if a first allocation succeeds and a second fails, in an exception handler it is not possible to tell which allocation has failed and free the memory. Even if the order is fixed the result of a first <code>new</code> may be stored in a temporary location that is not reachable at the time when a second allocation fails. It is best to avoid any expression that contains more than one <code>operator new</code> call, if exception handling is used to check for allocation errors.</p>
<p>Different rules apply for are the short-circuit operators <code>||</code> and <code>&amp;&amp;</code> and the <code>,</code> operator, where evaluation of one side must be completed before the other starts. Expressions of a list-initialization (initialization or construction using <code>{</code> and <code>}</code> characters) are evaluated in fixed order. Similarly, condition of a <code>?</code> operator is evaluated before the branches are evaluated.</p>
<p>The check reports warning if two <code>new</code> calls appear in one expression at different sides of an operator, or if <code>new</code> calls appear in different arguments of a function call (that can be an object construction with <code>()</code> syntax). These <code>new</code> calls can be nested at any level. For any warning to be emitted the <code>new</code> calls should be in a code block where exception handling is used with catch for <code>std::bad_alloc</code> or <code>std::exception</code>. At <code>||</code>, <code>&amp;&amp;</code>, <code>,</code>, <code>?</code> (condition and one branch) operators no warning is emitted. No warning is emitted if both of the memory allocations are not assigned to a variable or not passed directly to a function. The reason is that in this case the memory may be intentionally not freed or the allocated objects can be self-destructing objects.</p>
<p>Examples:</p>
<pre class="c++"><code>struct A {
  int Var;
};
struct B {
  B();
  B(A *);
  int Var;
};
struct C {
  int *X1;
  int *X2;
};

void f(A *, B *);
int f1(A *);
int f1(B *);
bool f2(A *);

void foo() {
  A *PtrA;
  B *PtrB;
  try {
    // Allocation of &#39;B&#39;/&#39;A&#39; may fail after memory for &#39;A&#39;/&#39;B&#39; was allocated.
    f(new A, new B); // warning: memory allocation may leak if an other allocation is sequenced after it and throws an exception; order of these allocations is undefined

    // List (aggregate) initialization is used.
    C C1{new int, new int}; // no warning

    // Allocation of &#39;B&#39;/&#39;A&#39; may fail after memory for &#39;A&#39;/&#39;B&#39; was allocated but not yet passed to function &#39;f1&#39;.
    int X = f1(new A) + f1(new B); // warning: memory allocation may leak if an other allocation is sequenced after it and throws an exception; order of these allocations is undefined

    // Allocation of &#39;B&#39; may fail after memory for &#39;A&#39; was allocated.
    // From C++17 on memory for &#39;B&#39; is allocated first but still may leak if allocation of &#39;A&#39; fails.
    PtrB = new B(new A); // warning: memory allocation may leak if an other allocation is sequenced after it and throws an exception

    // &#39;new A&#39; and &#39;new B&#39; may be performed in any order.
    // &#39;new B&#39;/&#39;new A&#39; may fail after memory for &#39;A&#39;/&#39;B&#39; was allocated but not assigned to &#39;PtrA&#39;/&#39;PtrB&#39;.
    (PtrA = new A)-&gt;Var = (PtrB = new B)-&gt;Var; // warning: memory allocation may leak if an other allocation is sequenced after it and throws an exception; order of these allocations is undefined

    // Evaluation of &#39;f2(new A)&#39; must be finished before &#39;f1(new B)&#39; starts.
    // If &#39;new B&#39; fails the allocated memory for &#39;A&#39; is supposedly handled correctly because function &#39;f2&#39; could take the ownership.
    bool Z = f2(new A) || f1(new B); // no warning

    X = (f2(new A) ? f1(new A) : f1(new B)); // no warning

    // No warning if the result of both allocations is not passed to a function
    // or stored in a variable.
    (new A)-&gt;Var = (new B)-&gt;Var; // no warning

    // No warning if at least one non-throwing allocation is used.
    f(new(std::nothrow) A, new B); // no warning
  } catch(std::bad_alloc) {
  }

  // No warning if the allocation is outside a try block (or no catch handler exists for std::bad_alloc).
  // (The fact if exceptions can escape from &#39;foo&#39; is not taken into account.)
  f(new A, new B); // no warning
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/multiple-new-in-one-expression.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-multiple-statement-macro</key>
    <name>bugprone-multiple-statement-macro</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-multiple-statement-macro</p>
</div>
<h1 id="bugprone-multiple-statement-macro">bugprone-multiple-statement-macro</h1>
<p>Detect multiple statement macros that are used in unbraced conditionals. Only the first statement of the macro will be inside the conditional and the other ones will be executed unconditionally.</p>
<p>Example:</p>
<pre class="c++"><code>#define INCREMENT_TWO(x, y) (x)++; (y)++
if (do_increment)
  INCREMENT_TWO(a, b);  // (b)++ will be executed unconditionally.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/multiple-statement-macro.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-narrowing-conversions</key>
    <name>bugprone-narrowing-conversions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-narrowing-conversions</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/narrowing-conversions.html">

</div>
<h1 id="bugprone-narrowing-conversions">bugprone-narrowing-conversions</h1>
<p>The bugprone-narrowing-conversions check is an alias, please see <code class="interpreted-text" role="doc">cppcoreguidelines-narrowing-conversions &lt;../cppcoreguidelines/narrowing-conversions&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/narrowing-conversions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-no-escape</key>
    <name>bugprone-no-escape</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-no-escape</p>
</div>
<h1 id="bugprone-no-escape">bugprone-no-escape</h1>
<p>Finds pointers with the <code>noescape</code> attribute that are captured by an asynchronously-executed block. The block arguments in <code>dispatch_async()</code> and <code>dispatch_after()</code> are guaranteed to escape, so it is an error if a pointer with the <code>noescape</code> attribute is captured by one of these blocks.</p>
<p>The following is an example of an invalid use of the <code>noescape</code> attribute.</p>
<blockquote>
<pre class="objc"><code>void foo(__attribute__((noescape)) int *p) {
  dispatch_async(queue, ^{
    *p = 123;
  });
});</code></pre>
</blockquote>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/no-escape.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-non-zero-enum-to-bool-conversion</key>
    <name>bugprone-non-zero-enum-to-bool-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-non-zero-enum-to-bool-conversion</p>
</div>
<h1 id="bugprone-non-zero-enum-to-bool-conversion">bugprone-non-zero-enum-to-bool-conversion</h1>
<p>Detect implicit and explicit casts of <code>enum</code> type into <code>bool</code> where <code>enum</code> type doesn't have a zero-value enumerator. If the <code>enum</code> is used only to hold values equal to its enumerators, then conversion to <code>bool</code> will always result in <code>true</code> value. This can lead to unnecessary code that reduces readability and maintainability and can result in bugs.</p>
<p>May produce false positives if the <code>enum</code> is used to store other values (used as a bit-mask or zero-initialized on purpose). To deal with them, <code>// NOLINT</code> or casting first to the underlying type before casting to <code>bool</code> can be used.</p>
<p>It is important to note that this check will not generate warnings if the definition of the enumeration type is not available. Additionally, C++11 enumeration classes are supported by this check.</p>
<p>Overall, this check serves to improve code quality and readability by identifying and flagging instances where implicit or explicit casts from enumeration types to boolean could cause potential issues.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>enum EStatus {
  OK = 1,
  NOT_OK,
  UNKNOWN
};

void process(EStatus status) {
  if (!status) {
    // this true-branch won&#39;t be executed
    return;
  }
  // proceed with &quot;valid data&quot;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>EnumIgnoreList</p>
<p>Option is used to ignore certain enum types when checking for implicit/explicit casts to bool. It accepts a semicolon-separated list of (fully qualified) enum type names or regular expressions that match the enum type names. The default value is an empty string, which means no enums will be ignored.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/non-zero-enum-to-bool-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-not-null-terminated-result</key>
    <name>bugprone-not-null-terminated-result</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-not-null-terminated-result</p>
</div>
<h1 id="bugprone-not-null-terminated-result">bugprone-not-null-terminated-result</h1>
<p>Finds function calls where it is possible to cause a not null-terminated result. Usually the proper length of a string is <code>strlen(src) + 1</code> or equal length of this expression, because the null terminator needs an extra space. Without the null terminator it can result in undefined behavior when the string is read.</p>
<p>The following and their respective <code>wchar_t</code> based functions are checked:</p>
<p><code>memcpy</code>, <code>memcpy_s</code>, <code>memchr</code>, <code>memmove</code>, <code>memmove_s</code>, <code>strerror_s</code>, <code>strncmp</code>, <code>strxfrm</code></p>
<p>The following is a real-world example where the programmer forgot to increase the passed third argument, which is <code>size_t length</code>. That is why the length of the allocated memory is not enough to hold the null terminator.</p>
<pre class="c"><code>static char *stringCpy(const std::string &amp;str) {
  char *result = reinterpret_cast&lt;char *&gt;(malloc(str.size()));
  memcpy(result, str.data(), str.size());
  return result;
}</code></pre>
<p>In addition to issuing warnings, fix-it rewrites all the necessary code. It also tries to adjust the capacity of the destination array:</p>
<pre class="c"><code>static char *stringCpy(const std::string &amp;str) {
  char *result = reinterpret_cast&lt;char *&gt;(malloc(str.size() + 1));
  strcpy(result, str.data());
  return result;
}</code></pre>
<p>Note: It cannot guarantee to rewrite every of the path-sensitive memory allocations.</p>
<h2 id="MemcpyTransformation">Transformation rules of 'memcpy()'</h2>
<p>It is possible to rewrite the <code>memcpy()</code> and <code>memcpy_s()</code> calls as the following four functions: <code>strcpy()</code>, <code>strncpy()</code>, <code>strcpy_s()</code>, <code>strncpy_s()</code>, where the latter two are the safer versions of the former two. It rewrites the <code>wchar_t</code> based memory handler functions respectively.</p>
<h3 id="rewrite-based-on-the-destination-array">Rewrite based on the destination array</h3>
<ul>
<li>If copy to the destination array cannot overflow [1] the new function should be the older copy function (ending with <code>cpy</code>), because it is more efficient than the safe version.</li>
<li>If copy to the destination array can overflow [1] and <code class="interpreted-text" role="option">WantToUseSafeFunctions</code> is set to <span class="title-ref">true</span> and it is possible to obtain the capacity of the destination array then the new function could be the safe version (ending with <code>cpy_s</code>).</li>
<li>If the new function is could be safe version and C++ files are analyzed and the destination array is plain <code>char</code>/<code>wchar_t</code> without <code>un/signed</code> then the length of the destination array can be omitted.</li>
<li>If the new function is could be safe version and the destination array is <code>un/signed</code> it needs to be casted to plain <code>char *</code>/<code>wchar_t *</code>.</li>
</ul>
<dl>
<dt>[1] It is possible to overflow:</dt>
<dd><ul>
<li>If the capacity of the destination array is unknown.</li>
<li>If the given length is equal to the destination array's capacity.</li>
</ul>
</dd>
</dl>
<h3 id="rewrite-based-on-the-length-of-the-source-string">Rewrite based on the length of the source string</h3>
<ul>
<li>If the given length is <code>strlen(source)</code> or equal length of this expression then the new function should be the older copy function (ending with <code>cpy</code>), as it is more efficient than the safe version (ending with <code>cpy_s</code>).</li>
<li>Otherwise we assume that the programmer wanted to copy 'N' characters, so the new function is <code>ncpy</code>-like which copies 'N' characters.</li>
</ul>
<h2 id="transformations-with-strlen-or-equal-length-of-this-expression">Transformations with 'strlen()' or equal length of this expression</h2>
<p>It transforms the <code>wchar_t</code> based memory and string handler functions respectively (where only <code>strerror_s</code> does not have <code>wchar_t</code> based alias).</p>
<h3 id="memory-handler-functions">Memory handler functions</h3>
<p><code>memcpy</code> Please visit the <code class="interpreted-text" role="ref">Transformation rules of 'memcpy()'&lt;MemcpyTransformation&gt;</code> section.</p>
<p><code>memchr</code> Usually there is a C-style cast and it is needed to be removed, because the new function <code>strchr</code>'s return type is correct. The given length is going to be removed.</p>
<p><code>memmove</code> If safe functions are available the new function is <code>memmove_s</code>, which has a new second argument which is the length of the destination array, it is adjusted, and the length of the source string is incremented by one. If safe functions are not available the given length is incremented by one.</p>
<p><code>memmove_s</code> The given length is incremented by one.</p>
<h3 id="string-handler-functions">String handler functions</h3>
<p><code>strerror_s</code> The given length is incremented by one.</p>
<p><code>strncmp</code> If the third argument is the first or the second argument's <code>length + 1</code> it has to be truncated without the <code>+ 1</code> operation.</p>
<p><code>strxfrm</code> The given length is incremented by one.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>WantToUseSafeFunctions</p>
<p>The value <span class="title-ref">true</span> specifies that the target environment is considered to implement '_s' suffixed memory and string handler functions which are safer than older versions (e.g. 'memcpy_s()'). The default value is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/not-null-terminated-result.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-optional-value-conversion</key>
    <name>bugprone-optional-value-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-optional-value-conversion</p>
</div>
<h1 id="bugprone-optional-value-conversion">bugprone-optional-value-conversion</h1>
<p>Detects potentially unintentional and redundant conversions where a value is extracted from an optional-like type and then used to create a new instance of the same optional-like type.</p>
<p>These conversions might be the result of developer oversight, leftovers from code refactoring, or other situations that could lead to unintended exceptions or cases where the resulting optional is always initialized, which might be unexpected behavior.</p>
<p>To illustrate, consider the following problematic code snippet:</p>
<pre class="c++"><code>#include &lt;optional&gt;

void print(std::optional&lt;int&gt;);

int main()
{
  std::optional&lt;int&gt; opt;
  // ...

  // Unintentional conversion from std::optional&lt;int&gt; to int and back to
  // std::optional&lt;int&gt;:
  print(opt.value());

  // ...
}</code></pre>
<p>A better approach would be to directly pass <code>opt</code> to the <code>print</code> function without extracting its value:</p>
<pre class="c++"><code>#include &lt;optional&gt;

void print(std::optional&lt;int&gt;);

int main()
{
  std::optional&lt;int&gt; opt;
  // ...

  // Proposed code: Directly pass the std::optional&lt;int&gt; to the print
  // function.
  print(opt);

  // ...
}</code></pre>
<p>By passing <code>opt</code> directly to the print function, unnecessary conversions are avoided, and potential unintended behavior or exceptions are minimized.</p>
<p>Value extraction using <code>operator *</code> is matched by default. The support for non-standard optional types such as <code>boost::optional</code> or <code>absl::optional</code> may be limited.</p>
<h2 id="options">Options:</h2>
<div class="option">
<p>OptionalTypes</p>
<p>Semicolon-separated list of (fully qualified) optional type names or regular expressions that match the optional types. Default value is <span class="title-ref">::std::optional;::absl::optional;::boost::optional</span>.</p>
</div>
<div class="option">
<p>ValueMethods</p>
<p>Semicolon-separated list of (fully qualified) method names or regular expressions that match the methods. Default value is <span class="title-ref">::value$;::get$</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/optional-value-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-parent-virtual-call</key>
    <name>bugprone-parent-virtual-call</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-parent-virtual-call</p>
</div>
<h1 id="bugprone-parent-virtual-call">bugprone-parent-virtual-call</h1>
<p>Detects and fixes calls to grand-...parent virtual methods instead of calls to overridden parent's virtual methods.</p>
<pre class="c++"><code>struct A {
  int virtual foo() {...}
};

struct B: public A {
  int foo() override {...}
};

struct C: public B {
  int foo() override { A::foo(); }
//                     ^^^^^^^^
// warning: qualified name A::foo refers to a member overridden in subclass; did you mean &#39;B&#39;?  [bugprone-parent-virtual-call]
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/parent-virtual-call.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-posix-return</key>
    <name>bugprone-posix-return</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-posix-return</p>
</div>
<h1 id="bugprone-posix-return">bugprone-posix-return</h1>
<p>Checks if any calls to <code>pthread_*</code> or <code>posix_*</code> functions (except <code>posix_openpt</code>) expect negative return values. These functions return either <code>0</code> on success or an <code>errno</code> on failure, which is positive only.</p>
<p>Example buggy usage looks like:</p>
<pre class="c"><code>if (posix_fadvise(...) &lt; 0) {</code></pre>
<p>This will never happen as the return value is always non-negative. A simple fix could be:</p>
<pre class="c"><code>if (posix_fadvise(...) &gt; 0) {</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/posix-return.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-redundant-branch-condition</key>
    <name>bugprone-redundant-branch-condition</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-redundant-branch-condition</p>
</div>
<h1 id="bugprone-redundant-branch-condition">bugprone-redundant-branch-condition</h1>
<p>Finds condition variables in nested <code>if</code> statements that were also checked in the outer <code>if</code> statement and were not changed.</p>
<p>Simple example:</p>
<pre class="c"><code>bool onFire = isBurning();
if (onFire) {
  if (onFire)
    scream();
}</code></pre>
<p>Here <span class="title-ref">onFire</span> is checked both in the outer <code>if</code> and the inner <code>if</code> statement without a possible change between the two checks. The check warns for this code and suggests removal of the second checking of variable <span class="title-ref">onFire</span>.</p>
<p>The checker also detects redundant condition checks if the condition variable is an operand of a logical "and" (<code>&amp;&amp;</code>) or a logical "or" (<code>||</code>) operator:</p>
<pre class="c"><code>bool onFire = isBurning();
if (onFire) {
  if (onFire &amp;&amp; peopleInTheBuilding &gt; 0)
    scream();
}</code></pre>
<pre class="c"><code>bool onFire = isBurning();
if (onFire) {
  if (onFire || isCollapsing())
    scream();
}</code></pre>
<p>In the first case (logical "and") the suggested fix is to remove the redundant condition variable and keep the other side of the <code>&amp;&amp;</code>. In the second case (logical "or") the whole <code>if</code> is removed similarly to the simple case on the top.</p>
<p>The condition of the outer <code>if</code> statement may also be a logical "and" (<code>&amp;&amp;</code>) expression:</p>
<pre class="c"><code>bool onFire = isBurning();
if (onFire &amp;&amp; fireFighters &lt; 10) {
  if (someOtherCondition()) {
    if (onFire)
      scream();
  }
}</code></pre>
<p>The error is also detected if both the outer statement is a logical "and" (<code>&amp;&amp;</code>) and the inner statement is a logical "and" (<code>&amp;&amp;</code>) or "or" (<code>||</code>). The inner <code>if</code> statement does not have to be a direct descendant of the outer one.</p>
<p>No error is detected if the condition variable may have been changed between the two checks:</p>
<pre class="c"><code>bool onFire = isBurning();
if (onFire) {
  tryToExtinguish(onFire);
  if (onFire &amp;&amp; peopleInTheBuilding &gt; 0)
    scream();
}</code></pre>
<p>Every possible change is considered, thus if the condition variable is not a local variable of the function, it is a volatile or it has an alias (pointer or reference) then no warning is issued.</p>
<h2 id="known-limitations">Known limitations</h2>
<p>The <code>else</code> branch is not checked currently for negated condition variable:</p>
<pre class="c"><code>bool onFire = isBurning();
if (onFire) {
  scream();
} else {
  if (!onFire) {
    continueWork();
  }
}</code></pre>
<p>The checker currently only detects redundant checking of single condition variables. More complex expressions are not checked:</p>
<pre class="c"><code>if (peopleInTheBuilding == 1) {
  if (peopleInTheBuilding == 1) {
    doSomething();
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/redundant-branch-condition.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-reserved-identifier</key>
    <name>bugprone-reserved-identifier</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-reserved-identifier</p>
</div>
<h1 id="bugprone-reserved-identifier">bugprone-reserved-identifier</h1>
<p><span class="title-ref">cert-dcl37-c</span> and <span class="title-ref">cert-dcl51-cpp</span> redirect here as an alias for this check.</p>
<p>Checks for usages of identifiers reserved for use by the implementation.</p>
<p>The C and C++ standards both reserve the following names for such use:</p>
<ul>
<li>identifiers that begin with an underscore followed by an uppercase letter;</li>
<li>identifiers in the global namespace that begin with an underscore.</li>
</ul>
<p>The C standard additionally reserves names beginning with a double underscore, while the C++ standard strengthens this to reserve names with a double underscore occurring anywhere.</p>
<p>Violating the naming rules above results in undefined behavior.</p>
<pre class="c++"><code>namespace NS {
  void __f(); // name is not allowed in user code
  using _Int = int; // same with this
  #define cool__macro // also this
}
int _g(); // disallowed in global namespace only</code></pre>
<p>The check can also be inverted, i.e. it can be configured to flag any identifier that is _<a href="">not</a> a reserved identifier. This mode is for use by e.g. standard library implementors, to ensure they don't infringe on the user namespace.</p>
<p>This check does not (yet) check for other reserved names, e.g. macro names identical to language keywords, and names specifically reserved by language standards, e.g. C++ 'zombie names' and C future library directions.</p>
<p>This check corresponds to CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL37-C.+Do+not+declare+or+define+a+reserved+identifier">DCL37-C. Do not declare or define a reserved identifier</a> as well as its C++ counterpart, <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/DCL51-CPP.+Do+not+declare+or+define+a+reserved+identifier">DCL51-CPP. Do not declare or define a reserved identifier</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Invert</p>
<p>If <span class="title-ref">true</span>, inverts the check, i.e. flags names that are not reserved. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>AllowedIdentifiers</p>
<p>Semicolon-separated list of regular expressions that the check ignores. Default is an empty list.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/reserved-identifier.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>bugprone-shared-ptr-array-mismatch</key>
    <name>bugprone-shared-ptr-array-mismatch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-shared-ptr-array-mismatch</p>
</div>
<h1 id="bugprone-shared-ptr-array-mismatch">bugprone-shared-ptr-array-mismatch</h1>
<p>Finds initializations of C++ shared pointers to non-array type that are initialized with an array.</p>
<p>If a shared pointer <code>std::shared_ptr&lt;T&gt;</code> is initialized with a new-expression <code>new T[]</code> the memory is not deallocated correctly. The pointer uses plain <code>delete</code> in this case to deallocate the target memory. Instead a <code>delete[]</code> call is needed. A <code>std::shared_ptr&lt;T[]&gt;</code> calls the correct delete operator.</p>
<p>The check offers replacement of <code>shared_ptr&lt;T&gt;</code> to <code>shared_ptr&lt;T[]&gt;</code> if it is used at a single variable declaration (one variable in one statement).</p>
<p>Example:</p>
<pre class="c++"><code>std::shared_ptr&lt;Foo&gt; x(new Foo[10]); // -&gt; std::shared_ptr&lt;Foo[]&gt; x(new Foo[10]);
//                     ^ warning: shared pointer to non-array is initialized with array [bugprone-shared-ptr-array-mismatch]
std::shared_ptr&lt;Foo&gt; x1(new Foo), x2(new Foo[10]); // no replacement
//                                   ^ warning: shared pointer to non-array is initialized with array [bugprone-shared-ptr-array-mismatch]
std::shared_ptr&lt;Foo&gt; x3(new Foo[10], [](const Foo *ptr) { delete[] ptr; }); // no warning
struct S {
  std::shared_ptr&lt;Foo&gt; x(new Foo[10]); // no replacement in this case
  //                     ^ warning: shared pointer to non-array is initialized with array [bugprone-shared-ptr-array-mismatch]
};</code></pre>
<p>This check partially covers the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM51-CPP.+Properly+deallocate+dynamically+allocated+resources">MEM51-CPP. Properly deallocate dynamically allocated resources</a> However, only the <code>std::shared_ptr</code> case is detected by this check.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/shared-ptr-array-mismatch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-signal-handler</key>
    <name>bugprone-signal-handler</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-signal-handler</p>
</div>
<h1 id="bugprone-signal-handler">bugprone-signal-handler</h1>
<p>Finds specific constructs in signal handler functions that can cause undefined behavior. The rules for what is allowed differ between C++ language versions.</p>
<p>Checked signal handler rules for C:</p>
<ul>
<li>Calls to non-asynchronous-safe functions are not allowed.</li>
</ul>
<p>Checked signal handler rules for up to and including C++14:</p>
<ul>
<li>Calls to non-asynchronous-safe functions are not allowed.</li>
<li>C++-specific code constructs are not allowed in signal handlers. In other words, only the common subset of C and C++ is allowed to be used.</li>
<li>Calls to functions with non-C linkage are not allowed (including the signal handler itself).</li>
</ul>
<p>The check is disabled on C++17 and later.</p>
<p>Asynchronous-safety is determined by comparing the function's name against a set of known functions. In addition, the function must come from a system header include and in a global namespace. The (possible) arguments passed to the function are not checked. Any function that cannot be determined to be asynchronous-safe is assumed to be non-asynchronous-safe by the check, including user functions for which only the declaration is visible. Calls to user-defined functions with visible definitions are checked recursively.</p>
<p>This check implements the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+asynchronous-safe+functions+within+signal+handlers">SIG30-C. Call only asynchronous-safe functions within signal handlers</a> and the rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MSC54-CPP.+A+signal+handler+must+be+a+plain+old+function">MSC54-CPP. A signal handler must be a plain old function</a>. It has the alias names <code>cert-sig30-c</code> and <code>cert-msc54-cpp</code>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AsyncSafeFunctionSet</p>
<p>Selects which set of functions is considered as asynchronous-safe (and therefore allowed in signal handlers). It can be set to the following values:</p>
<dl>
<dt><code>minimal</code></dt>
<dd><p>Selects a minimal set that is defined in the CERT SIG30-C rule. and includes functions <code>abort()</code>, <code>_Exit()</code>, <code>quick_exit()</code> and <code>signal()</code>.</p>
</dd>
<dt><code>POSIX</code></dt>
<dd><p>Selects a larger set of functions that is listed in POSIX.1-2017 (see <a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_04_03">this link</a> for more information). The following functions are included: <code>_Exit</code>, <code>_exit</code>, <code>abort</code>, <code>accept</code>, <code>access</code>, <code>aio_error</code>, <code>aio_return</code>, <code>aio_suspend</code>, <code>alarm</code>, <code>bind</code>, <code>cfgetispeed</code>, <code>cfgetospeed</code>, <code>cfsetispeed</code>, <code>cfsetospeed</code>, <code>chdir</code>, <code>chmod</code>, <code>chown</code>, <code>clock_gettime</code>, <code>close</code>, <code>connect</code>, <code>creat</code>, <code>dup</code>, <code>dup2</code>, <code>execl</code>, <code>execle</code>, <code>execv</code>, <code>execve</code>, <code>faccessat</code>, <code>fchdir</code>, <code>fchmod</code>, <code>fchmodat</code>, <code>fchown</code>, <code>fchownat</code>, <code>fcntl</code>, <code>fdatasync</code>, <code>fexecve</code>, <code>ffs</code>, <code>fork</code>, <code>fstat</code>, <code>fstatat</code>, <code>fsync</code>, <code>ftruncate</code>, <code>futimens</code>, <code>getegid</code>, <code>geteuid</code>, <code>getgid</code>, <code>getgroups</code>, <code>getpeername</code>, <code>getpgrp</code>, <code>getpid</code>, <code>getppid</code>, <code>getsockname</code>, <code>getsockopt</code>, <code>getuid</code>, <code>htonl</code>, <code>htons</code>, <code>kill</code>, <code>link</code>, <code>linkat</code>, <code>listen</code>, <code>longjmp</code>, <code>lseek</code>, <code>lstat</code>, <code>memccpy</code>, <code>memchr</code>, <code>memcmp</code>, <code>memcpy</code>, <code>memmove</code>, <code>memset</code>, <code>mkdir</code>, <code>mkdirat</code>, <code>mkfifo</code>, <code>mkfifoat</code>, <code>mknod</code>, <code>mknodat</code>, <code>ntohl</code>, <code>ntohs</code>, <code>open</code>, <code>openat</code>, <code>pause</code>, <code>pipe</code>, <code>poll</code>, <code>posix_trace_event</code>, <code>pselect</code>, <code>pthread_kill</code>, <code>pthread_self</code>, <code>pthread_sigmask</code>, <code>quick_exit</code>, <code>raise</code>, <code>read</code>, <code>readlink</code>, <code>readlinkat</code>, <code>recv</code>, <code>recvfrom</code>, <code>recvmsg</code>, <code>rename</code>, <code>renameat</code>, <code>rmdir</code>, <code>select</code>, <code>sem_post</code>, <code>send</code>, <code>sendmsg</code>, <code>sendto</code>, <code>setgid</code>, <code>setpgid</code>, <code>setsid</code>, <code>setsockopt</code>, <code>setuid</code>, <code>shutdown</code>, <code>sigaction</code>, <code>sigaddset</code>, <code>sigdelset</code>, <code>sigemptyset</code>, <code>sigfillset</code>, <code>sigismember</code>, <code>siglongjmp</code>, <code>signal</code>, <code>sigpause</code>, <code>sigpending</code>, <code>sigprocmask</code>, <code>sigqueue</code>, <code>sigset</code>, <code>sigsuspend</code>, <code>sleep</code>, <code>sockatmark</code>, <code>socket</code>, <code>socketpair</code>, <code>stat</code>, <code>stpcpy</code>, <code>stpncpy</code>, <code>strcat</code>, <code>strchr</code>, <code>strcmp</code>, <code>strcpy</code>, <code>strcspn</code>, <code>strlen</code>, <code>strncat</code>, <code>strncmp</code>, <code>strncpy</code>, <code>strnlen</code>, <code>strpbrk</code>, <code>strrchr</code>, <code>strspn</code>, <code>strstr</code>, <code>strtok_r</code>, <code>symlink</code>, <code>symlinkat</code>, <code>tcdrain</code>, <code>tcflow</code>, <code>tcflush</code>, <code>tcgetattr</code>, <code>tcgetpgrp</code>, <code>tcsendbreak</code>, <code>tcsetattr</code>, <code>tcsetpgrp</code>, <code>time</code>, <code>timer_getoverrun</code>, <code>timer_gettime</code>, <code>timer_settime</code>, <code>times</code>, <code>umask</code>, <code>uname</code>, <code>unlink</code>, <code>unlinkat</code>, <code>utime</code>, <code>utimensat</code>, <code>utimes</code>, <code>wait</code>, <code>waitpid</code>, <code>wcpcpy</code>, <code>wcpncpy</code>, <code>wcscat</code>, <code>wcschr</code>, <code>wcscmp</code>, <code>wcscpy</code>, <code>wcscspn</code>, <code>wcslen</code>, <code>wcsncat</code>, <code>wcsncmp</code>, <code>wcsncpy</code>, <code>wcsnlen</code>, <code>wcspbrk</code>, <code>wcsrchr</code>, <code>wcsspn</code>, <code>wcsstr</code>, <code>wcstok</code>, <code>wmemchr</code>, <code>wmemcmp</code>, <code>wmemcpy</code>, <code>wmemmove</code>, <code>wmemset</code>, <code>write</code></p>
<p>The function <code>quick_exit</code> is not included in the POSIX list but it is included here in the set of safe functions.</p>
</dd>
</dl>
<p>The default value is <code>POSIX</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/signal-handler.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-signed-char-misuse</key>
    <name>bugprone-signed-char-misuse</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-signed-char-misuse</p>
</div>
<h1 id="bugprone-signed-char-misuse">bugprone-signed-char-misuse</h1>
<p><span class="title-ref">cert-str34-c</span> redirects here as an alias for this check. For the CERT alias, the <span class="title-ref">DiagnoseSignedUnsignedCharComparisons</span> option is set to <span class="title-ref">false</span>.</p>
<p>Finds those <code>signed char</code> -&gt; integer conversions which might indicate a programming error. The basic problem with the <code>signed char</code>, that it might store the non-ASCII characters as negative values. This behavior can cause a misunderstanding of the written code both when an explicit and when an implicit conversion happens.</p>
<p>When the code contains an explicit <code>signed char</code> -&gt; integer conversion, the human programmer probably expects that the converted value matches with the character code (a value from [0..255]), however, the actual value is in [-128..127] interval. To avoid this kind of misinterpretation, the desired way of converting from a <code>signed char</code> to an integer value is converting to <code>unsigned char</code> first, which stores all the characters in the positive [0..255] interval which matches the known character codes.</p>
<p>In case of implicit conversion, the programmer might not actually be aware that a conversion happened and char value is used as an integer. There are some use cases when this unawareness might lead to a functionally imperfect code. For example, checking the equality of a <code>signed char</code> and an <code>unsigned char</code> variable is something we should avoid in C++ code. During this comparison, the two variables are converted to integers which have different value ranges. For <code>signed char</code>, the non-ASCII characters are stored as a value in [-128..-1] interval, while the same characters are stored in the [128..255] interval for an <code>unsigned char</code>.</p>
<p>It depends on the actual platform whether plain <code>char</code> is handled as <code>signed char</code> by default and so it is caught by this check or not. To change the default behavior you can use <code>-funsigned-char</code> and <code>-fsigned-char</code> compilation options.</p>
<p>Currently, this check warns in the following cases: - <code>signed char</code> is assigned to an integer variable - <code>signed char</code> and <code>unsigned char</code> are compared with equality/inequality operator - <code>signed char</code> is converted to an integer in the array subscript</p>
<p>See also: <a href="https://wiki.sei.cmu.edu/confluence/display/c/STR34-C.+Cast+characters+to+unsigned+char+before+converting+to+larger+integer+sizes">STR34-C. Cast characters to unsigned char before converting to larger integer sizes</a></p>
<p>A good example from the CERT description when a <code>char</code> variable is used to read from a file that might contain non-ASCII characters. The problem comes up when the code uses the <code>-1</code> integer value as EOF, while the 255 character code is also stored as <code>-1</code> in two's complement form of char type. See a simple example of this below. This code stops not only when it reaches the end of the file, but also when it gets a character with the 255 code.</p>
<pre class="c++"><code>#define EOF (-1)

int read(void) {
  char CChar;
  int IChar = EOF;

  if (readChar(CChar)) {
    IChar = CChar;
  }
  return IChar;
}</code></pre>
<p>A proper way to fix the code above is converting the <code>char</code> variable to an <code>unsigned char</code> value first.</p>
<pre class="c++"><code>#define EOF (-1)

int read(void) {
  char CChar;
  int IChar = EOF;

  if (readChar(CChar)) {
    IChar = static_cast&lt;unsigned char&gt;(CChar);
  }
  return IChar;
}</code></pre>
<p>Another use case is checking the equality of two <code>char</code> variables with different signedness. Inside the non-ASCII value range this comparison between a <code>signed char</code> and an <code>unsigned char</code> always returns <code>false</code>.</p>
<pre class="c++"><code>bool compare(signed char SChar, unsigned char USChar) {
  if (SChar == USChar)
    return true;
  return false;
}</code></pre>
<p>The easiest way to fix this kind of comparison is casting one of the arguments, so both arguments will have the same type.</p>
<pre class="c++"><code>bool compare(signed char SChar, unsigned char USChar) {
  if (static_cast&lt;unsigned char&gt;(SChar) == USChar)
    return true;
  return false;
}</code></pre>
<div class="option">
<p>CharTypdefsToIgnore</p>
<p>A semicolon-separated list of typedef names. In this list, we can list typedefs for <code>char</code> or <code>signed char</code>, which will be ignored by the check. This is useful when a typedef introduces an integer alias like <code>sal_Int8</code> or <code>int8_t</code>. In this case, human misinterpretation is not an issue.</p>
</div>
<div class="option">
<p>DiagnoseSignedUnsignedCharComparisons</p>
<p>When <span class="title-ref">true</span>, the check will warn on <code>signed char</code>/<code>unsigned char</code> comparisons, otherwise these comparisons are ignored. By default, this option is set to <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/signed-char-misuse.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-sizeof-container</key>
    <name>bugprone-sizeof-container</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-sizeof-container</p>
</div>
<h1 id="bugprone-sizeof-container">bugprone-sizeof-container</h1>
<p>The check finds usages of <code>sizeof</code> on expressions of STL container types. Most likely the user wanted to use <code>.size()</code> instead.</p>
<p>All class/struct types declared in namespace <code>std::</code> having a const <code>size()</code> method are considered containers, with the exception of <code>std::bitset</code> and <code>std::array</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string s;
int a = 47 + sizeof(s); // warning: sizeof() doesn&#39;t return the size of the container. Did you mean .size()?

int b = sizeof(std::string); // no warning, probably intended.

std::string array_of_strings[10];
int c = sizeof(array_of_strings) / sizeof(array_of_strings[0]); // no warning, definitely intended.

std::array&lt;int, 3&gt; std_array;
int d = sizeof(std_array); // no warning, probably intended.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/sizeof-container.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-sizeof-expression</key>
    <name>bugprone-sizeof-expression</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-sizeof-expression</p>
</div>
<h1 id="bugprone-sizeof-expression">bugprone-sizeof-expression</h1>
<p>The check finds usages of <code>sizeof</code> expressions which are most likely errors.</p>
<p>The <code>sizeof</code> operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. Misuse of this operator may be leading to errors and possible software vulnerabilities.</p>
<h2 id="suspicious-usage-of-sizeofk">Suspicious usage of 'sizeof(K)'</h2>
<p>A common mistake is to query the <code>sizeof</code> of an integer literal. This is equivalent to query the size of its type (probably <code>int</code>). The intent of the programmer was probably to simply get the integer and not its size.</p>
<pre class="c++"><code>#define BUFLEN 42
char buf[BUFLEN];
memset(buf, 0, sizeof(BUFLEN));  // sizeof(42) ==&gt; sizeof(int)</code></pre>
<h2 id="suspicious-usage-of-sizeofexpr">Suspicious usage of 'sizeof(expr)'</h2>
<p>In cases, where there is an enum or integer to represent a type, a common mistake is to query the <code>sizeof</code> on the integer or enum that represents the type that should be used by <code>sizeof</code>. This results in the size of the integer and not of the type the integer represents:</p>
<pre class="c++"><code>enum data_type {
  FLOAT_TYPE,
  DOUBLE_TYPE
};

struct data {
  data_type type;
  void* buffer;
  data_type get_type() {
    return type;
  }
};

void f(data d, int numElements) {
  // should be sizeof(float) or sizeof(double), depending on d.get_type()
  int numBytes = numElements * sizeof(d.get_type());
  ...
}</code></pre>
<h2 id="suspicious-usage-of-sizeofthis">Suspicious usage of 'sizeof(this)'</h2>
<p>The <code>this</code> keyword is evaluated to a pointer to an object of a given type. The expression <code>sizeof(this)</code> is returning the size of a pointer. The programmer most likely wanted the size of the object and not the size of the pointer.</p>
<pre class="c++"><code>class Point {
  [...]
  size_t size() { return sizeof(this); }  // should probably be sizeof(*this)
  [...]
};</code></pre>
<h2 id="suspicious-usage-of-sizeofchar">Suspicious usage of 'sizeof(char*)'</h2>
<p>There is a subtle difference between declaring a string literal with <code>char* A = ""</code> and <code>char A[] = ""</code>. The first case has the type <code>char*</code> instead of the aggregate type <code>char[]</code>. Using <code>sizeof</code> on an object declared with <code>char*</code> type is returning the size of a pointer instead of the number of characters (bytes) in the string literal.</p>
<pre class="c++"><code>const char* kMessage = &quot;Hello World!&quot;;      // const char kMessage[] = &quot;...&quot;;
void getMessage(char* buf) {
  memcpy(buf, kMessage, sizeof(kMessage));  // sizeof(char*)
}</code></pre>
<h2 id="suspicious-usage-of-sizeofa">Suspicious usage of 'sizeof(A*)'</h2>
<p>A common mistake is to compute the size of a pointer instead of its pointee. These cases may occur because of explicit cast or implicit conversion.</p>
<pre class="c++"><code>int A[10];
memset(A, 0, sizeof(A + 0));

struct Point point;
memset(point, 0, sizeof(&amp;point));</code></pre>
<h2 id="suspicious-usage-of-sizeof...sizeof...">Suspicious usage of 'sizeof(...)/sizeof(...)'</h2>
<p>Dividing <code>sizeof</code> expressions is typically used to retrieve the number of elements of an aggregate. This check warns on incompatible or suspicious cases.</p>
<p>In the following example, the entity has 10-bytes and is incompatible with the type <code>int</code> which has 4 bytes.</p>
<pre class="c++"><code>char buf[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };  // sizeof(buf) =&gt; 10
void getMessage(char* dst) {
  memcpy(dst, buf, sizeof(buf) / sizeof(int));  // sizeof(int) =&gt; 4  [incompatible sizes]
}</code></pre>
<p>In the following example, the expression <code>sizeof(Values)</code> is returning the size of <code>char*</code>. One can easily be fooled by its declaration, but in parameter declaration the size '10' is ignored and the function is receiving a <code>char*</code>.</p>
<pre class="c++"><code>char OrderedValues[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
return CompareArray(char Values[10]) {
  return memcmp(OrderedValues, Values, sizeof(Values)) == 0;  // sizeof(Values) ==&gt; sizeof(char*) [implicit cast to char*]
}</code></pre>
<h2 id="suspicious-sizeof-by-sizeof-expression">Suspicious 'sizeof' by 'sizeof' expression</h2>
<p>Multiplying <code>sizeof</code> expressions typically makes no sense and is probably a logic error. In the following example, the programmer used <code>*</code> instead of <code>/</code>.</p>
<pre class="c++"><code>const char kMessage[] = &quot;Hello World!&quot;;
void getMessage(char* buf) {
  memcpy(buf, kMessage, sizeof(kMessage) * sizeof(char));  //  sizeof(kMessage) / sizeof(char)
}</code></pre>
<p>This check may trigger on code using the arraysize macro. The following code is working correctly but should be simplified by using only the <code>sizeof</code> operator.</p>
<pre class="c++"><code>extern Object objects[100];
void InitializeObjects() {
  memset(objects, 0, arraysize(objects) * sizeof(Object));  // sizeof(objects)
}</code></pre>
<h2 id="suspicious-usage-of-sizeofsizeof...">Suspicious usage of 'sizeof(sizeof(...))'</h2>
<p>Getting the <code>sizeof</code> of a <code>sizeof</code> makes no sense and is typically an error hidden through macros.</p>
<pre class="c++"><code>#define INT_SZ sizeof(int)
int buf[] = { 42 };
void getInt(int* dst) {
  memcpy(dst, buf, sizeof(INT_SZ));  // sizeof(sizeof(int)) is suspicious.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnSizeOfConstant</p>
<p>When <span class="title-ref">true</span>, the check will warn on an expression like <code>sizeof(CONSTANT)</code>. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfIntegerExpression</p>
<p>When <span class="title-ref">true</span>, the check will warn on an expression like <code>sizeof(expr)</code> where the expression results in an integer. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfThis</p>
<p>When <span class="title-ref">true</span>, the check will warn on an expression like <code>sizeof(this)</code>. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfCompareToConstant</p>
<p>When <span class="title-ref">true</span>, the check will warn on an expression like <code>sizeof(expr) &lt;= k</code> for a suspicious constant <span class="title-ref">k</span> while <span class="title-ref">k</span> is <span class="title-ref">0</span> or greater than <span class="title-ref">0x8000</span>. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfPointerToAggregate</p>
<p>When <span class="title-ref">true, the check will warn on an expression like </span><span class="title-ref">sizeof(expr)</span><span class="title-ref"> where the expression is a pointer to aggregate. Default is `true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/sizeof-expression.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-spuriously-wake-up-functions</key>
    <name>bugprone-spuriously-wake-up-functions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-spuriously-wake-up-functions</p>
</div>
<h1 id="bugprone-spuriously-wake-up-functions">bugprone-spuriously-wake-up-functions</h1>
<p>Finds <code>cnd_wait</code>, <code>cnd_timedwait</code>, <code>wait</code>, <code>wait_for</code>, or <code>wait_until</code> function calls when the function is not invoked from a loop that checks whether a condition predicate holds or the function has a condition parameter.</p>
<pre class="c++"><code>if (condition_predicate) {
    condition.wait(lk);
}</code></pre>
<pre class="c"><code>if (condition_predicate) {
    if (thrd_success != cnd_wait(&amp;condition, &amp;lock)) {
    }
}</code></pre>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/CON54-CPP.+Wrap+functions+that+can+spuriously+wake+up+in+a+loop">CON54-CPP. Wrap functions that can spuriously wake up in a loop</a>. and CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/CON36-C.+Wrap+functions+that+can+spuriously+wake+up+in+a+loop">CON36-C. Wrap functions that can spuriously wake up in a loop</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/spuriously-wake-up-functions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-standalone-empty</key>
    <name>bugprone-standalone-empty</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-standalone-empty</p>
</div>
<h1 id="bugprone-standalone-empty">bugprone-standalone-empty</h1>
<p>Warns when <code>empty()</code> is used on a range and the result is ignored. Suggests <code>clear()</code> if it is an existing member function.</p>
<p>The <code>empty()</code> method on several common ranges returns a Boolean indicating whether or not the range is empty, but is often mistakenly interpreted as a way to clear the contents of a range. Some ranges offer a <code>clear()</code> method for this purpose. This check warns when a call to empty returns a result that is ignored, and suggests replacing it with a call to <code>clear()</code> if it is available as a member function of the range.</p>
<p>For example, the following code could be used to indicate whether a range is empty or not, but the result is ignored:</p>
<pre class="c++"><code>std::vector&lt;int&gt; v;
...
v.empty();</code></pre>
<p>A call to <code>clear()</code> would appropriately clear the contents of the range:</p>
<pre class="c++"><code>std::vector&lt;int&gt; v;
...
v.clear();</code></pre>
<p>Limitations:</p>
<ul>
<li>Doesn't warn if <code>empty()</code> is defined and used with the ignore result in the class template definition (for example in the library implementation). These error cases can be caught with <code>[[nodiscard]]</code> attribute.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/standalone-empty.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-string-constructor</key>
    <name>bugprone-string-constructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-string-constructor</p>
</div>
<h1 id="bugprone-string-constructor">bugprone-string-constructor</h1>
<p>Finds string constructors that are suspicious and probably errors.</p>
<p>A common mistake is to swap parameters to the 'fill' string-constructor.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string str(&#39;x&#39;, 50); // should be str(50, &#39;x&#39;)</code></pre>
<p>Calling the string-literal constructor with a length bigger than the literal is suspicious and adds extra random characters to the string.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string(&quot;test&quot;, 200);   // Will include random characters after &quot;test&quot;.
std::string_view(&quot;test&quot;, 200);</code></pre>
<p>Creating an empty string from constructors with parameters is considered suspicious. The programmer should use the empty constructor instead.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string(&quot;test&quot;, 0);   // Creation of an empty string.
std::string_view(&quot;test&quot;, 0);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnLargeLength</p>
<p>When <span class="title-ref">true</span>, the check will warn on a string with a length greater than <code class="interpreted-text" role="option">LargeLengthThreshold</code>. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>LargeLengthThreshold</p>
<p>An integer specifying the large length threshold. Default is <span class="title-ref">0x800000</span>.</p>
</div>
<div class="option">
<p>StringNames</p>
<p>Default is <span class="title-ref">::std::basic_string;::std::basic_string_view</span>.</p>
<p>Semicolon-delimited list of class names to apply this check to. By default <span class="title-ref">::std::basic_string</span> applies to <code>std::string</code> and <code>std::wstring</code>. Set to e.g. <span class="title-ref">::std::basic_string;llvm::StringRef;QString</span> to perform this check on custom classes.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-constructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-string-integer-assignment</key>
    <name>bugprone-string-integer-assignment</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-string-integer-assignment</p>
</div>
<h1 id="bugprone-string-integer-assignment">bugprone-string-integer-assignment</h1>
<p>The check finds assignments of an integer to <code>std::basic_string&lt;CharT&gt;</code> (<code>std::string</code>, <code>std::wstring</code>, etc.). The source of the problem is the following assignment operator of <code>std::basic_string&lt;CharT&gt;</code>:</p>
<pre class="c++"><code>basic_string&amp; operator=( CharT ch );</code></pre>
<p>Numeric types can be implicitly casted to character types.</p>
<pre class="c++"><code>std::string s;
int x = 5965;
s = 6;
s = x;</code></pre>
<p>Use the appropriate conversion functions or character literals.</p>
<pre class="c++"><code>std::string s;
int x = 5965;
s = &#39;6&#39;;
s = std::to_string(x);</code></pre>
<p>In order to suppress false positives, use an explicit cast.</p>
<pre class="c++"><code>std::string s;
s = static_cast&lt;char&gt;(6);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-integer-assignment.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-string-literal-with-embedded-nul</key>
    <name>bugprone-string-literal-with-embedded-nul</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-string-literal-with-embedded-nul</p>
</div>
<h1 id="bugprone-string-literal-with-embedded-nul">bugprone-string-literal-with-embedded-nul</h1>
<p>Finds occurrences of string literal with embedded NUL character and validates their usage.</p>
<h2 id="invalid-escaping">Invalid escaping</h2>
<p>Special characters can be escaped within a string literal by using their hexadecimal encoding like <code>\x42</code>. A common mistake is to escape them like this <code>\0x42</code> where the <code>\0</code> stands for the NUL character.</p>
<pre class="c++"><code>const char* Example[] = &quot;Invalid character: \0x12 should be \x12&quot;;
const char* Bytes[] = &quot;\x03\0x02\0x01\0x00\0xFF\0xFF\0xFF&quot;;</code></pre>
<h2 id="truncated-literal">Truncated literal</h2>
<p>String-like classes can manipulate strings with embedded NUL as they are keeping track of the bytes and the length. This is not the case for a <code>char*</code> (NUL-terminated) string.</p>
<p>A common mistake is to pass a string-literal with embedded NUL to a string constructor expecting a NUL-terminated string. The bytes after the first NUL character are truncated.</p>
<pre class="c++"><code>std::string str(&quot;abc\0def&quot;);  // &quot;def&quot; is truncated
str += &quot;\0&quot;;                  // This statement is doing nothing
if (str == &quot;\0abc&quot;) return;   // This expression is always true</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-literal-with-embedded-nul.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-stringview-nullptr</key>
    <name>bugprone-stringview-nullptr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-stringview-nullptr</p>
</div>
<h1 id="bugprone-stringview-nullptr">bugprone-stringview-nullptr</h1>
<p>Checks for various ways that the <code>const CharT*</code> constructor of <code>std::basic_string_view</code> can be passed a null argument and replaces them with the default constructor in most cases. For the comparison operators, braced initializer list does not compile so instead a call to <code>.empty()</code> or the empty string literal are used, where appropriate.</p>
<p>This prevents code from invoking behavior which is unconditionally undefined. The single-argument <code>const CharT*</code> constructor does not check for the null case before dereferencing its input. The standard is slated to add an explicitly-deleted overload to catch some of these cases: wg21.link/p2166</p>
<p>To catch the additional cases of <code>NULL</code> (which expands to <code>__null</code>) and <code>0</code>, first run the <code>modernize-use-nullptr</code> check to convert the callers to <code>nullptr</code>.</p>
<pre class="c++"><code>std::string_view sv = nullptr;

sv = nullptr;

bool is_empty = sv == nullptr;
bool isnt_empty = sv != nullptr;

accepts_sv(nullptr);

accepts_sv({{}});  // A

accepts_sv({nullptr, 0});  // B</code></pre>
<p>is translated into...</p>
<pre class="c++"><code>std::string_view sv = {};

sv = {};

bool is_empty = sv.empty();
bool isnt_empty = !sv.empty();

accepts_sv(&quot;&quot;);

accepts_sv(&quot;&quot;);  // A

accepts_sv({nullptr, 0});  // B</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>The source pattern with trailing comment "A" selects the <code>(const CharT*)</code> constructor overload and then value-initializes the pointer, causing a null dereference. It happens to not include the <code>nullptr</code> literal, but it is still within the scope of this ClangTidy check.</p>
</div>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>The source pattern with trailing comment "B" selects the <code>(const CharT*, size_type)</code> constructor which is perfectly valid, since the length argument is <code>0</code>. It is not changed by this ClangTidy check.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/stringview-nullptr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-suspicious-enum-usage</key>
    <name>bugprone-suspicious-enum-usage</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-enum-usage</p>
</div>
<h1 id="bugprone-suspicious-enum-usage">bugprone-suspicious-enum-usage</h1>
<p>The checker detects various cases when an enum is probably misused (as a bitmask ).</p>
<ol type="1">
<li>When "ADD" or "bitwise OR" is used between two enum which come from different types and these types value ranges are not disjoint.</li>
</ol>
<p>The following cases will be investigated only using <code class="interpreted-text" role="option">StrictMode</code>. We regard the enum as a (suspicious) bitmask if the three conditions below are true at the same time:</p>
<ul>
<li>at most half of the elements of the enum are non pow-of-2 numbers (because of short enumerations)</li>
<li>there is another non pow-of-2 number than the enum constant representing all choices (the result "bitwise OR" operation of all enum elements)</li>
<li>enum type variable/enumconstant is used as an argument of a <span class="title-ref">+</span> or "bitwise OR " operator</li>
</ul>
<p>So whenever the non pow-of-2 element is used as a bitmask element we diagnose a misuse and give a warning.</p>
<ol start="2" type="1">
<li>Investigating the right hand side of <span class="title-ref">+=</span> and <span class="title-ref">|=</span> operator.</li>
<li>Check only the enum value side of a <span class="title-ref">|</span> and <span class="title-ref">+</span> operator if one of them is not enum val.</li>
<li>Check both side of <span class="title-ref">|</span> or <span class="title-ref">+</span> operator where the enum values are from the same enum type.</li>
</ol>
<p>Examples:</p>
<pre class="c++"><code>enum { A, B, C };
enum { D, E, F = 5 };
enum { G = 10, H = 11, I = 12 };

unsigned flag;
flag =
    A |
    H; // OK, disjoint value intervals in the enum types -&gt;probably good use.
flag = B | F; // Warning, have common values so they are probably misused.

// Case 2:
enum Bitmask {
  A = 0,
  B = 1,
  C = 2,
  D = 4,
  E = 8,
  F = 16,
  G = 31 // OK, real bitmask.
};

enum Almostbitmask {
  AA = 0,
  BB = 1,
  CC = 2,
  DD = 4,
  EE = 8,
  FF = 16,
  GG // Problem, forgot to initialize.
};

unsigned flag = 0;
flag |= E; // OK.
flag |=
    EE; // Warning at the decl, and note that it was used here as a bitmask.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>Default value: 0. When non-null the suspicious bitmask usage will be investigated additionally to the different enum usage check.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-enum-usage.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-suspicious-include</key>
    <name>bugprone-suspicious-include</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-include</p>
</div>
<h1 id="bugprone-suspicious-include">bugprone-suspicious-include</h1>
<p>The check detects various cases when an include refers to what appears to be an implementation file, which often leads to hard-to-track-down ODR violations.</p>
<p>Examples:</p>
<pre class="c++"><code>#include &quot;Dinosaur.hpp&quot;     // OK, .hpp files tend not to have definitions.
#include &quot;Pterodactyl.h&quot;    // OK, .h files tend not to have definitions.
#include &quot;Velociraptor.cpp&quot; // Warning, filename is suspicious.
#include_next &lt;stdio.c&gt;     // Warning, filename is suspicious.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>Default value: <code>";h;hh;hpp;hxx"</code> A semicolon-separated list of filename extensions of header files (the filename extensions should not contain a "." prefix). For extension-less header files, use an empty string or leave an empty string between ";" if there are other filename extensions.</p>
</div>
<div class="option">
<p>ImplementationFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">ImplementationFileExtensions</span>.</p>
<p>Default value: <code>"c;cc;cpp;cxx"</code> Likewise, a semicolon-separated list of filename extensions of implementation files.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-include.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-suspicious-memory-comparison</key>
    <name>bugprone-suspicious-memory-comparison</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-memory-comparison</p>
</div>
<h1 id="bugprone-suspicious-memory-comparison">bugprone-suspicious-memory-comparison</h1>
<p>Finds potentially incorrect calls to <code>memcmp()</code> based on properties of the arguments. The following cases are covered:</p>
<p><strong>Case 1: Non-standard-layout type</strong></p>
<p>Comparing the object representations of non-standard-layout objects may not properly compare the value representations.</p>
<p><strong>Case 2: Types with no unique object representation</strong></p>
<p>Objects with the same value may not have the same object representation. This may be caused by padding or floating-point types.</p>
<p>See also: <a href="https://wiki.sei.cmu.edu/confluence/display/c/EXP42-C.+Do+not+compare+padding+data">EXP42-C. Do not compare padding data</a> and <a href="https://wiki.sei.cmu.edu/confluence/display/c/FLP37-C.+Do+not+use+object+representations+to+compare+floating-point+values">FLP37-C. Do not use object representations to compare floating-point values</a></p>
<p>This check is also related to and partially overlaps the CERT C++ Coding Standard rules <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP57-CPP.+Prefer+special+member+functions+and+overloaded+operators+to+C+Standard+Library+functions">OOP57-CPP. Prefer special member functions and overloaded operators to C Standard Library functions</a> and <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP62-CPP.+Do+not+access+the+bits+of+an+object+representation+that+are+not+part+of+the+object%27s+value+representation">EXP62-CPP. Do not access the bits of an object representation that are not part of the object's value representation</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-memory-comparison.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-suspicious-memset-usage</key>
    <name>bugprone-suspicious-memset-usage</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-memset-usage</p>
</div>
<h1 id="bugprone-suspicious-memset-usage">bugprone-suspicious-memset-usage</h1>
<p>This check finds <code>memset()</code> calls with potential mistakes in their arguments. Considering the function as <code>void* memset(void* destination, int fill_value, size_t byte_count)</code>, the following cases are covered:</p>
<p><strong>Case 1: Fill value is a character ``'0'``</strong></p>
<p>Filling up a memory area with ASCII code 48 characters is not customary, possibly integer zeroes were intended instead. The check offers a replacement of <code>'0'</code> with <code>0</code>. Memsetting character pointers with <code>'0'</code> is allowed.</p>
<p><strong>Case 2: Fill value is truncated</strong></p>
<p>Memset converts <code>fill_value</code> to <code>unsigned char</code> before using it. If <code>fill_value</code> is out of unsigned character range, it gets truncated and memory will not contain the desired pattern.</p>
<p><strong>Case 3: Byte count is zero</strong></p>
<p>Calling memset with a literal zero in its <code>byte_count</code> argument is likely to be unintended and swapped with <code>fill_value</code>. The check offers to swap these two arguments.</p>
<p>Corresponding cpplint.py check name: <code>runtime/memset</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>void foo() {
  int i[5] = {1, 2, 3, 4, 5};
  int *ip = i;
  char c = &#39;1&#39;;
  char *cp = &amp;c;
  int v = 0;

  // Case 1
  memset(ip, &#39;0&#39;, 1); // suspicious
  memset(cp, &#39;0&#39;, 1); // OK

  // Case 2
  memset(ip, 0xabcd, 1); // fill value gets truncated
  memset(ip, 0x00, 1);   // OK

  // Case 3
  memset(ip, sizeof(int), v); // zero length, potentially swapped
  memset(ip, 0, 1);           // OK
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-memset-usage.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-suspicious-missing-comma</key>
    <name>bugprone-suspicious-missing-comma</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-missing-comma</p>
</div>
<h1 id="bugprone-suspicious-missing-comma">bugprone-suspicious-missing-comma</h1>
<p>String literals placed side-by-side are concatenated at translation phase 6 (after the preprocessor). This feature is used to represent long string literal on multiple lines.</p>
<p>For instance, the following declarations are equivalent:</p>
<pre class="c++"><code>const char* A[] = &quot;This is a test&quot;;
const char* B[] = &quot;This&quot; &quot; is a &quot;    &quot;test&quot;;</code></pre>
<p>A common mistake done by programmers is to forget a comma between two string literals in an array initializer list.</p>
<pre class="c++"><code>const char* Test[] = {
  &quot;line 1&quot;,
  &quot;line 2&quot;     // Missing comma!
  &quot;line 3&quot;,
  &quot;line 4&quot;,
  &quot;line 5&quot;
};</code></pre>
<p>The array contains the string "line 2line3" at offset 1 (i.e. Test[1]). Clang won't generate warnings at compile time.</p>
<p>This check may warn incorrectly on cases like:</p>
<pre class="c++"><code>const char* SupportedFormat[] = {
  &quot;Error %s&quot;,
  &quot;Code &quot; PRIu64,   // May warn here.
  &quot;Warning %s&quot;,
};</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>SizeThreshold</p>
<p>An unsigned integer specifying the minimum size of a string literal to be considered by the check. Default is <code>5U</code>.</p>
</div>
<div class="option">
<p>RatioThreshold</p>
<p>A string specifying the maximum threshold ratio [0, 1.0] of suspicious string literals to be considered. Default is <code>".2"</code>.</p>
</div>
<div class="option">
<p>MaxConcatenatedTokens</p>
<p>An unsigned integer specifying the maximum number of concatenated tokens. Default is <code>5U</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-missing-comma.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-suspicious-realloc-usage</key>
    <name>bugprone-suspicious-realloc-usage</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-realloc-usage</p>
</div>
<h1 id="bugprone-suspicious-realloc-usage">bugprone-suspicious-realloc-usage</h1>
<p>This check finds usages of <code>realloc</code> where the return value is assigned to the same expression as passed to the first argument: <code>p = realloc(p, size);</code> The problem with this construct is that if <code>realloc</code> fails it returns a null pointer but does not deallocate the original memory. If no other variable is pointing to it, the original memory block is not available any more for the program to use or free. In either case <code>p = realloc(p, size);</code> indicates bad coding style and can be replaced by <code>q = realloc(p, size);</code>.</p>
<p>The pointer expression (used at <code>realloc</code>) can be a variable or a field member of a data structure, but can not contain function calls or unresolved types.</p>
<p>In obvious cases when the pointer used at realloc is assigned to another variable before the <code>realloc</code> call, no warning is emitted. This happens only if a simple expression in form of <code>q = p</code> or <code>void *q = p</code> is found in the same function where <code>p = realloc(p, ...)</code> is found. The assignment has to be before the call to realloc (but otherwise at any place) in the same function. This suppression works only if <code>p</code> is a single variable.</p>
<p>Examples:</p>
<pre class="c++"><code>struct A {
  void *p;
};

A &amp;getA();

void foo(void *p, A *a, int new_size) {
  p = realloc(p, new_size); // warning: &#39;p&#39; may be set to null if &#39;realloc&#39; fails, which may result in a leak of the original buffer
  a-&gt;p = realloc(a-&gt;p, new_size); // warning: &#39;a-&gt;p&#39; may be set to null if &#39;realloc&#39; fails, which may result in a leak of the original buffer
  getA().p = realloc(getA().p, new_size); // no warning
}

void foo1(void *p, int new_size) {
  void *p1 = p;
  p = realloc(p, new_size); // no warning
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-realloc-usage.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-suspicious-semicolon</key>
    <name>bugprone-suspicious-semicolon</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-semicolon</p>
</div>
<h1 id="bugprone-suspicious-semicolon">bugprone-suspicious-semicolon</h1>
<p>Finds most instances of stray semicolons that unexpectedly alter the meaning of the code. More specifically, it looks for <code>if</code>, <code>while</code>, <code>for</code> and <code>for-range</code> statements whose body is a single semicolon, and then analyzes the context of the code (e.g. indentation) in an attempt to determine whether that is intentional.</p>
<pre class="c++"><code>if (x &lt; y);
{
  x++;
}</code></pre>
<p>Here the body of the <code>if</code> statement consists of only the semicolon at the end of the first line, and <span class="title-ref">x</span> will be incremented regardless of the condition.</p>
<pre class="c++"><code>while ((line = readLine(file)) != NULL);
  processLine(line);</code></pre>
<p>As a result of this code, <span class="title-ref">processLine()</span> will only be called once, when the <code>while</code> loop with the empty body exits with <span class="title-ref">line == NULL</span>. The indentation of the code indicates the intention of the programmer.</p>
<pre class="c++"><code>if (x &gt;= y);
x -= y;</code></pre>
<p>While the indentation does not imply any nesting, there is simply no valid reason to have an <span class="title-ref">if</span> statement with an empty body (but it can make sense for a loop). So this check issues a warning for the code above.</p>
<p>To solve the issue remove the stray semicolon or in case the empty body is intentional, reflect this using code indentation or put the semicolon in a new line. For example:</p>
<pre class="c++"><code>while (readWhitespace());
  Token t = readNextToken();</code></pre>
<p>Here the second line is indented in a way that suggests that it is meant to be the body of the <span class="title-ref">while</span> loop - whose body is in fact empty, because of the semicolon at the end of the first line.</p>
<p>Either remove the indentation from the second line:</p>
<pre class="c++"><code>while (readWhitespace());
Token t = readNextToken();</code></pre>
<p>... or move the semicolon from the end of the first line to a new line:</p>
<pre class="c++"><code>while (readWhitespace())
  ;

  Token t = readNextToken();</code></pre>
<p>In this case the check will assume that you know what you are doing, and will not raise a warning.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-semicolon.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-suspicious-string-compare</key>
    <name>bugprone-suspicious-string-compare</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-suspicious-string-compare</p>
</div>
<h1 id="bugprone-suspicious-string-compare">bugprone-suspicious-string-compare</h1>
<p>Find suspicious usage of runtime string comparison functions. This check is valid in C and C++.</p>
<p>Checks for calls with implicit comparator and proposed to explicitly add it.</p>
<pre class="c++"><code>if (strcmp(...))       // Implicitly compare to zero
if (!strcmp(...))      // Won&#39;t warn
if (strcmp(...) != 0)  // Won&#39;t warn</code></pre>
<p>Checks that compare function results (i.e., <code>strcmp</code>) are compared to valid constant. The resulting value is</p>
<pre class=""><code>&lt;  0    when lower than,
&gt;  0    when greater than,
== 0    when equals.</code></pre>
<p>A common mistake is to compare the result to <span class="title-ref">1</span> or <span class="title-ref">-1</span>.</p>
<pre class="c++"><code>if (strcmp(...) == -1)  // Incorrect usage of the returned value.</code></pre>
<p>Additionally, the check warns if the results value is implicitly cast to a <em>suspicious</em> non-integer type. It's happening when the returned value is used in a wrong context.</p>
<pre class="c++"><code>if (strcmp(...) &lt; 0.)  // Incorrect usage of the returned value.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnImplicitComparison</p>
<p>When <span class="title-ref">true</span>, the check will warn on implicit comparison. <span class="title-ref">true</span> by default.</p>
</div>
<div class="option">
<p>WarnOnLogicalNotComparison</p>
<p>When <span class="title-ref">true</span>, the check will warn on logical not comparison. <span class="title-ref">false</span> by default.</p>
</div>
<div class="option">
<p>StringCompareLikeFunctions</p>
<p>A string specifying the comma-separated names of the extra string comparison functions. Default is an empty string. The check will detect the following string comparison functions: <span class="title-ref">__builtin_memcmp</span>, <span class="title-ref">__builtin_strcasecmp</span>, <span class="title-ref">__builtin_strcmp</span>, <span class="title-ref">__builtin_strncasecmp</span>, <span class="title-ref">__builtin_strncmp</span>, <span class="title-ref">_mbscmp</span>, <span class="title-ref">_mbscmp_l</span>, <span class="title-ref">_mbsicmp</span>, <span class="title-ref">_mbsicmp_l</span>, <span class="title-ref">_mbsnbcmp</span>, <span class="title-ref">_mbsnbcmp_l</span>, <span class="title-ref">_mbsnbicmp</span>, <span class="title-ref">_mbsnbicmp_l</span>, <span class="title-ref">_mbsncmp</span>, <span class="title-ref">_mbsncmp_l</span>, <span class="title-ref">_mbsnicmp</span>, <span class="title-ref">_mbsnicmp_l</span>, <span class="title-ref">_memicmp</span>, <span class="title-ref">_memicmp_l</span>, <span class="title-ref">_stricmp</span>, <span class="title-ref">_stricmp_l</span>, <span class="title-ref">_strnicmp</span>, <span class="title-ref">_strnicmp_l</span>, <span class="title-ref">_wcsicmp</span>, <span class="title-ref">_wcsicmp_l</span>, <span class="title-ref">_wcsnicmp</span>, <span class="title-ref">_wcsnicmp_l</span>, <span class="title-ref">lstrcmp</span>, <span class="title-ref">lstrcmpi</span>, <span class="title-ref">memcmp</span>, <span class="title-ref">memicmp</span>, <span class="title-ref">strcasecmp</span>, <span class="title-ref">strcmp</span>, <span class="title-ref">strcmpi</span>, <span class="title-ref">stricmp</span>, <span class="title-ref">strncasecmp</span>, <span class="title-ref">strncmp</span>, <span class="title-ref">strnicmp</span>, <span class="title-ref">wcscasecmp</span>, <span class="title-ref">wcscmp</span>, <span class="title-ref">wcsicmp</span>, <span class="title-ref">wcsncmp</span>, <span class="title-ref">wcsnicmp</span>, <span class="title-ref">wmemcmp</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-string-compare.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-swapped-arguments</key>
    <name>bugprone-swapped-arguments</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-swapped-arguments</p>
</div>
<h1 id="bugprone-swapped-arguments">bugprone-swapped-arguments</h1>
<p>Finds potentially swapped arguments by examining implicit conversions. It analyzes the types of the arguments being passed to a function and compares them to the expected types of the corresponding parameters. If there is a mismatch or an implicit conversion that indicates a potential swap, a warning is raised.</p>
<pre class="c++"><code>void printNumbers(int a, float b);

int main() {
  // Swapped arguments: float passed as int, int as float)
  printNumbers(10.0f, 5);
  return 0;
}</code></pre>
<p>Covers a wide range of implicit conversions, including: - User-defined conversions - Conversions from floating-point types to boolean or integral types - Conversions from integral types to boolean or floating-point types - Conversions from boolean to integer types or floating-point types - Conversions from (member) pointers to boolean</p>
<p>It is important to note that for most argument swaps, the types need to match exactly. However, there are exceptions to this rule. Specifically, when the swapped argument is of integral type, an exact match is not always necessary. Implicit casts from other integral types are also accepted. Similarly, when dealing with floating-point arguments, implicit casts between different floating-point types are considered acceptable.</p>
<p>To avoid confusion, swaps where both swapped arguments are of integral types or both are of floating-point types do not trigger the warning. In such cases, it's assumed that the developer intentionally used different integral or floating-point types and does not raise a warning. This approach prevents false positives and provides flexibility in handling situations where varying integral or floating-point types are intentionally utilized.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/swapped-arguments.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-switch-missing-default-case</key>
    <name>bugprone-switch-missing-default-case</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-switch-missing-default-case</p>
</div>
<h1 id="bugprone-switch-missing-default-case">bugprone-switch-missing-default-case</h1>
<p>Ensures that switch statements without default cases are flagged, focuses only on covering cases with non-enums where the compiler may not issue warnings.</p>
<p>Switch statements without a default case can lead to unexpected behavior and incomplete handling of all possible cases. When a switch statement lacks a default case, if a value is encountered that does not match any of the specified cases, the program will continue execution without any defined behavior or handling.</p>
<p>This check helps identify switch statements that are missing a default case, allowing developers to ensure that all possible cases are handled properly. Adding a default case allows for graceful handling of unexpected or unmatched values, reducing the risk of program errors and unexpected behavior.</p>
<p>Example:</p>
<pre class="c++"><code>// Example 1:
// warning: switching on non-enum value without default case may not cover all cases
switch (i) {
case 0:
  break;
}

// Example 2:
enum E { eE1 };
E e = eE1;
switch (e) { // no-warning
case eE1:
  break;
}

// Example 3:
int i = 0;
switch (i) { // no-warning
case 0:
  break;
default:
  break;
}</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Enum types are already covered by compiler warnings (comes under -Wswitch) when a switch statement does not handle all enum values. This check focuses on non-enum types where the compiler warnings may not be present.</p>
</div>
<div class="seealso">
<p>The <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-default">CppCoreGuideline ES.79</a> provide guidelines on switch statements, including the recommendation to always provide a default case.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/switch-missing-default-case.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-terminating-continue</key>
    <name>bugprone-terminating-continue</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-terminating-continue</p>
</div>
<h1 id="bugprone-terminating-continue">bugprone-terminating-continue</h1>
<p>Detects <code>do while</code> loops with a condition always evaluating to false that have a <code>continue</code> statement, as this <code>continue</code> terminates the loop effectively.</p>
<pre class="c++"><code>void f() {
do {
  // some code
  continue; // terminating continue
  // some other code
} while(false);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/terminating-continue.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-throw-keyword-missing</key>
    <name>bugprone-throw-keyword-missing</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-throw-keyword-missing</p>
</div>
<h1 id="bugprone-throw-keyword-missing">bugprone-throw-keyword-missing</h1>
<p>Warns about a potentially missing <code>throw</code> keyword. If a temporary object is created, but the object's type derives from (or is the same as) a class that has 'EXCEPTION', 'Exception' or 'exception' in its name, we can assume that the programmer's intention was to throw that object.</p>
<p>Example:</p>
<pre class="c++"><code>void f(int i) {
  if (i &lt; 0) {
    // Exception is created but is not thrown.
    std::runtime_error(&quot;Unexpected argument&quot;);
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/throw-keyword-missing.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-too-small-loop-variable</key>
    <name>bugprone-too-small-loop-variable</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-too-small-loop-variable</p>
</div>
<h1 id="bugprone-too-small-loop-variable">bugprone-too-small-loop-variable</h1>
<p>Detects those <code>for</code> loops that have a loop variable with a "too small" type which means this type can't represent all values which are part of the iteration range.</p>
<pre class="c++"><code>int main() {
  long size = 294967296l;
  for (short i = 0; i &lt; size; ++i) {}
}</code></pre>
<p>This <code>for</code> loop is an infinite loop because the <code>short</code> type can't represent all values in the <code>[0..size]</code> interval.</p>
<p>In a real use case size means a container's size which depends on the user input.</p>
<pre class="c++"><code>int doSomething(const std::vector&amp; items) {
  for (short i = 0; i &lt; items.size(); ++i) {}
}</code></pre>
<p>This algorithm works for a small amount of objects, but will lead to freeze for a larger user input.</p>
<div class="option">
<p>MagnitudeBitsUpperLimit</p>
<p>Upper limit for the magnitude bits of the loop variable. If it's set the check filters out those catches in which the loop variable's type has more magnitude bits as the specified upper limit. The default value is 16. For example, if the user sets this option to 31 (bits), then a 32-bit <code>unsigned int</code> is ignored by the check, however a 32-bit <code>int</code> is not (A 32-bit <code>signed int</code> has 31 magnitude bits).</p>
</div>
<pre class="c++"><code>int main() {
  long size = 294967296l;
  for (unsigned i = 0; i &lt; size; ++i) {} // no warning with MagnitudeBitsUpperLimit = 31 on a system where unsigned is 32-bit
  for (int i = 0; i &lt; size; ++i) {} // warning with MagnitudeBitsUpperLimit = 31 on a system where int is 32-bit
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/too-small-loop-variable.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-unchecked-optional-access</key>
    <name>bugprone-unchecked-optional-access</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unchecked-optional-access</p>
</div>
<h1 id="bugprone-unchecked-optional-access">bugprone-unchecked-optional-access</h1>
<p><em>Note</em>: This check uses a flow-sensitive static analysis to produce its results. Therefore, it may be more resource intensive (RAM, CPU) than the average clang-tidy check.</p>
<p>This check identifies unsafe accesses to values contained in <code>std::optional&lt;T&gt;</code>, <code>absl::optional&lt;T&gt;</code>, <code>base::Optional&lt;T&gt;</code>, or <code>folly::Optional&lt;T&gt;</code> objects. Below we will refer to all these types collectively as <code>optional&lt;T&gt;</code>.</p>
<p>An access to the value of an <code>optional&lt;T&gt;</code> occurs when one of its <code>value</code>, <code>operator*</code>, or <code>operator-&gt;</code> member functions is invoked. To align with common misconceptions, the check considers these member functions as equivalent, even though there are subtle differences related to exceptions versus undefined behavior. See <em>Additional notes</em>, below, for more information on this topic.</p>
<p>An access to the value of an <code>optional&lt;T&gt;</code> is considered safe if and only if code in the local scope (for example, a function body) ensures that the <code>optional&lt;T&gt;</code> has a value in all possible execution paths that can reach the access. That should happen either through an explicit check, using the <code>optional&lt;T&gt;::has_value</code> member function, or by constructing the <code>optional&lt;T&gt;</code> in a way that shows that it unambiguously holds a value (e.g using <code>std::make_optional</code> which always returns a populated <code>std::optional&lt;T&gt;</code>).</p>
<p>Below we list some examples, starting with unsafe optional access patterns, followed by safe access patterns.</p>
<h2 id="unsafe-access-patterns">Unsafe access patterns</h2>
<h3 id="access-the-value-without-checking-if-it-exists">Access the value without checking if it exists</h3>
<p>The check flags accesses to the value that are not locally guarded by existence check:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt) {
  use(*opt); // unsafe: it is unclear whether `opt` has a value.
}</code></pre>
<h3 id="access-the-value-in-the-wrong-branch">Access the value in the wrong branch</h3>
<p>The check is aware of the state of an optional object in different branches of the code. For example:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt) {
  if (opt.has_value()) {
  } else {
    use(opt.value()); // unsafe: it is clear that `opt` does *not* have a value.
  }
}</code></pre>
<h3 id="assume-a-function-result-to-be-stable">Assume a function result to be stable</h3>
<p>The check is aware that function results might not be stable. That is, consecutive calls to the same function might return different values. For example:</p>
<pre class="c++"><code>void f(Foo foo) {
  if (foo.opt().has_value()) {
    use(*foo.opt()); // unsafe: it is unclear whether `foo.opt()` has a value.
  }
}</code></pre>
<h3 id="rely-on-invariants-of-uncommon-apis">Rely on invariants of uncommon APIs</h3>
<p>The check is unaware of invariants of uncommon APIs. For example:</p>
<pre class="c++"><code>void f(Foo foo) {
  if (foo.HasProperty(&quot;bar&quot;)) {
    use(*foo.GetProperty(&quot;bar&quot;)); // unsafe: it is unclear whether `foo.GetProperty(&quot;bar&quot;)` has a value.
  }
}</code></pre>
<h3 id="check-if-a-value-exists-then-pass-the-optional-to-another-function">Check if a value exists, then pass the optional to another function</h3>
<p>The check relies on local reasoning. The check and value access must both happen in the same function. An access is considered unsafe even if the caller of the function performing the access ensures that the optional has a value. For example:</p>
<pre class="c++"><code>void g(std::optional&lt;int&gt; opt) {
  use(*opt); // unsafe: it is unclear whether `opt` has a value.
}

void f(std::optional&lt;int&gt; opt) {
  if (opt.has_value()) {
    g(opt);
  }
}</code></pre>
<h2 id="safe-access-patterns">Safe access patterns</h2>
<h3 id="check-if-a-value-exists-then-access-the-value">Check if a value exists, then access the value</h3>
<p>The check recognizes all straightforward ways for checking if a value exists and accessing the value contained in an optional object. For example:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt) {
  if (opt.has_value()) {
    use(*opt);
  }
}</code></pre>
<h3 id="check-if-a-value-exists-then-access-the-value-from-a-copy">Check if a value exists, then access the value from a copy</h3>
<p>The criteria that the check uses is semantic, not syntactic. It recognizes when a copy of the optional object being accessed is known to have a value. For example:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt1) {
  if (opt1.has_value()) {
    std::optional&lt;int&gt; opt2 = opt1;
    use(*opt2);
  }
}</code></pre>
<h3 id="ensure-that-a-value-exists-using-common-macros">Ensure that a value exists using common macros</h3>
<p>The check is aware of common macros like <code>CHECK</code> and <code>DCHECK</code>. Those can be used to ensure that an optional object has a value. For example:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt) {
  DCHECK(opt.has_value());
  use(*opt);
}</code></pre>
<h3 id="ensure-that-a-value-exists-then-access-the-value-in-a-correlated-branch">Ensure that a value exists, then access the value in a correlated branch</h3>
<p>The check is aware of correlated branches in the code and can figure out when an optional object is ensured to have a value on all execution paths that lead to an access. For example:</p>
<pre class="c++"><code>void f(std::optional&lt;int&gt; opt) {
  bool safe = false;
  if (opt.has_value() &amp;&amp; SomeOtherCondition()) {
    safe = true;
  }
  // ... more code...
  if (safe) {
    use(*opt);
  }
}</code></pre>
<h2 id="stabilize-function-results">Stabilize function results</h2>
<p>Since function results are not assumed to be stable across calls, it is best to store the result of the function call in a local variable and use that variable to access the value. For example:</p>
<pre class="c++"><code>void f(Foo foo) {
  if (const auto&amp; foo_opt = foo.opt(); foo_opt.has_value()) {
    use(*foo_opt);
  }
}</code></pre>
<h2 id="do-not-rely-on-uncommon-api-invariants">Do not rely on uncommon-API invariants</h2>
<p>When uncommon APIs guarantee that an optional has contents, do not rely on it --instead, check explicitly that the optional object has a value. For example:</p>
<pre class="c++"><code>void f(Foo foo) {
  if (const auto&amp; property = foo.GetProperty(&quot;bar&quot;)) {
    use(*property);
  }
}</code></pre>
<p>instead of the <span class="title-ref">HasProperty</span>, <span class="title-ref">GetProperty</span> pairing we saw above.</p>
<h2 id="do-not-rely-on-caller-performed-checks">Do not rely on caller-performed checks</h2>
<p>If you know that all of a function's callers have checked that an optional argument has a value, either change the function to take the value directly or check the optional again in the local scope of the callee. For example:</p>
<pre class="c++"><code>void g(int val) {
  use(val);
}

void f(std::optional&lt;int&gt; opt) {
  if (opt.has_value()) {
    g(*opt);
  }
}</code></pre>
<p>and</p>
<pre class="c++"><code>struct S {
  std::optional&lt;int&gt; opt;
  int x;
};

void g(const S &amp;s) {
  if (s.opt.has_value() &amp;&amp; s.x &gt; 10) {
    use(*s.opt);
}

void f(S s) {
  if (s.opt.has_value()) {
    g(s);
  }
}</code></pre>
<h2 id="additional-notes">Additional notes</h2>
<h3 id="aliases-created-via-using-declarations">Aliases created via <code>using</code> declarations</h3>
<p>The check is aware of aliases of optional types that are created via <code>using</code> declarations. For example:</p>
<pre class="c++"><code>using OptionalInt = std::optional&lt;int&gt;;

void f(OptionalInt opt) {
  use(opt.value()); // unsafe: it is unclear whether `opt` has a value.
}</code></pre>
<h3 id="lambdas">Lambdas</h3>
<p>The check does not currently report unsafe optional accesses in lambdas. A future version will expand the scope to lambdas, following the rules outlined above. It is best to follow the same principles when using optionals in lambdas.</p>
<h3 id="access-with-operator-vs.-value">Access with <code>operator*()</code> vs. <code>value()</code></h3>
<p>Given that <code>value()</code> has well-defined behavior (either throwing an exception or terminating the program), why treat it the same as <code>operator*()</code> which causes undefined behavior (UB)? That is, why is it considered unsafe to access an optional with <code>value()</code>, if it's not provably populated with a value? For that matter, why is <code>CHECK()</code> followed by <code>operator*()</code> any better than <code>value()</code>, given that they are semantically equivalent (on configurations that disable exceptions)?</p>
<p>The answer is that we assume most users do not realize the difference between <code>value()</code> and <code>operator*()</code>. Shifting to <code>operator*()</code> and some form of explicit value-presence check or explicit program termination has two advantages:</p>
<blockquote>
<ul>
<li>Readability. The check, and any potential side effects like program shutdown, are very clear in the code. Separating access from checks can actually make the checks more obvious.</li>
<li>Performance. A single check can cover many or even all accesses within scope. This gives the user the best of both worlds -- the safety of a dynamic check, but without incurring redundant costs.</li>
</ul>
</blockquote>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unchecked-optional-access.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-undefined-memory-manipulation</key>
    <name>bugprone-undefined-memory-manipulation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-undefined-memory-manipulation</p>
</div>
<h1 id="bugprone-undefined-memory-manipulation">bugprone-undefined-memory-manipulation</h1>
<p>Finds calls of memory manipulation functions <code>memset()</code>, <code>memcpy()</code> and <code>memmove()</code> on non-TriviallyCopyable objects resulting in undefined behavior.</p>
<p>Using memory manipulation functions on non-TriviallyCopyable objects can lead to a range of subtle and challenging issues in C++ code. The most immediate concern is the potential for undefined behavior, where the state of the object may become corrupted or invalid. This can manifest as crashes, data corruption, or unexpected behavior at runtime, making it challenging to identify and diagnose the root cause. Additionally, misuse of memory manipulation functions can bypass essential object-specific operations, such as constructors and destructors, leading to resource leaks or improper initialization.</p>
<p>For example, when using <code>memcpy</code> to copy <code>std::string</code>, pointer data is being copied, and it can result in a double free issue.</p>
<pre class="c++"><code>#include &lt;cstring&gt;
#include &lt;string&gt;

int main() {
    std::string source = &quot;Hello&quot;;
    std::string destination;

    std::memcpy(&amp;destination, &amp;source, sizeof(std::string));

    // Undefined behavior may occur here, during std::string destructor call.
    return 0;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/undefined-memory-manipulation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-undelegated-constructor</key>
    <name>bugprone-undelegated-constructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-undelegated-constructor</p>
</div>
<h1 id="bugprone-undelegated-constructor">bugprone-undelegated-constructor</h1>
<p>Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class.</p>
<p>The user most likely meant to use a delegating constructor or base class initializer.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/undelegated-constructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-unhandled-exception-at-new</key>
    <name>bugprone-unhandled-exception-at-new</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unhandled-exception-at-new</p>
</div>
<h1 id="bugprone-unhandled-exception-at-new">bugprone-unhandled-exception-at-new</h1>
<p>Finds calls to <code>new</code> with missing exception handler for <code>std::bad_alloc</code>.</p>
<p>Calls to <code>new</code> may throw exceptions of type <code>std::bad_alloc</code> that should be handled. Alternatively, the nonthrowing form of <code>new</code> can be used. The check verifies that the exception is handled in the function that calls <code>new</code>.</p>
<p>If a nonthrowing version is used or the exception is allowed to propagate out of the function no warning is generated.</p>
<p>The exception handler is checked if it catches a <code>std::bad_alloc</code> or <code>std::exception</code> exception type, or all exceptions (catch-all). The check assumes that any user-defined <code>operator new</code> is either <code>noexcept</code> or may throw an exception of type <code>std::bad_alloc</code> (or one derived from it). Other exception class types are not taken into account.</p>
<pre class="c++"><code>int *f() noexcept {
  int *p = new int[1000]; // warning: missing exception handler for allocation failure at &#39;new&#39;
  // ...
  return p;
}</code></pre>
<pre class="c++"><code>int *f1() { // not &#39;noexcept&#39;
  int *p = new int[1000]; // no warning: exception can be handled outside
                          // of this function
  // ...
  return p;
}

int *f2() noexcept {
  try {
    int *p = new int[1000]; // no warning: exception is handled
    // ...
    return p;
  } catch (std::bad_alloc &amp;) {
    // ...
  }
  // ...
}
int *f3() noexcept {
  int *p = new (std::nothrow) int[1000]; // no warning: &quot;nothrow&quot; is used
  // ...
  return p;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unhandled-exception-at-new.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-unhandled-self-assignment</key>
    <name>bugprone-unhandled-self-assignment</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unhandled-self-assignment</p>
</div>
<h1 id="bugprone-unhandled-self-assignment">bugprone-unhandled-self-assignment</h1>
<p><span class="title-ref">cert-oop54-cpp</span> redirects here as an alias for this check. For the CERT alias, the <span class="title-ref">WarnOnlyIfThisHasSuspiciousField</span> option is set to <span class="title-ref">false</span>.</p>
<p>Finds user-defined copy assignment operators which do not protect the code against self-assignment either by checking self-assignment explicitly or using the copy-and-swap or the copy-and-move method.</p>
<p>By default, this check searches only those classes which have any pointer or C array field to avoid false positives. In case of a pointer or a C array, it's likely that self-copy assignment breaks the object if the copy assignment operator was not written with care.</p>
<p>See also: <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP54-CPP.+Gracefully+handle+self-copy+assignment">OOP54-CPP. Gracefully handle self-copy assignment</a></p>
<p>A copy assignment operator must prevent that self-copy assignment ruins the object state. A typical use case is when the class has a pointer field and the copy assignment operator first releases the pointed object and then tries to assign it:</p>
<pre class="c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    delete p;
    p = new int(*rhs.p);
    return *this;
  }
};</code></pre>
<p>There are two common C++ patterns to avoid this problem. The first is the self-assignment check:</p>
<pre class="c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    if(this == &amp;rhs)
      return *this;

    delete p;
    p = new int(*rhs.p);
    return *this;
  }
};</code></pre>
<p>The second one is the copy-and-swap method when we create a temporary copy (using the copy constructor) and then swap this temporary object with <code>this</code>:</p>
<pre class="c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  void swap(T &amp;rhs) {
    using std::swap;
    swap(p, rhs.p);
  }

  T&amp; operator=(const T &amp;rhs) {
    T(rhs).swap(*this);
    return *this;
  }
};</code></pre>
<p>There is a third pattern which is less common. Let's call it the copy-and-move method when we create a temporary copy (using the copy constructor) and then move this temporary object into <code>this</code> (needs a move assignment operator):</p>
<pre class="c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    T t = rhs;
    *this = std::move(t);
    return *this;
  }

  T&amp; operator=(T &amp;&amp;rhs) {
    p = rhs.p;
    rhs.p = nullptr;
    return *this;
  }
};</code></pre>
<div class="option">
<p>WarnOnlyIfThisHasSuspiciousField</p>
<p>When <span class="title-ref">true</span>, the check will warn only if the container class of the copy assignment operator has any suspicious fields (pointer or C array). This option is set to <span class="title-ref">true</span> by default.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unhandled-self-assignment.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-unique-ptr-array-mismatch</key>
    <name>bugprone-unique-ptr-array-mismatch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unique-ptr-array-mismatch</p>
</div>
<h1 id="bugprone-unique-ptr-array-mismatch">bugprone-unique-ptr-array-mismatch</h1>
<p>Finds initializations of C++ unique pointers to non-array type that are initialized with an array.</p>
<p>If a pointer <code>std::unique_ptr&lt;T&gt;</code> is initialized with a new-expression <code>new T[]</code> the memory is not deallocated correctly. A plain <code>delete</code> is used in this case to deallocate the target memory. Instead a <code>delete[]</code> call is needed. A <code>std::unique_ptr&lt;T[]&gt;</code> uses the correct delete operator. The check does not emit warning if an <code>unique_ptr</code> with user-specified deleter type is used.</p>
<p>The check offers replacement of <code>unique_ptr&lt;T&gt;</code> to <code>unique_ptr&lt;T[]&gt;</code> if it is used at a single variable declaration (one variable in one statement).</p>
<p>Example:</p>
<pre class="c++"><code>std::unique_ptr&lt;Foo&gt; x(new Foo[10]); // -&gt; std::unique_ptr&lt;Foo[]&gt; x(new Foo[10]);
//                     ^ warning: unique pointer to non-array is initialized with array
std::unique_ptr&lt;Foo&gt; x1(new Foo), x2(new Foo[10]); // no replacement
//                                   ^ warning: unique pointer to non-array is initialized with array

D d;
std::unique_ptr&lt;Foo, D&gt; x3(new Foo[10], d); // no warning (custom deleter used)

struct S {
  std::unique_ptr&lt;Foo&gt; x(new Foo[10]); // no replacement in this case
  //                     ^ warning: unique pointer to non-array is initialized with array
};</code></pre>
<p>This check partially covers the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM51-CPP.+Properly+deallocate+dynamically+allocated+resources">MEM51-CPP. Properly deallocate dynamically allocated resources</a> However, only the <code>std::unique_ptr</code> case is detected by this check.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unique-ptr-array-mismatch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-unsafe-functions</key>
    <name>bugprone-unsafe-functions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unsafe-functions</p>
</div>
<h1 id="bugprone-unsafe-functions">bugprone-unsafe-functions</h1>
<p>Checks for functions that have safer, more secure replacements available, or are considered deprecated due to design flaws. The check heavily relies on the functions from the <strong>Annex K.</strong> "Bounds-checking interfaces" of C11.</p>
<dl>
<dt>The check implements the following rules from the CERT C Coding Standard:</dt>
<dd><ul>
<li>Recommendation <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC24-C.+Do+not+use+deprecated+or+obsolescent+functions">MSC24-C. Do not use deprecated or obsolescent functions</a>.</li>
<li>Rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC33-C.+Do+not+pass+invalid+data+to+the+asctime%28%29+function">MSC33-C. Do not pass invalid data to the asctime() function</a>.</li>
</ul>
</dd>
</dl>
<p><span class="title-ref">cert-msc24-c</span> and <span class="title-ref">cert-msc33-c</span> redirect here as aliases of this check.</p>
<h2 id="unsafe-functions">Unsafe functions</h2>
<p>If <em>Annex K.</em> is available, a replacement from <em>Annex K.</em> is suggested for the following functions:</p>
<p><code>asctime</code>, <code>asctime_r</code>, <code>bsearch</code>, <code>ctime</code>, <code>fopen</code>, <code>fprintf</code>, <code>freopen</code>, <code>fscanf</code>, <code>fwprintf</code>, <code>fwscanf</code>, <code>getenv</code>, <code>gets</code>, <code>gmtime</code>, <code>localtime</code>, <code>mbsrtowcs</code>, <code>mbstowcs</code>, <code>memcpy</code>, <code>memmove</code>, <code>memset</code>, <code>printf</code>, <code>qsort</code>, <code>scanf</code>, <code>snprintf</code>, <code>sprintf</code>, <code>sscanf</code>, <code>strcat</code>, <code>strcpy</code>, <code>strerror</code>, <code>strlen</code>, <code>strncat</code>, <code>strncpy</code>, <code>strtok</code>, <code>swprintf</code>, <code>swscanf</code>, <code>vfprintf</code>, <code>vfscanf</code>, <code>vfwprintf</code>, <code>vfwscanf</code>, <code>vprintf</code>, <code>vscanf</code>, <code>vsnprintf</code>, <code>vsprintf</code>, <code>vsscanf</code>, <code>vswprintf</code>, <code>vswscanf</code>, <code>vwprintf</code>, <code>vwscanf</code>, <code>wcrtomb</code>, <code>wcscat</code>, <code>wcscpy</code>, <code>wcslen</code>, <code>wcsncat</code>, <code>wcsncpy</code>, <code>wcsrtombs</code>, <code>wcstok</code>, <code>wcstombs</code>, <code>wctomb</code>, <code>wmemcpy</code>, <code>wmemmove</code>, <code>wprintf</code>, <code>wscanf</code>.</p>
<p>If <em>Annex K.</em> is not available, replacements are suggested only for the following functions from the previous list:</p>
<blockquote>
<ul>
<li><code>asctime</code>, <code>asctime_r</code>, suggested replacement: <code>strftime</code></li>
<li><code>gets</code>, suggested replacement: <code>fgets</code></li>
</ul>
</blockquote>
<p>The following functions are always checked, regardless of <em>Annex K</em> availability:</p>
<blockquote>
<ul>
<li><code>rewind</code>, suggested replacement: <code>fseek</code></li>
<li><code>setbuf</code>, suggested replacement: <code>setvbuf</code></li>
</ul>
</blockquote>
<p>If <a href="unsafe-functions.html#cmdoption-arg-ReportMoreUnsafeFunctions">ReportMoreUnsafeFunctions</a> is enabled, the following functions are also checked:</p>
<blockquote>
<ul>
<li><code>bcmp</code>, suggested replacement: <code>memcmp</code></li>
<li><code>bcopy</code>, suggested replacement: <code>memcpy_s</code> if <em>Annex K</em> is available, or <code>memcpy</code></li>
<li><code>bzero</code>, suggested replacement: <code>memset_s</code> if <em>Annex K</em> is available, or <code>memset</code></li>
<li><code>getpw</code>, suggested replacement: <code>getpwuid</code></li>
<li><code>vfork</code>, suggested replacement: <code>posix_spawn</code></li>
</ul>
</blockquote>
<p>Although mentioned in the associated CERT rules, the following functions are <strong>ignored</strong> by the check:</p>
<p><code>atof</code>, <code>atoi</code>, <code>atol</code>, <code>atoll</code>, <code>tmpfile</code>.</p>
<p>The availability of <em>Annex K</em> is determined based on the following macros:</p>
<blockquote>
<ul>
<li><code>__STDC_LIB_EXT1__</code>: feature macro, which indicates the presence of <em>Annex K. "Bounds-checking interfaces"</em> in the library implementation</li>
<li><code>__STDC_WANT_LIB_EXT1__</code>: user-defined macro, which indicates that the user requests the functions from <em>Annex K.</em> to be defined.</li>
</ul>
</blockquote>
<p>Both macros have to be defined to suggest replacement functions from <em>Annex K.</em> <code>__STDC_LIB_EXT1__</code> is defined by the library implementation, and <code>__STDC_WANT_LIB_EXT1__</code> must be defined to <code>1</code> by the user <strong>before</strong> including any system headers.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>ReportMoreUnsafeFunctions</p>
<p>When <span class="title-ref">true</span>, additional functions from widely used APIs (such as POSIX) are added to the list of reported functions. See the main documentation of the check for the complete list as to what this option enables. Default is <span class="title-ref">true</span>.</p>
</div>
<h2 id="examples">Examples</h2>
<pre class="c++"><code>#ifndef __STDC_LIB_EXT1__
#error &quot;Annex K is not supported by the current standard library implementation.&quot;
#endif

#define __STDC_WANT_LIB_EXT1__ 1

#include &lt;string.h&gt; // Defines functions from Annex K.
#include &lt;stdio.h&gt;

enum { BUFSIZE = 32 };

void Unsafe(const char *Msg) {
  static const char Prefix[] = &quot;Error: &quot;;
  static const char Suffix[] = &quot;\n&quot;;
  char Buf[BUFSIZE] = {0};

  strcpy(Buf, Prefix); // warning: function &#39;strcpy&#39; is not bounds-checking; &#39;strcpy_s&#39; should be used instead.
  strcat(Buf, Msg);    // warning: function &#39;strcat&#39; is not bounds-checking; &#39;strcat_s&#39; should be used instead.
  strcat(Buf, Suffix); // warning: function &#39;strcat&#39; is not bounds-checking; &#39;strcat_s&#39; should be used instead.
  if (fputs(buf, stderr) &lt; 0) {
    // error handling
    return;
  }
}

void UsingSafeFunctions(const char *Msg) {
  static const char Prefix[] = &quot;Error: &quot;;
  static const char Suffix[] = &quot;\n&quot;;
  char Buf[BUFSIZE] = {0};

  if (strcpy_s(Buf, BUFSIZE, Prefix) != 0) {
    // error handling
    return;
  }

  if (strcat_s(Buf, BUFSIZE, Msg) != 0) {
    // error handling
    return;
  }

  if (strcat_s(Buf, BUFSIZE, Suffix) != 0) {
    // error handling
    return;
  }

  if (fputs(Buf, stderr) &lt; 0) {
    // error handling
    return;
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unsafe-functions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-unused-local-non-trivial-variable</key>
    <name>bugprone-unused-local-non-trivial-variable</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unused-local-non-trivial-variable</p>
</div>
<h1 id="bugprone-unused-local-non-trivial-variable">bugprone-unused-local-non-trivial-variable</h1>
<p>Warns when a local non trivial variable is unused within a function. The following types of variables are excluded from this check:</p>
<ul>
<li>trivial and trivially copyable</li>
<li>references and pointers</li>
<li>exception variables in catch clauses</li>
<li>static or thread local</li>
<li>structured bindings</li>
</ul>
<p>This check can be configured to warn on all non-trivial variables by setting <span class="title-ref">IncludeTypes</span> to <span class="title-ref">.*</span>, and excluding specific types using <span class="title-ref">ExcludeTypes</span>.</p>
<p>In the this example, <span class="title-ref">my_lock</span> would generate a warning that it is unused.</p>
<pre class="c++"><code>std::mutex my_lock;
// my_lock local variable is never used</code></pre>
<p>In the next example, <span class="title-ref">future2</span> would generate a warning that it is unused.</p>
<pre class="c++"><code>std::future&lt;MyObject&gt; future1;
std::future&lt;MyObject&gt; future2;
// ...
MyObject foo = future1.get();
// future2 is not used.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeTypes</p>
<p>Semicolon-separated list of regular expressions matching types of variables to check. By default the following types are checked:</p>
<ul>
<li><span class="title-ref">::std::.*mutex</span></li>
<li><span class="title-ref">::std::future</span></li>
<li><span class="title-ref">::std::basic_string</span></li>
<li><span class="title-ref">::std::basic_regex</span></li>
<li><span class="title-ref">::std::basic_istringstream</span></li>
<li><span class="title-ref">::std::basic_stringstream</span></li>
<li><span class="title-ref">::std::bitset</span></li>
<li><span class="title-ref">::std::filesystem::path</span></li>
</ul>
</div>
<div class="option">
<p>ExcludeTypes</p>
<p>A semicolon-separated list of regular expressions matching types that are excluded from the <span class="title-ref">IncludeTypes</span> matches. By default it is an empty list.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unused-local-non-trivial-variable.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>bugprone-unused-raii</key>
    <name>bugprone-unused-raii</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unused-raii</p>
</div>
<h1 id="bugprone-unused-raii">bugprone-unused-raii</h1>
<p>Finds temporaries that look like RAII objects.</p>
<p>The canonical example for this is a scoped lock.</p>
<pre class="c++"><code>{
  scoped_lock(&amp;global_mutex);
  critical_section();
}</code></pre>
<p>The destructor of the scoped_lock is called before the <code>critical_section</code> is entered, leaving it unprotected.</p>
<p>We apply a number of heuristics to reduce the false positive count of this check:</p>
<ul>
<li>Ignore code expanded from macros. Testing frameworks make heavy use of this.</li>
<li>Ignore types with trivial destructors. They are very unlikely to be RAII objects and there's no difference when they are deleted.</li>
<li>Ignore objects at the end of a compound statement (doesn't change behavior).</li>
<li>Ignore objects returned from a call.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unused-raii.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-unused-return-value</key>
    <name>bugprone-unused-return-value</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-unused-return-value</p>
</div>
<h1 id="bugprone-unused-return-value">bugprone-unused-return-value</h1>
<p>Warns on unused function return values. The checked functions can be configured.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckedFunctions</p>
<p>Semicolon-separated list of functions to check. The function is checked if the name and scope matches, with any arguments. By default the following functions are checked: <code>std::async, std::launder, std::remove, std::remove_if, std::unique, std::unique_ptr::release, std::basic_string::empty, std::vector::empty, std::back_inserter, std::distance, std::find, std::find_if, std::inserter, std::lower_bound, std::make_pair, std::map::count, std::map::find, std::map::lower_bound, std::multimap::equal_range, std::multimap::upper_bound, std::set::count, std::set::find, std::setfill, std::setprecision, std::setw, std::upper_bound, std::vector::at, bsearch, ferror, feof, isalnum, isalpha, isblank, iscntrl, isdigit, isgraph, islower, isprint, ispunct, isspace, isupper, iswalnum, iswprint, iswspace, isxdigit, memchr, memcmp, strcmp, strcoll, strncmp, strpbrk, strrchr, strspn, strstr, wcscmp, access, bind, connect, difftime, dlsym, fnmatch, getaddrinfo, getopt, htonl, htons, iconv_open, inet_addr, isascii, isatty, mmap, newlocale, openat, pathconf, pthread_equal, pthread_getspecific, pthread_mutex_trylock, readdir, readlink, recvmsg, regexec, scandir, semget, setjmp, shm_open, shmget, sigismember, strcasecmp, strsignal, ttyname</code></p>
<ul>
<li><code>std::async()</code>. Not using the return value makes the call synchronous.</li>
<li><code>std::launder()</code>. Not using the return value usually means that the function interface was misunderstood by the programmer. Only the returned pointer is "laundered", not the argument.</li>
<li><code>std::remove()</code>, <code>std::remove_if()</code> and <code>std::unique()</code>. The returned iterator indicates the boundary between elements to keep and elements to be removed. Not using the return value means that the information about which elements to remove is lost.</li>
<li><code>std::unique_ptr::release()</code>. Not using the return value can lead to resource leaks if the same pointer isn't stored anywhere else. Often, ignoring the <code>release()</code> return value indicates that the programmer confused the function with <code>reset()</code>.</li>
<li><code>std::basic_string::empty()</code> and <code>std::vector::empty()</code>. Not using the return value often indicates that the programmer confused the function with <code>clear()</code>.</li>
</ul>
</div>
<div class="option">
<p>CheckedReturnTypes</p>
<p>Semicolon-separated list of function return types to check. By default the following function return types are checked: <span class="title-ref">::std::error_code</span>, <span class="title-ref">::std::error_condition</span>, <span class="title-ref">::std::errc</span>, <span class="title-ref">::std::expected</span>, <span class="title-ref">::boost::system::error_code</span></p>
</div>
<div class="option">
<p>AllowCastToVoid</p>
<p>Controls whether casting return values to <code>void</code> is permitted. Default: <span class="title-ref">false</span>.</p>
</div>
<p><code class="interpreted-text" role="doc">cert-err33-c &lt;../cert/err33-c&gt;</code> is an alias of this check that checks a fixed and large set of standard library functions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/unused-return-value.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>bugprone-use-after-move</key>
    <name>bugprone-use-after-move</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-use-after-move</p>
</div>
<h1 id="bugprone-use-after-move">bugprone-use-after-move</h1>
<p>Warns if an object is used after it has been moved, for example:</p>
<pre class="c++"><code>std::string str = &quot;Hello, world!\n&quot;;
std::vector&lt;std::string&gt; messages;
messages.emplace_back(std::move(str));
std::cout &lt;&lt; str;</code></pre>
<p>The last line will trigger a warning that <code>str</code> is used after it has been moved.</p>
<p>The check does not trigger a warning if the object is reinitialized after the move and before the use. For example, no warning will be output for this code:</p>
<pre class="c++"><code>messages.emplace_back(std::move(str));
str = &quot;Greetings, stranger!\n&quot;;
std::cout &lt;&lt; str;</code></pre>
<p>Subsections below explain more precisely what exactly the check considers to be a move, use, and reinitialization.</p>
<p>The check takes control flow into account. A warning is only emitted if the use can be reached from the move. This means that the following code does not produce a warning:</p>
<pre class="c++"><code>if (condition) {
  messages.emplace_back(std::move(str));
} else {
  std::cout &lt;&lt; str;
}</code></pre>
<p>On the other hand, the following code does produce a warning:</p>
<pre class="c++"><code>for (int i = 0; i &lt; 10; ++i) {
  std::cout &lt;&lt; str;
  messages.emplace_back(std::move(str));
}</code></pre>
<p>(The use-after-move happens on the second iteration of the loop.)</p>
<p>In some cases, the check may not be able to detect that two branches are mutually exclusive. For example (assuming that <code>i</code> is an int):</p>
<pre class="c++"><code>if (i == 1) {
  messages.emplace_back(std::move(str));
}
if (i == 2) {
  std::cout &lt;&lt; str;
}</code></pre>
<p>In this case, the check will erroneously produce a warning, even though it is not possible for both the move and the use to be executed. More formally, the analysis is <a href="https://en.wikipedia.org/wiki/Data-flow_analysis#Sensitivities">flow-sensitive but not path-sensitive</a>.</p>
<h2 id="silencing-erroneous-warnings">Silencing erroneous warnings</h2>
<p>An erroneous warning can be silenced by reinitializing the object after the move:</p>
<pre class="c++"><code>if (i == 1) {
  messages.emplace_back(std::move(str));
  str = &quot;&quot;;
}
if (i == 2) {
  std::cout &lt;&lt; str;
}</code></pre>
<p>If you want to avoid the overhead of actually reinitializing the object, you can create a dummy function that causes the check to assume the object was reinitialized:</p>
<pre class="c++"><code>template &lt;class T&gt;
void IS_INITIALIZED(T&amp;) {}</code></pre>
<p>You can use this as follows:</p>
<pre class="c++"><code>if (i == 1) {
  messages.emplace_back(std::move(str));
}
if (i == 2) {
  IS_INITIALIZED(str);
  std::cout &lt;&lt; str;
}</code></pre>
<p>The check will not output a warning in this case because passing the object to a function as a non-const pointer or reference counts as a reinitialization (see section <a href="#reinitialization">Reinitialization</a> below).</p>
<h2 id="unsequenced-moves-uses-and-reinitializations">Unsequenced moves, uses, and reinitializations</h2>
<p>In many cases, C++ does not make any guarantees about the order in which sub-expressions of a statement are evaluated. This means that in code like the following, it is not guaranteed whether the use will happen before or after the move:</p>
<pre class="c++"><code>void f(int i, std::vector&lt;int&gt; v);
std::vector&lt;int&gt; v = { 1, 2, 3 };
f(v[1], std::move(v));</code></pre>
<p>In this kind of situation, the check will note that the use and move are unsequenced.</p>
<p>The check will also take sequencing rules into account when reinitializations occur in the same statement as moves or uses. A reinitialization is only considered to reinitialize a variable if it is guaranteed to be evaluated after the move and before the use.</p>
<h2 id="move">Move</h2>
<p>The check currently only considers calls of <code>std::move</code> on local variables or function parameters. It does not check moves of member variables or global variables.</p>
<p>Any call of <code>std::move</code> on a variable is considered to cause a move of that variable, even if the result of <code>std::move</code> is not passed to an rvalue reference parameter.</p>
<p>This means that the check will flag a use-after-move even on a type that does not define a move constructor or move assignment operator. This is intentional. Developers may use <code>std::move</code> on such a type in the expectation that the type will add move semantics in the future. If such a <code>std::move</code> has the potential to cause a use-after-move, we want to warn about it even if the type does not implement move semantics yet.</p>
<p>Furthermore, if the result of <code>std::move</code> <em>is</em> passed to an rvalue reference parameter, this will always be considered to cause a move, even if the function that consumes this parameter does not move from it, or if it does so only conditionally. For example, in the following situation, the check will assume that a move always takes place:</p>
<pre class="c++"><code>std::vector&lt;std::string&gt; messages;
void f(std::string &amp;&amp;str) {
  // Only remember the message if it isn&#39;t empty.
  if (!str.empty()) {
    messages.emplace_back(std::move(str));
  }
}
std::string str = &quot;&quot;;
f(std::move(str));</code></pre>
<p>The check will assume that the last line causes a move, even though, in this particular case, it does not. Again, this is intentional.</p>
<p>There is one special case: A call to <code>std::move</code> inside a <code>try_emplace</code> call is conservatively assumed not to move. This is to avoid spurious warnings, as the check has no way to reason about the <code>bool</code> returned by <code>try_emplace</code>.</p>
<p>When analyzing the order in which moves, uses and reinitializations happen (see section <a href="#unsequenced-moves-uses-and-reinitializations">Unsequenced moves, uses, and reinitializations</a>), the move is assumed to occur in whichever function the result of the <code>std::move</code> is passed to.</p>
<h2 id="use">Use</h2>
<p>Any occurrence of the moved variable that is not a reinitialization (see below) is considered to be a use.</p>
<p>An exception to this are objects of type <code>std::unique_ptr</code>, <code>std::shared_ptr</code> and <code>std::weak_ptr</code>, which have defined move behavior (objects of these classes are guaranteed to be empty after they have been moved from). Therefore, an object of these classes will only be considered to be used if it is dereferenced, i.e. if <code>operator*</code>, <code>operator-&gt;</code> or <code>operator[]</code> (in the case of <code>std::unique_ptr&lt;T []&gt;</code>) is called on it.</p>
<p>If multiple uses occur after a move, only the first of these is flagged.</p>
<h2 id="reinitialization">Reinitialization</h2>
<p>The check considers a variable to be reinitialized in the following cases:</p>
<blockquote>
<ul>
<li>The variable occurs on the left-hand side of an assignment.</li>
<li>The variable is passed to a function as a non-const pointer or non-const lvalue reference. (It is assumed that the variable may be an out-parameter for the function.)</li>
<li><code>clear()</code> or <code>assign()</code> is called on the variable and the variable is of one of the standard container types <code>basic_string</code>, <code>vector</code>, <code>deque</code>, <code>forward_list</code>, <code>list</code>, <code>set</code>, <code>map</code>, <code>multiset</code>, <code>multimap</code>, <code>unordered_set</code>, <code>unordered_map</code>, <code>unordered_multiset</code>, <code>unordered_multimap</code>.</li>
<li><code>reset()</code> is called on the variable and the variable is of type <code>std::unique_ptr</code>, <code>std::shared_ptr</code> or <code>std::weak_ptr</code>.</li>
<li>A member function marked with the <code>[[clang::reinitializes]]</code> attribute is called on the variable.</li>
</ul>
</blockquote>
<p>If the variable in question is a struct and an individual member variable of that struct is written to, the check does not consider this to be a reinitialization -- even if, eventually, all member variables of the struct are written to. For example:</p>
<pre class="c++"><code>struct S {
  std::string str;
  int i;
};
S s = { &quot;Hello, world!\n&quot;, 42 };
S s_other = std::move(s);
s.str = &quot;Lorem ipsum&quot;;
s.i = 99;</code></pre>
<p>The check will not consider <code>s</code> to be reinitialized after the last line; instead, the line that assigns to <code>s.str</code> will be flagged as a use-after-move. This is intentional as this pattern of reinitializing a struct is error-prone. For example, if an additional member variable is added to <code>S</code>, it is easy to forget to add the reinitialization for this additional member. Instead, it is safer to assign to the entire struct in one go, and this will also avoid the use-after-move warning.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/use-after-move.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>bugprone-virtual-near-miss</key>
    <name>bugprone-virtual-near-miss</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - bugprone-virtual-near-miss</p>
</div>
<h1 id="bugprone-virtual-near-miss">bugprone-virtual-near-miss</h1>
<p>Warn if a function is a near miss (i.e. the name is very similar and the function signature is the same) to a virtual function from a base class.</p>
<p>Example:</p>
<pre class="c++"><code>struct Base {
  virtual void func();
};

struct Derived : Base {
  virtual void funk();
  // warning: &#39;Derived::funk&#39; has a similar name and the same signature as virtual method &#39;Base::func&#39;; did you mean to override it?
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone/virtual-near-miss.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-con36-c</key>
    <name>cert-con36-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-con36-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/spuriously-wake-up-functions.html">

</div>
<h1 id="cert-con36-c">cert-con36-c</h1>
<p>The <span class="title-ref">cert-con36-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-spuriously-wake-up-functions &lt;../bugprone/spuriously-wake-up-functions&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/con36-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-con54-cpp</key>
    <name>cert-con54-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-con54-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/spuriously-wake-up-functions.html">

</div>
<h1 id="cert-con54-cpp">cert-con54-cpp</h1>
<p>The <span class="title-ref">cert-con54-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-spuriously-wake-up-functions &lt;../bugprone/spuriously-wake-up-functions&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/con54-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-dcl03-c</key>
    <name>cert-dcl03-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl03-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/static-assert.html">

</div>
<h1 id="cert-dcl03-c">cert-dcl03-c</h1>
<p>The <span class="title-ref">cert-dcl03-c</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-static-assert &lt;../misc/static-assert&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl03-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-dcl16-c</key>
    <name>cert-dcl16-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl16-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/uppercase-literal-suffix.html">

</div>
<h1 id="cert-dcl16-c">cert-dcl16-c</h1>
<p>The <span class="title-ref">cert-dcl16-c</span> check is an alias, please see <code class="interpreted-text" role="doc">readability-uppercase-literal-suffix &lt;../readability/uppercase-literal-suffix&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl16-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-dcl21-cpp</key>
    <name>cert-dcl21-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl21-cpp</p>
</div>
<h1 id="cert-dcl21-cpp">cert-dcl21-cpp</h1>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>This check is deprecated since it's no longer part of the CERT standard. It will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19.</p>
</div>
<p>This check flags postfix <code>operator++</code> and <code>operator--</code> declarations if the return type is not a const object. This also warns if the return type is a reference type.</p>
<p>The object returned by a postfix increment or decrement operator is supposed to be a snapshot of the object's value prior to modification. With such an implementation, any modifications made to the resulting object from calling operator++(int) would be modifying a temporary object. Thus, such an implementation of a postfix increment or decrement operator should instead return a const object, prohibiting accidental mutation of a temporary object. Similarly, it is unexpected for the postfix operator to return a reference to its previous state, and any subsequent modifications would be operating on a stale object.</p>
<p>This check corresponds to the CERT C++ Coding Standard recommendation DCL21-CPP. Overloaded postfix increment and decrement operators should return a const object. However, all of the CERT recommendations have been removed from public view, and so their justification for the behavior of this check requires an account on their wiki to view.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl21-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cert-dcl37-c</key>
    <name>cert-dcl37-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl37-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/reserved-identifier.html">

</div>
<h1 id="cert-dcl37-c">cert-dcl37-c</h1>
<p>The <span class="title-ref">cert-dcl37-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-reserved-identifier &lt;../bugprone/reserved-identifier&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl37-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-dcl50-cpp</key>
    <name>cert-dcl50-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl50-cpp</p>
</div>
<h1 id="cert-dcl50-cpp">cert-dcl50-cpp</h1>
<p>This check flags all function definitions (but not declarations) of C-style variadic functions.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL50-CPP.+Do+not+define+a+C-style+variadic+function">DCL50-CPP. Do not define a C-style variadic function</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl50-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-dcl51-cpp</key>
    <name>cert-dcl51-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl51-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/reserved-identifier.html">

</div>
<h1 id="cert-dcl51-cpp">cert-dcl51-cpp</h1>
<p>The <span class="title-ref">cert-dcl51-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-reserved-identifier &lt;../bugprone/reserved-identifier&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl51-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-dcl54-cpp</key>
    <name>cert-dcl54-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl54-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/new-delete-overloads.html">

</div>
<h1 id="cert-dcl54-cpp">cert-dcl54-cpp</h1>
<p>The <span class="title-ref">cert-dcl54-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-new-delete-overloads &lt;../misc/new-delete-overloads&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl54-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-dcl58-cpp</key>
    <name>cert-dcl58-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl58-cpp</p>
</div>
<h1 id="cert-dcl58-cpp">cert-dcl58-cpp</h1>
<p>Modification of the <code>std</code> or <code>posix</code> namespace can result in undefined behavior. This check warns for such modifications. The <code>std</code> (or <code>posix</code>) namespace is allowed to be extended with (class or function) template specializations that depend on an user-defined type (a type that is not defined in the standard system headers).</p>
<p>The check detects the following (user provided) declarations in namespace <code>std</code> or <code>posix</code>:</p>
<ul>
<li>Anything that is not a template specialization.</li>
<li>Explicit specializations of any standard library function template or class template, if it does not have any user-defined type as template argument.</li>
<li>Explicit specializations of any member function of a standard library class template.</li>
<li>Explicit specializations of any member function template of a standard library class or class template.</li>
<li>Explicit or partial specialization of any member class template of a standard library class or class template.</li>
</ul>
<p>Examples:</p>
<pre class="c++"><code>namespace std {
  int x; // warning: modification of &#39;std&#39; namespace can result in undefined behavior [cert-dcl58-cpp]
}
namespace posix::a { // warning: modification of &#39;posix&#39; namespace can result in undefined behavior
}
template &lt;&gt;
struct ::std::hash&lt;long&gt; { // warning: modification of &#39;std&#39; namespace can result in undefined behavior
  unsigned long operator()(const long &amp;K) const {
    return K;
  }
};
struct MyData { long data; };
template &lt;&gt;
struct ::std::hash&lt;MyData&gt; { // no warning: specialization with user-defined type
  unsigned long operator()(const MyData &amp;K) const {
    return K.data;
  }
};
namespace std {
  template &lt;&gt;
  void swap&lt;bool&gt;(bool &amp;a, bool &amp;b); // warning: modification of &#39;std&#39; namespace can result in undefined behavior
  template &lt;&gt;
  bool less&lt;void&gt;::operator()&lt;MyData &amp;&amp;, MyData &amp;&amp;&gt;(MyData &amp;&amp;, MyData &amp;&amp;) const { // warning: modification of &#39;std&#39; namespace can result in undefined behavior
    return true;
  }
}</code></pre>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL58-CPP.+Do+not+modify+the+standard+namespaces">DCL58-CPP. Do not modify the standard namespaces</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl58-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cert-dcl59-cpp</key>
    <name>cert-dcl59-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-dcl59-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../google/build-namespaces.html">

</div>
<h1 id="cert-dcl59-cpp">cert-dcl59-cpp</h1>
<p>The <span class="title-ref">cert-dcl59-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">google-build-namespaces &lt;../google/build-namespaces&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/dcl59-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-env33-c</key>
    <name>cert-env33-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-env33-c</p>
</div>
<h1 id="cert-env33-c">cert-env33-c</h1>
<p>This check flags calls to <code>system()</code>, <code>popen()</code>, and <code>_popen()</code>, which execute a command processor. It does not flag calls to <code>system()</code> with a null pointer argument, as such a call checks for the presence of a command processor but does not actually attempt to execute a command.</p>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132">ENV33-C. Do not call system()</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/env33-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-err09-cpp</key>
    <name>cert-err09-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err09-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/throw-by-value-catch-by-reference.html">

</div>
<h1 id="cert-err09-cpp">cert-err09-cpp</h1>
<p>The <span class="title-ref">cert-err09-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-throw-by-value-catch-by-reference &lt;../misc/throw-by-value-catch-by-reference&gt;</code> for more information.</p>
<p>This check corresponds to the CERT C++ Coding Standard recommendation ERR09-CPP. Throw anonymous temporaries. However, all of the CERT recommendations have been removed from public view, and so their justification for the behavior of this check requires an account on their wiki to view.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err09-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>cert-err33-c</key>
    <name>cert-err33-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err33-c</p>
</div>
<h1 id="cert-err33-c">cert-err33-c</h1>
<p>Warns on unused function return values. Many of the standard library functions return a value that indicates if the call was successful. Ignoring the returned value can cause unexpected behavior if an error has occurred. The following functions are checked:</p>
<ul>
<li>aligned_alloc()</li>
<li>asctime_s()</li>
<li>at_quick_exit()</li>
<li>atexit()</li>
<li>bsearch()</li>
<li>bsearch_s()</li>
<li>btowc()</li>
<li>c16rtomb()</li>
<li>c32rtomb()</li>
<li>calloc()</li>
<li>clock()</li>
<li>cnd_broadcast()</li>
<li>cnd_init()</li>
<li>cnd_signal()</li>
<li>cnd_timedwait()</li>
<li>cnd_wait()</li>
<li>ctime_s()</li>
<li>fclose()</li>
<li>fflush()</li>
<li>fgetc()</li>
<li>fgetpos()</li>
<li>fgets()</li>
<li>fgetwc()</li>
<li>fopen()</li>
<li>fopen_s()</li>
<li>fprintf()</li>
<li>fprintf_s()</li>
<li>fputc()</li>
<li>fputs()</li>
<li>fputwc()</li>
<li>fputws()</li>
<li>fread()</li>
<li>freopen()</li>
<li>freopen_s()</li>
<li>fscanf()</li>
<li>fscanf_s()</li>
<li>fseek()</li>
<li>fsetpos()</li>
<li>ftell()</li>
<li>fwprintf()</li>
<li>fwprintf_s()</li>
<li>fwrite()</li>
<li>fwscanf()</li>
<li>fwscanf_s()</li>
<li>getc()</li>
<li>getchar()</li>
<li>getenv()</li>
<li>getenv_s()</li>
<li>gets_s()</li>
<li>getwc()</li>
<li>getwchar()</li>
<li>gmtime()</li>
<li>gmtime_s()</li>
<li>localtime()</li>
<li>localtime_s()</li>
<li>malloc()</li>
<li>mbrtoc16()</li>
<li>mbrtoc32()</li>
<li>mbsrtowcs()</li>
<li>mbsrtowcs_s()</li>
<li>mbstowcs()</li>
<li>mbstowcs_s()</li>
<li>memchr()</li>
<li>mktime()</li>
<li>mtx_init()</li>
<li>mtx_lock()</li>
<li>mtx_timedlock()</li>
<li>mtx_trylock()</li>
<li>mtx_unlock()</li>
<li>printf_s()</li>
<li>putc()</li>
<li>putwc()</li>
<li>raise()</li>
<li>realloc()</li>
<li>remove()</li>
<li>rename()</li>
<li>setlocale()</li>
<li>setvbuf()</li>
<li>scanf()</li>
<li>scanf_s()</li>
<li>signal()</li>
<li>snprintf()</li>
<li>snprintf_s()</li>
<li>sprintf()</li>
<li>sprintf_s()</li>
<li>sscanf()</li>
<li>sscanf_s()</li>
<li>strchr()</li>
<li>strerror_s()</li>
<li>strftime()</li>
<li>strpbrk()</li>
<li>strrchr()</li>
<li>strstr()</li>
<li>strtod()</li>
<li>strtof()</li>
<li>strtoimax()</li>
<li>strtok()</li>
<li>strtok_s()</li>
<li>strtol()</li>
<li>strtold()</li>
<li>strtoll()</li>
<li>strtoumax()</li>
<li>strtoul()</li>
<li>strtoull()</li>
<li>strxfrm()</li>
<li>swprintf()</li>
<li>swprintf_s()</li>
<li>swscanf()</li>
<li>swscanf_s()</li>
<li>thrd_create()</li>
<li>thrd_detach()</li>
<li>thrd_join()</li>
<li>thrd_sleep()</li>
<li>time()</li>
<li>timespec_get()</li>
<li>tmpfile()</li>
<li>tmpfile_s()</li>
<li>tmpnam()</li>
<li>tmpnam_s()</li>
<li>tss_create()</li>
<li>tss_get()</li>
<li>tss_set()</li>
<li>ungetc()</li>
<li>ungetwc()</li>
<li>vfprintf()</li>
<li>vfprintf_s()</li>
<li>vfscanf()</li>
<li>vfscanf_s()</li>
<li>vfwprintf()</li>
<li>vfwprintf_s()</li>
<li>vfwscanf()</li>
<li>vfwscanf_s()</li>
<li>vprintf_s()</li>
<li>vscanf()</li>
<li>vscanf_s()</li>
<li>vsnprintf()</li>
<li>vsnprintf_s()</li>
<li>vsprintf()</li>
<li>vsprintf_s()</li>
<li>vsscanf()</li>
<li>vsscanf_s()</li>
<li>vswprintf()</li>
<li>vswprintf_s()</li>
<li>vswscanf()</li>
<li>vswscanf_s()</li>
<li>vwprintf_s()</li>
<li>vwscanf()</li>
<li>vwscanf_s()</li>
<li>wcrtomb()</li>
<li>wcschr()</li>
<li>wcsftime()</li>
<li>wcspbrk()</li>
<li>wcsrchr()</li>
<li>wcsrtombs()</li>
<li>wcsrtombs_s()</li>
<li>wcsstr()</li>
<li>wcstod()</li>
<li>wcstof()</li>
<li>wcstoimax()</li>
<li>wcstok()</li>
<li>wcstok_s()</li>
<li>wcstol()</li>
<li>wcstold()</li>
<li>wcstoll()</li>
<li>wcstombs()</li>
<li>wcstombs_s()</li>
<li>wcstoumax()</li>
<li>wcstoul()</li>
<li>wcstoull()</li>
<li>wcsxfrm()</li>
<li>wctob()</li>
<li>wctrans()</li>
<li>wctype()</li>
<li>wmemchr()</li>
<li>wprintf_s()</li>
<li>wscanf()</li>
<li>wscanf_s()</li>
</ul>
<p>This check is an alias of check <code class="interpreted-text" role="doc">bugprone-unused-return-value &lt;../bugprone/unused-return-value&gt;</code> with a fixed set of functions.</p>
<p>Suppressing issues by casting to <code>void</code> is enabled by default and can be disabled by setting <span class="title-ref">AllowCastToVoid</span> option to <code>false</code>.</p>
<p>The check corresponds to a part of CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/ERR33-C.+Detect+and+handle+standard+library+errors">ERR33-C. Detect and handle standard library errors</a>. The list of checked functions is taken from the rule, with following exception:</p>
<ul>
<li>The check can not differentiate if a function is called with <code>NULL</code> argument. Therefore the following functions are not checked: <code>mblen</code>, <code>mbrlen</code>, <code>mbrtowc</code>, <code>mbtowc</code>, <code>wctomb</code>, <code>wctomb_s</code></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err33-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-err34-c</key>
    <name>cert-err34-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err34-c</p>
</div>
<h1 id="cert-err34-c">cert-err34-c</h1>
<p>This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as <code>atoi()</code> or <code>scanf()</code>. It does not flag calls to <code>strtol()</code>, or other, related conversion functions that do perform better error checking.</p>
<pre class="c"><code>#include &lt;stdlib.h&gt;

void func(const char *buff) {
  int si;

  if (buff) {
    si = atoi(buff); /* &#39;atoi&#39; used to convert a string to an integer, but function will
                         not report conversion errors; consider using &#39;strtol&#39; instead. */
  } else {
    /* Handle error */
  }
}</code></pre>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number">ERR34-C. Detect errors when converting a string to a number</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err34-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-err52-cpp</key>
    <name>cert-err52-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err52-cpp</p>
</div>
<h1 id="cert-err52-cpp">cert-err52-cpp</h1>
<p>This check flags all call expressions involving <code>setjmp()</code> and <code>longjmp()</code>.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=1834">ERR52-CPP. Do not use setjmp() or longjmp()</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err52-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-err58-cpp</key>
    <name>cert-err58-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err58-cpp</p>
</div>
<h1 id="cert-err58-cpp">cert-err58-cpp</h1>
<p>This check flags all <code>static</code> or <code>thread_local</code> variable declarations where the initializer for the object may throw an exception.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/ERR58-CPP.+Handle+all+exceptions+thrown+before+main%28%29+begins+executing">ERR58-CPP. Handle all exceptions thrown before main() begins executing</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err58-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-err60-cpp</key>
    <name>cert-err60-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err60-cpp</p>
</div>
<h1 id="cert-err60-cpp">cert-err60-cpp</h1>
<p>This check flags all throw expressions where the exception object is not nothrow copy constructible.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/ERR60-CPP.+Exception+objects+must+be+nothrow+copy+constructible">ERR60-CPP. Exception objects must be nothrow copy constructible</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err60-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-err61-cpp</key>
    <name>cert-err61-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-err61-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/throw-by-value-catch-by-reference.html">

</div>
<h1 id="cert-err61-cpp">cert-err61-cpp</h1>
<p>The <span class="title-ref">cert-err61-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-throw-by-value-catch-by-reference &lt;../misc/throw-by-value-catch-by-reference&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/err61-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>cert-exp42-c</key>
    <name>cert-exp42-c</name>
    <description>
      <![CDATA[<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/suspicious-memory-comparison.html">
</div>
<h1 id="cert-exp42-c">cert-exp42-c</h1>
<p>The <span class="title-ref">cert-exp42-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-suspicious-memory-comparison &lt;../bugprone/suspicious-memory-comparison&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/exp42-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-fio38-c</key>
    <name>cert-fio38-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-fio38-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/non-copyable-objects.html">

</div>
<h1 id="cert-fio38-c">cert-fio38-c</h1>
<p>The <span class="title-ref">cert-fio38-c</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-non-copyable-objects &lt;../misc/non-copyable-objects&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/fio38-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cert-flp30-c</key>
    <name>cert-flp30-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-flp30-c</p>
</div>
<h1 id="cert-flp30-c">cert-flp30-c</h1>
<p>This check flags <code>for</code> loops where the induction expression has a floating-point type.</p>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/FLP30-C.+Do+not+use+floating-point+variables+as+loop+counters">FLP30-C. Do not use floating-point variables as loop counters</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/flp30-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-flp37-c</key>
    <name>cert-flp37-c</name>
    <description>
      <![CDATA[<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/suspicious-memory-comparison.html">
</div>
<h1 id="cert-flp37-c">cert-flp37-c</h1>
<p>The <span class="title-ref">cert-flp37-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-suspicious-memory-comparison &lt;../bugprone/suspicious-memory-comparison&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/flp37-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-mem57-cpp</key>
    <name>cert-mem57-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-mem57-cpp</p>
</div>
<h1 id="cert-mem57-cpp">cert-mem57-cpp</h1>
<p>This check flags uses of default <code>operator new</code> where the type has extended alignment (an alignment greater than the fundamental alignment). (The default <code>operator new</code> is guaranteed to provide the correct alignment if the requested alignment is less or equal to the fundamental alignment). Only cases are detected (by design) where the <code>operator new</code> is not user-defined and is not a placement new (the reason is that in these cases we assume that the user provided the correct memory allocation).</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM57-CPP.+Avoid+using+default+operator+new+for+over-aligned+types">MEM57-CPP. Avoid using default operator new for over-aligned types</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/mem57-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-msc24-c</key>
    <name>cert-msc24-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc24-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/unsafe-functions.html">

</div>
<h1 id="cert-msc24-c">cert-msc24-c</h1>
<p>The <span class="title-ref">cert-msc24-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-unsafe-functions &lt;../bugprone/unsafe-functions&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc24-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc30-c</key>
    <name>cert-msc30-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc30-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cert/msc50-cpp.html">

</div>
<h1 id="cert-msc30-c">cert-msc30-c</h1>
<p>The <span class="title-ref">cert-msc30-c</span> check is an alias, please see <code class="interpreted-text" role="doc">cert-msc50-cpp &lt;../cert/msc50-cpp&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc30-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc32-c</key>
    <name>cert-msc32-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc32-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cert/msc51-cpp.html">

</div>
<h1 id="cert-msc32-c">cert-msc32-c</h1>
<p>The <span class="title-ref">cert-msc32-c</span> check is an alias, please see <code class="interpreted-text" role="doc">cert-msc51-cpp &lt;../cert/msc51-cpp&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc32-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc33-c</key>
    <name>cert-msc33-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc33-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/unsafe-functions.html">

</div>
<h1 id="cert-msc33-c">cert-msc33-c</h1>
<p>The <span class="title-ref">cert-msc33-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-unsafe-functions &lt;../bugprone/unsafe-functions&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc33-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc50-cpp</key>
    <name>cert-msc50-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc50-cpp</p>
</div>
<h1 id="cert-msc50-cpp">cert-msc50-cpp</h1>
<p>Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random. The <code>std::rand()</code> function takes a seed (number), runs a mathematical operation on it and returns the result. By manipulating the seed the result can be predictable. This check warns for the usage of <code>std::rand()</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc50-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc51-cpp</key>
    <name>cert-msc51-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc51-cpp</p>
</div>
<h1 id="cert-msc51-cpp">cert-msc51-cpp</h1>
<p>This check flags all pseudo-random number engines, engine adaptor instantiations and <code>srand()</code> when initialized or seeded with default argument, constant expression or any user-configurable type. Pseudo-random number engines seeded with a predictable value may cause vulnerabilities e.g. in security protocols. This is a CERT security rule, see <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MSC51-CPP.+Ensure+your+random+number+generator+is+properly+seeded">MSC51-CPP. Ensure your random number generator is properly seeded</a> and <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC32-C.+Properly+seed+pseudorandom+number+generators">MSC32-C. Properly seed pseudorandom number generators</a>.</p>
<p>Examples:</p>
<pre class="c++"><code>void foo() {
  std::mt19937 engine1; // Diagnose, always generate the same sequence
  std::mt19937 engine2(1); // Diagnose
  engine1.seed(); // Diagnose
  engine2.seed(1); // Diagnose

  std::time_t t;
  engine1.seed(std::time(&amp;t)); // Diagnose, system time might be controlled by user

  int x = atoi(argv[1]);
  std::mt19937 engine3(x);  // Will not warn
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>DisallowedSeedTypes</p>
<p>A comma-separated list of the type names which are disallowed. Default values are <code>time_t</code>, <code>std::time_t</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc51-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-msc54-cpp</key>
    <name>cert-msc54-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-msc54-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/signal-handler.html">

</div>
<h1 id="cert-msc54-cpp">cert-msc54-cpp</h1>
<p>The <span class="title-ref">cert-msc54-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-signal-handler &lt;../bugprone/signal-handler&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/msc54-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-oop11-cpp</key>
    <name>cert-oop11-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-oop11-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/move-constructor-init.html">

</div>
<h1 id="cert-oop11-cpp">cert-oop11-cpp</h1>
<p>The <span class="title-ref">cert-oop11-cpp check</span> is an alias, please see <code class="interpreted-text" role="doc">performance-move-constructor-init &lt;../performance/move-constructor-init&gt;</code> for more information.</p>
<p>This check corresponds to the CERT C++ Coding Standard recommendation OOP11-CPP. Do not copy-initialize members or base classes from a move constructor. However, all of the CERT recommendations have been removed from public view, and so their justification for the behavior of this check requires an account on their wiki to view.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/oop11-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-oop54-cpp</key>
    <name>cert-oop54-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-oop54-cpp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/unhandled-self-assignment.html">

</div>
<h1 id="cert-oop54-cpp">cert-oop54-cpp</h1>
<p>The <span class="title-ref">cert-oop54-cpp</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-unhandled-self-assignment &lt;../bugprone/unhandled-self-assignment&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/oop54-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-oop57-cpp</key>
    <name>cert-oop57-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-oop57-cpp</p>
</div>
<h1 id="cert-oop57-cpp">cert-oop57-cpp</h1>
<blockquote>
<p>Flags use of the <span class="title-ref">C</span> standard library functions <code>memset</code>, <code>memcpy</code> and <code>memcmp</code> and similar derivatives on non-trivial types.</p>
</blockquote>
<h2 id="options">Options</h2>
<div class="option">
<p>MemSetNames</p>
<p>Specify extra functions to flag that act similarly to <code>memset</code>. Specify names in a semicolon delimited list. Default is an empty string. The check will detect the following functions: <span class="title-ref">memset</span>, <span class="title-ref">std::memset</span>.</p>
</div>
<div class="option">
<p>MemCpyNames</p>
<p>Specify extra functions to flag that act similarly to <code>memcpy</code>. Specify names in a semicolon delimited list. Default is an empty string. The check will detect the following functions: <span class="title-ref">std::memcpy</span>, <span class="title-ref">memcpy</span>, <span class="title-ref">std::memmove</span>, <span class="title-ref">memmove</span>, <span class="title-ref">std::strcpy</span>, <span class="title-ref">strcpy</span>, <span class="title-ref">memccpy</span>, <span class="title-ref">stpncpy</span>, <span class="title-ref">strncpy</span>.</p>
</div>
<div class="option">
<p>MemCmpNames</p>
<p>Specify extra functions to flag that act similarly to <code>memcmp</code>. Specify names in a semicolon delimited list. Default is an empty string. The check will detect the following functions: <span class="title-ref">std::memcmp</span>, <span class="title-ref">memcmp</span>, <span class="title-ref">std::strcmp</span>, <span class="title-ref">strcmp</span>, <span class="title-ref">strncmp</span>.</p>
</div>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP57-CPP.+Prefer+special+member+functions+and+overloaded+operators+to+C+Standard+Library+functions">OOP57-CPP. Prefer special member functions and overloaded operators to C Standard Library functions</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/oop57-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-oop58-cpp</key>
    <name>cert-oop58-cpp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-mutating-copy</p>
</div>
<h1 id="cert-oop58-cpp">cert-oop58-cpp</h1>
<p>Finds assignments to the copied object and its direct or indirect members in copy constructors and copy assignment operators.</p>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP58-CPP.+Copy+operations+must+not+mutate+the+source+object">OOP58-CPP. Copy operations must not mutate the source object</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/oop58-cpp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cert-pos44-c</key>
    <name>cert-pos44-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-pos44-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/bad-signal-to-kill-thread.html">

</div>
<h1 id="cert-pos44-c">cert-pos44-c</h1>
<p>The <span class="title-ref">cert-pos44-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-bad-signal-to-kill-thread &lt;../bugprone/bad-signal-to-kill-thread&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/pos44-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-pos47-c</key>
    <name>cert-pos47-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-pos47-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../concurrency/thread-canceltype-asynchronous.html">

</div>
<h1 id="cert-pos47-c">cert-pos47-c</h1>
<p>The <span class="title-ref">cert-pos47-c</span> check is an alias, please see <code class="interpreted-text" role="doc">concurrency-thread-canceltype-asynchronous &lt;../concurrency/thread-canceltype-asynchronous&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/pos47-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-sig30-c</key>
    <name>cert-sig30-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-sig30-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/signal-handler.html">

</div>
<h1 id="cert-sig30-c">cert-sig30-c</h1>
<p>The <span class="title-ref">cert-sig30-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-signal-handler &lt;../bugprone/signal-handler&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/sig30-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cert-str34-c</key>
    <name>cert-str34-c</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cert-str34-c</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/signed-char-misuse.html">

</div>
<h1 id="cert-str34-c">cert-str34-c</h1>
<p>The <span class="title-ref">cert-str34-c</span> check is an alias, please see <code class="interpreted-text" role="doc">bugprone-signed-char-misuse &lt;../bugprone/signed-char-misuse&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert/str34-c.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.BitwiseShift</key>
    <name>clang-analyzer-core.BitwiseShift</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.BitwiseShift</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-bitwiseshift">

</div>
<h1 id="clang-analyzer-core.bitwiseshift">clang-analyzer-core.BitwiseShift</h1>
<p>Finds cases where bitwise shift operation causes undefined behaviour.</p>
<p>The <span class="title-ref">clang-analyzer-core.BitwiseShift</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-bitwiseshift">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.BitwiseShift.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.CallAndMessage</key>
    <name>clang-analyzer-core.CallAndMessage</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.CallAndMessage</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-callandmessage">

</div>
<h1 id="clang-analyzer-core.callandmessage">clang-analyzer-core.CallAndMessage</h1>
<p>Check for logical errors for function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers).</p>
<p>The <span class="title-ref">clang-analyzer-core.CallAndMessage</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-callandmessage">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.CallAndMessage.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.DivideZero</key>
    <name>clang-analyzer-core.DivideZero</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.DivideZero</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-dividezero">

</div>
<h1 id="clang-analyzer-core.dividezero">clang-analyzer-core.DivideZero</h1>
<p>Check for division by zero.</p>
<p>The <span class="title-ref">clang-analyzer-core.DivideZero</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-dividezero">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.DivideZero.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.DynamicTypePropagation</key>
    <name>clang-analyzer-core.DynamicTypePropagation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.DynamicTypePropagation</p>
</div>
<h1 id="clang-analyzer-core.dynamictypepropagation">clang-analyzer-core.DynamicTypePropagation</h1>
<p>Generate dynamic type information</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.DynamicTypePropagation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.NonNullParamChecker</key>
    <name>clang-analyzer-core.NonNullParamChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.NonNullParamChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-nonnullparamchecker">

</div>
<h1 id="clang-analyzer-core.nonnullparamchecker">clang-analyzer-core.NonNullParamChecker</h1>
<p>Check for null pointers passed as arguments to a function whose arguments are references or marked with the 'nonnull' attribute.</p>
<p>The <span class="title-ref">clang-analyzer-core.NonNullParamChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-nonnullparamchecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.NonNullParamChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.NullDereference</key>
    <name>clang-analyzer-core.NullDereference</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.NullDereference</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-nulldereference">

</div>
<h1 id="clang-analyzer-core.nulldereference">clang-analyzer-core.NullDereference</h1>
<p>Check for dereferences of null pointers.</p>
<p>The <span class="title-ref">clang-analyzer-core.NullDereference</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-nulldereference">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.NullDereference.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.StackAddressEscape</key>
    <name>clang-analyzer-core.StackAddressEscape</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.StackAddressEscape</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-stackaddressescape">

</div>
<h1 id="clang-analyzer-core.stackaddressescape">clang-analyzer-core.StackAddressEscape</h1>
<p>Check that addresses to stack memory do not escape the function.</p>
<p>The <span class="title-ref">clang-analyzer-core.StackAddressEscape</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-stackaddressescape">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.StackAddressEscape.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.UndefinedBinaryOperatorResult</key>
    <name>clang-analyzer-core.UndefinedBinaryOperatorResult</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.UndefinedBinaryOperatorResult</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-undefinedbinaryoperatorresult">

</div>
<h1 id="clang-analyzer-core.undefinedbinaryoperatorresult">clang-analyzer-core.UndefinedBinaryOperatorResult</h1>
<p>Check for undefined results of binary operators.</p>
<p>The <span class="title-ref">clang-analyzer-core.UndefinedBinaryOperatorResult</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-undefinedbinaryoperatorresult">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.UndefinedBinaryOperatorResult.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.ArraySubscript</key>
    <name>clang-analyzer-core.uninitialized.ArraySubscript</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.ArraySubscript</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-arraysubscript">

</div>
<h1 id="clang-analyzer-core.uninitialized.arraysubscript">clang-analyzer-core.uninitialized.ArraySubscript</h1>
<p>Check for uninitialized values used as array subscripts.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.ArraySubscript</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-arraysubscript">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.ArraySubscript.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.Assign</key>
    <name>clang-analyzer-core.uninitialized.Assign</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.Assign</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-assign">

</div>
<h1 id="clang-analyzer-core.uninitialized.assign">clang-analyzer-core.uninitialized.Assign</h1>
<p>Check for assigning uninitialized values.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.Assign</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-assign">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.Assign.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.Branch</key>
    <name>clang-analyzer-core.uninitialized.Branch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.Branch</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-branch">

</div>
<h1 id="clang-analyzer-core.uninitialized.branch">clang-analyzer-core.uninitialized.Branch</h1>
<p>Check for uninitialized values used as branch conditions.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.Branch</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-branch">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.Branch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.CapturedBlockVariable</key>
    <name>clang-analyzer-core.uninitialized.CapturedBlockVariable</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.CapturedBlockVariable</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-capturedblockvariable">

</div>
<h1 id="clang-analyzer-core.uninitialized.capturedblockvariable">clang-analyzer-core.uninitialized.CapturedBlockVariable</h1>
<p>Check for blocks that capture uninitialized values.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.CapturedBlockVariable</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-capturedblockvariable">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.CapturedBlockVariable.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.NewArraySize</key>
    <name>clang-analyzer-core.uninitialized.NewArraySize</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.NewArraySize</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-newarraysize">

</div>
<h1 id="clang-analyzer-core.uninitialized.newarraysize">clang-analyzer-core.uninitialized.NewArraySize</h1>
<p>Check if the size of the array in a new[] expression is undefined.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.NewArraySize</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-newarraysize">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.NewArraySize.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.uninitialized.UndefReturn</key>
    <name>clang-analyzer-core.uninitialized.UndefReturn</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.uninitialized.UndefReturn</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-undefreturn">

</div>
<h1 id="clang-analyzer-core.uninitialized.undefreturn">clang-analyzer-core.uninitialized.UndefReturn</h1>
<p>Check for uninitialized values being returned to the caller.</p>
<p>The <span class="title-ref">clang-analyzer-core.uninitialized.UndefReturn</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-uninitialized-undefreturn">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.uninitialized.UndefReturn.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-core.VLASize</key>
    <name>clang-analyzer-core.VLASize</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-core.VLASize</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#core-vlasize">

</div>
<h1 id="clang-analyzer-core.vlasize">clang-analyzer-core.VLASize</h1>
<p>Check for declarations of VLA of undefined or zero size.</p>
<p>The <span class="title-ref">clang-analyzer-core.VLASize</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#core-vlasize">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/core.VLASize.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.InnerPointer</key>
    <name>clang-analyzer-cplusplus.InnerPointer</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.InnerPointer</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-innerpointer">

</div>
<h1 id="clang-analyzer-cplusplus.innerpointer">clang-analyzer-cplusplus.InnerPointer</h1>
<p>Check for inner pointers of C++ containers used after re/deallocation.</p>
<p>The <span class="title-ref">clang-analyzer-cplusplus.InnerPointer</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-innerpointer">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.InnerPointer.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.Move</key>
    <name>clang-analyzer-cplusplus.Move</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.Move</p>
</div>
<h1 id="clang-analyzer-cplusplus.move">clang-analyzer-cplusplus.Move</h1>
<p>Find use-after-move bugs in C++.</p>
<p>The clang-analyzer-cplusplus.Move check is an alias of Clang Static Analyzer cplusplus.Move.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.Move.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.NewDelete</key>
    <name>clang-analyzer-cplusplus.NewDelete</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.NewDelete</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-newdelete">

</div>
<h1 id="clang-analyzer-cplusplus.newdelete">clang-analyzer-cplusplus.NewDelete</h1>
<p>Check for double-free and use-after-free problems. Traces memory managed by new/delete.</p>
<p>The <span class="title-ref">clang-analyzer-cplusplus.NewDelete</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-newdelete">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.NewDelete.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.NewDeleteLeaks</key>
    <name>clang-analyzer-cplusplus.NewDeleteLeaks</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.NewDeleteLeaks</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-newdeleteleaks">

</div>
<h1 id="clang-analyzer-cplusplus.newdeleteleaks">clang-analyzer-cplusplus.NewDeleteLeaks</h1>
<p>Check for memory leaks. Traces memory managed by new/delete.</p>
<p>The <span class="title-ref">clang-analyzer-cplusplus.NewDeleteLeaks</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-newdeleteleaks">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.NewDeleteLeaks.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.PlacementNew</key>
    <name>clang-analyzer-cplusplus.PlacementNew</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.PlacementNew</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-placementnew">

</div>
<h1 id="clang-analyzer-cplusplus.placementnew">clang-analyzer-cplusplus.PlacementNew</h1>
<p>Check if default placement new is provided with pointers to sufficient storage capacity.</p>
<p>The <span class="title-ref">clang-analyzer-cplusplus.PlacementNew</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-placementnew">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.PlacementNew.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.PureVirtualCall</key>
    <name>clang-analyzer-cplusplus.PureVirtualCall</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.PureVirtualCall</p>
</div>
<h1 id="clang-analyzer-cplusplus.purevirtualcall">clang-analyzer-cplusplus.PureVirtualCall</h1>
<p>Check pure virtual function calls during construction/destruction.</p>
<p>The clang-analyzer-cplusplus.PureVirtualCall check is an alias of Clang Static Analyzer cplusplus.PureVirtualCall.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.PureVirtualCall.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-cplusplus.StringChecker</key>
    <name>clang-analyzer-cplusplus.StringChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-cplusplus.StringChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-stringchecker">

</div>
<h1 id="clang-analyzer-cplusplus.stringchecker">clang-analyzer-cplusplus.StringChecker</h1>
<p>Checks C++ std::string bugs.</p>
<p>The <span class="title-ref">clang-analyzer-cplusplus.StringChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#cplusplus-stringchecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/cplusplus.StringChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-deadcode.DeadStores</key>
    <name>clang-analyzer-deadcode.DeadStores</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-deadcode.DeadStores</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#deadcode-deadstores">

</div>
<h1 id="clang-analyzer-deadcode.deadstores">clang-analyzer-deadcode.DeadStores</h1>
<p>Check for values stored to variables that are never read afterwards.</p>
<p>The <span class="title-ref">clang-analyzer-deadcode.DeadStores</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#deadcode-deadstores">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/deadcode.DeadStores.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-fuchsia.HandleChecker</key>
    <name>clang-analyzer-fuchsia.HandleChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-fuchsia.HandleChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#fuchsia-handlechecker">

</div>
<h1 id="clang-analyzer-fuchsia.handlechecker">clang-analyzer-fuchsia.HandleChecker</h1>
<p>A Checker that detect leaks related to Fuchsia handles.</p>
<p>The <span class="title-ref">clang-analyzer-fuchsia.HandleChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#fuchsia-handlechecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/fuchsia.HandleChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-nullability.NullableDereferenced</key>
    <name>clang-analyzer-nullability.NullableDereferenced</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-nullability.NullableDereferenced</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullabledereferenced">

</div>
<h1 id="clang-analyzer-nullability.nullabledereferenced">clang-analyzer-nullability.NullableDereferenced</h1>
<p>Warns when a nullable pointer is dereferenced.</p>
<p>The <span class="title-ref">clang-analyzer-nullability.NullableDereferenced</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullabledereferenced">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/nullability.NullableDereferenced.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-nullability.NullablePassedToNonnull</key>
    <name>clang-analyzer-nullability.NullablePassedToNonnull</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-nullability.NullablePassedToNonnull</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullablepassedtononnull">

</div>
<h1 id="clang-analyzer-nullability.nullablepassedtononnull">clang-analyzer-nullability.NullablePassedToNonnull</h1>
<p>Warns when a nullable pointer is passed to a pointer which has a _Nonnull type.</p>
<p>The <span class="title-ref">clang-analyzer-nullability.NullablePassedToNonnull</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullablepassedtononnull">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/nullability.NullablePassedToNonnull.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-nullability.NullableReturnedFromNonnull</key>
    <name>clang-analyzer-nullability.NullableReturnedFromNonnull</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-nullability.NullableReturnedFromNonnull</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullablereturnedfromnonnull">

</div>
<h1 id="clang-analyzer-nullability.nullablereturnedfromnonnull">clang-analyzer-nullability.NullableReturnedFromNonnull</h1>
<p>Warns when a nullable pointer is returned from a function that has _Nonnull return type.</p>
<p>The <span class="title-ref">clang-analyzer-nullability.NullableReturnedFromNonnull</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullablereturnedfromnonnull">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/nullability.NullableReturnedFromNonnull.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-nullability.NullPassedToNonnull</key>
    <name>clang-analyzer-nullability.NullPassedToNonnull</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-nullability.NullPassedToNonnull</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullpassedtononnull">

</div>
<h1 id="clang-analyzer-nullability.nullpassedtononnull">clang-analyzer-nullability.NullPassedToNonnull</h1>
<p>Warns when a null pointer is passed to a pointer which has a _Nonnull type.</p>
<p>The <span class="title-ref">clang-analyzer-nullability.NullPassedToNonnull</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullpassedtononnull">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/nullability.NullPassedToNonnull.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-nullability.NullReturnedFromNonnull</key>
    <name>clang-analyzer-nullability.NullReturnedFromNonnull</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-nullability.NullReturnedFromNonnull</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullreturnedfromnonnull">

</div>
<h1 id="clang-analyzer-nullability.nullreturnedfromnonnull">clang-analyzer-nullability.NullReturnedFromNonnull</h1>
<p>Warns when a null pointer is returned from a function that has _Nonnull return type.</p>
<p>The <span class="title-ref">clang-analyzer-nullability.NullReturnedFromNonnull</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#nullability-nullreturnedfromnonnull">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/nullability.NullReturnedFromNonnull.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.core.EnumCastOutOfRange</key>
    <name>clang-analyzer-optin.core.EnumCastOutOfRange</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.core.EnumCastOutOfRange</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-core-enumcastoutofrange">

</div>
<h1 id="clang-analyzer-optin.core.enumcastoutofrange">clang-analyzer-optin.core.EnumCastOutOfRange</h1>
<p>Check integer to enumeration casts for out of range values.</p>
<p>The <span class="title-ref">clang-analyzer-optin.core.EnumCastOutOfRange</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-core-enumcastoutofrange">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.core.EnumCastOutOfRange.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.cplusplus.UninitializedObject</key>
    <name>clang-analyzer-optin.cplusplus.UninitializedObject</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.cplusplus.UninitializedObject</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-cplusplus-uninitializedobject">

</div>
<h1 id="clang-analyzer-optin.cplusplus.uninitializedobject">clang-analyzer-optin.cplusplus.UninitializedObject</h1>
<p>Reports uninitialized fields after object construction.</p>
<p>The <span class="title-ref">clang-analyzer-optin.cplusplus.UninitializedObject</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-cplusplus-uninitializedobject">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.cplusplus.UninitializedObject.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.cplusplus.VirtualCall</key>
    <name>clang-analyzer-optin.cplusplus.VirtualCall</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.cplusplus.VirtualCall</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-cplusplus-virtualcall">

</div>
<h1 id="clang-analyzer-optin.cplusplus.virtualcall">clang-analyzer-optin.cplusplus.VirtualCall</h1>
<p>Check virtual function calls during construction/destruction.</p>
<p>The <span class="title-ref">clang-analyzer-optin.cplusplus.VirtualCall</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-cplusplus-virtualcall">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.cplusplus.VirtualCall.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.mpi.MPI-Checker</key>
    <name>clang-analyzer-optin.mpi.MPI-Checker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.mpi.MPI-Checker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-mpi-mpi-checker">

</div>
<h1 id="clang-analyzer-optin.mpi.mpi-checker">clang-analyzer-optin.mpi.MPI-Checker</h1>
<p>Checks MPI code.</p>
<p>The <span class="title-ref">clang-analyzer-optin.mpi.MPI-Checker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-mpi-mpi-checker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.mpi.MPI-Checker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker</key>
    <name>clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-osx-cocoa-localizability-emptylocalizationcontextchecker">

</div>
<h1 id="clang-analyzer-optin.osx.cocoa.localizability.emptylocalizationcontextchecker">clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker</h1>
<p>Check that NSLocalizedString macros include a comment for context.</p>
<p>The <span class="title-ref">clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-osx-cocoa-localizability-emptylocalizationcontextchecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.osx.cocoa.localizability.EmptyLocalizationContextChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker</key>
    <name>clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-osx-cocoa-localizability-nonlocalizedstringchecker">

</div>
<h1 id="clang-analyzer-optin.osx.cocoa.localizability.nonlocalizedstringchecker">clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker</h1>
<p>Warns about uses of non-localized NSStrings passed to UI methods expecting localized NSStrings.</p>
<p>The <span class="title-ref">clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-osx-cocoa-localizability-nonlocalizedstringchecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.osx.cocoa.localizability.NonLocalizedStringChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.osx.OSObjectCStyleCast</key>
    <name>clang-analyzer-optin.osx.OSObjectCStyleCast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.osx.OSObjectCStyleCast</p>
</div>
<h1 id="clang-analyzer-optin.osx.osobjectcstylecast">clang-analyzer-optin.osx.OSObjectCStyleCast</h1>
<p>Checker for C-style casts of OSObjects.</p>
<p>The clang-analyzer-optin.osx.OSObjectCStyleCast check is an alias of Clang Static Analyzer optin.osx.OSObjectCStyleCast.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.osx.OSObjectCStyleCast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.performance.GCDAntipattern</key>
    <name>clang-analyzer-optin.performance.GCDAntipattern</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.performance.GCDAntipattern</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-performance-gcdantipattern">

</div>
<h1 id="clang-analyzer-optin.performance.gcdantipattern">clang-analyzer-optin.performance.GCDAntipattern</h1>
<p>Check for performance anti-patterns when using Grand Central Dispatch.</p>
<p>The <span class="title-ref">clang-analyzer-optin.performance.GCDAntipattern</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-performance-gcdantipattern">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.performance.GCDAntipattern.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.performance.Padding</key>
    <name>clang-analyzer-optin.performance.Padding</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.performance.Padding</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-performance-padding">

</div>
<h1 id="clang-analyzer-optin.performance.padding">clang-analyzer-optin.performance.Padding</h1>
<p>Check for excessively padded structs.</p>
<p>The <span class="title-ref">clang-analyzer-optin.performance.Padding</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-performance-padding">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.performance.Padding.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-optin.portability.UnixAPI</key>
    <name>clang-analyzer-optin.portability.UnixAPI</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-optin.portability.UnixAPI</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#optin-portability-unixapi">

</div>
<h1 id="clang-analyzer-optin.portability.unixapi">clang-analyzer-optin.portability.UnixAPI</h1>
<p>Finds implementation-defined behavior in UNIX/Posix functions.</p>
<p>The <span class="title-ref">clang-analyzer-optin.portability.UnixAPI</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#optin-portability-unixapi">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/optin.portability.UnixAPI.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.API</key>
    <name>clang-analyzer-osx.API</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.API</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-api">

</div>
<h1 id="clang-analyzer-osx.api">clang-analyzer-osx.API</h1>
<p>Check for proper uses of various Apple APIs.</p>
<p>The <span class="title-ref">clang-analyzer-osx.API</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-api">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.API.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.AtSync</key>
    <name>clang-analyzer-osx.cocoa.AtSync</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.AtSync</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-atsync">

</div>
<h1 id="clang-analyzer-osx.cocoa.atsync">clang-analyzer-osx.cocoa.AtSync</h1>
<p>Check for nil pointers used as mutexes for @synchronized.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.AtSync</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-atsync">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.AtSync.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.AutoreleaseWrite</key>
    <name>clang-analyzer-osx.cocoa.AutoreleaseWrite</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.AutoreleaseWrite</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-autoreleasewrite">

</div>
<h1 id="clang-analyzer-osx.cocoa.autoreleasewrite">clang-analyzer-osx.cocoa.AutoreleaseWrite</h1>
<p>Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.AutoreleaseWrite</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-autoreleasewrite">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.AutoreleaseWrite.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.ClassRelease</key>
    <name>clang-analyzer-osx.cocoa.ClassRelease</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.ClassRelease</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-classrelease">

</div>
<h1 id="clang-analyzer-osx.cocoa.classrelease">clang-analyzer-osx.cocoa.ClassRelease</h1>
<p>Check for sending 'retain', 'release', or 'autorelease' directly to a Class.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.ClassRelease</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-classrelease">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.ClassRelease.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.Dealloc</key>
    <name>clang-analyzer-osx.cocoa.Dealloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.Dealloc</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-dealloc">

</div>
<h1 id="clang-analyzer-osx.cocoa.dealloc">clang-analyzer-osx.cocoa.Dealloc</h1>
<p>Warn about Objective-C classes that lack a correct implementation of -dealloc.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.Dealloc</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-dealloc">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.Dealloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.IncompatibleMethodTypes</key>
    <name>clang-analyzer-osx.cocoa.IncompatibleMethodTypes</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.IncompatibleMethodTypes</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-incompatiblemethodtypes">

</div>
<h1 id="clang-analyzer-osx.cocoa.incompatiblemethodtypes">clang-analyzer-osx.cocoa.IncompatibleMethodTypes</h1>
<p>Warn about Objective-C method signatures with type incompatibilities.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.IncompatibleMethodTypes</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-incompatiblemethodtypes">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.IncompatibleMethodTypes.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.Loops</key>
    <name>clang-analyzer-osx.cocoa.Loops</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.Loops</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-loops">

</div>
<h1 id="clang-analyzer-osx.cocoa.loops">clang-analyzer-osx.cocoa.Loops</h1>
<p>Improved modeling of loops using Cocoa collection types.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.Loops</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-loops">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.Loops.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.MissingSuperCall</key>
    <name>clang-analyzer-osx.cocoa.MissingSuperCall</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.MissingSuperCall</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-missingsupercall">

</div>
<h1 id="clang-analyzer-osx.cocoa.missingsupercall">clang-analyzer-osx.cocoa.MissingSuperCall</h1>
<p>Warn about Objective-C methods that lack a necessary call to super.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.MissingSuperCall</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-missingsupercall">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.MissingSuperCall.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.NilArg</key>
    <name>clang-analyzer-osx.cocoa.NilArg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.NilArg</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nilarg">

</div>
<h1 id="clang-analyzer-osx.cocoa.nilarg">clang-analyzer-osx.cocoa.NilArg</h1>
<p>Check for prohibited nil arguments to ObjC method calls.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.NilArg</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nilarg">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.NilArg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.NonNilReturnValue</key>
    <name>clang-analyzer-osx.cocoa.NonNilReturnValue</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.NonNilReturnValue</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nonnilreturnvalue">

</div>
<h1 id="clang-analyzer-osx.cocoa.nonnilreturnvalue">clang-analyzer-osx.cocoa.NonNilReturnValue</h1>
<p>Model the APIs that are guaranteed to return a non-nil value.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.NonNilReturnValue</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nonnilreturnvalue">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.NonNilReturnValue.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.NSAutoreleasePool</key>
    <name>clang-analyzer-osx.cocoa.NSAutoreleasePool</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.NSAutoreleasePool</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nsautoreleasepool">

</div>
<h1 id="clang-analyzer-osx.cocoa.nsautoreleasepool">clang-analyzer-osx.cocoa.NSAutoreleasePool</h1>
<p>Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.NSAutoreleasePool</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nsautoreleasepool">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.NSAutoreleasePool.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.NSError</key>
    <name>clang-analyzer-osx.cocoa.NSError</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.NSError</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nserror">

</div>
<h1 id="clang-analyzer-osx.cocoa.nserror">clang-analyzer-osx.cocoa.NSError</h1>
<p>Check usage of NSError** parameters.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.NSError</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-nserror">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.NSError.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.ObjCGenerics</key>
    <name>clang-analyzer-osx.cocoa.ObjCGenerics</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.ObjCGenerics</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-objcgenerics">

</div>
<h1 id="clang-analyzer-osx.cocoa.objcgenerics">clang-analyzer-osx.cocoa.ObjCGenerics</h1>
<p>Check for type errors when using Objective-C generics.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.ObjCGenerics</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-objcgenerics">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.ObjCGenerics.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.RetainCount</key>
    <name>clang-analyzer-osx.cocoa.RetainCount</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.RetainCount</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-retaincount">

</div>
<h1 id="clang-analyzer-osx.cocoa.retaincount">clang-analyzer-osx.cocoa.RetainCount</h1>
<p>Check for leaks and improper reference count management.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.RetainCount</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-retaincount">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.RetainCount.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak</key>
    <name>clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-runloopautoreleaseleak">

</div>
<h1 id="clang-analyzer-osx.cocoa.runloopautoreleaseleak">clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak</h1>
<p>Check for leaked memory in autorelease pools that will never be drained.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-runloopautoreleaseleak">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.RunLoopAutoreleaseLeak.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.SelfInit</key>
    <name>clang-analyzer-osx.cocoa.SelfInit</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.SelfInit</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-selfinit">

</div>
<h1 id="clang-analyzer-osx.cocoa.selfinit">clang-analyzer-osx.cocoa.SelfInit</h1>
<p>Check that 'self' is properly initialized inside an initializer method.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.SelfInit</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-selfinit">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.SelfInit.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.SuperDealloc</key>
    <name>clang-analyzer-osx.cocoa.SuperDealloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.SuperDealloc</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-superdealloc">

</div>
<h1 id="clang-analyzer-osx.cocoa.superdealloc">clang-analyzer-osx.cocoa.SuperDealloc</h1>
<p>Warn about improper use of '[super dealloc]' in Objective-C.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.SuperDealloc</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-superdealloc">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.SuperDealloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.UnusedIvars</key>
    <name>clang-analyzer-osx.cocoa.UnusedIvars</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.UnusedIvars</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-unusedivars">

</div>
<h1 id="clang-analyzer-osx.cocoa.unusedivars">clang-analyzer-osx.cocoa.UnusedIvars</h1>
<p>Warn about private ivars that are never used.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.UnusedIvars</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-unusedivars">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.UnusedIvars.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.cocoa.VariadicMethodTypes</key>
    <name>clang-analyzer-osx.cocoa.VariadicMethodTypes</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.cocoa.VariadicMethodTypes</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-variadicmethodtypes">

</div>
<h1 id="clang-analyzer-osx.cocoa.variadicmethodtypes">clang-analyzer-osx.cocoa.VariadicMethodTypes</h1>
<p>Check for passing non-Objective-C types to variadic collection initialization methods that expect only Objective-C types.</p>
<p>The <span class="title-ref">clang-analyzer-osx.cocoa.VariadicMethodTypes</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-cocoa-variadicmethodtypes">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.cocoa.VariadicMethodTypes.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.coreFoundation.CFError</key>
    <name>clang-analyzer-osx.coreFoundation.CFError</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.coreFoundation.CFError</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cferror">

</div>
<h1 id="clang-analyzer-osx.corefoundation.cferror">clang-analyzer-osx.coreFoundation.CFError</h1>
<p>Check usage of CFErrorRef* parameters.</p>
<p>The <span class="title-ref">clang-analyzer-osx.coreFoundation.CFError</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cferror">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.coreFoundation.CFError.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.coreFoundation.CFNumber</key>
    <name>clang-analyzer-osx.coreFoundation.CFNumber</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.coreFoundation.CFNumber</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cfnumber">

</div>
<h1 id="clang-analyzer-osx.corefoundation.cfnumber">clang-analyzer-osx.coreFoundation.CFNumber</h1>
<p>Check for proper uses of CFNumber APIs.</p>
<p>The <span class="title-ref">clang-analyzer-osx.coreFoundation.CFNumber</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cfnumber">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.coreFoundation.CFNumber.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.coreFoundation.CFRetainRelease</key>
    <name>clang-analyzer-osx.coreFoundation.CFRetainRelease</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.coreFoundation.CFRetainRelease</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cfretainrelease">

</div>
<h1 id="clang-analyzer-osx.corefoundation.cfretainrelease">clang-analyzer-osx.coreFoundation.CFRetainRelease</h1>
<p>Check for null arguments to CFRetain/CFRelease/CFMakeCollectable.</p>
<p>The <span class="title-ref">clang-analyzer-osx.coreFoundation.CFRetainRelease</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-cfretainrelease">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.coreFoundation.CFRetainRelease.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.coreFoundation.containers.OutOfBounds</key>
    <name>clang-analyzer-osx.coreFoundation.containers.OutOfBounds</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.coreFoundation.containers.OutOfBounds</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-containers-outofbounds">

</div>
<h1 id="clang-analyzer-osx.corefoundation.containers.outofbounds">clang-analyzer-osx.coreFoundation.containers.OutOfBounds</h1>
<p>Checks for index out-of-bounds when using 'CFArray' API.</p>
<p>The <span class="title-ref">clang-analyzer-osx.coreFoundation.containers.OutOfBounds</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-containers-outofbounds">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.coreFoundation.containers.OutOfBounds.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</key>
    <name>clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-containers-pointersizedvalues">

</div>
<h1 id="clang-analyzer-osx.corefoundation.containers.pointersizedvalues">clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</h1>
<p>Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-size values.</p>
<p>The <span class="title-ref">clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-corefoundation-containers-pointersizedvalues">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.coreFoundation.containers.PointerSizedValues.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.MIG</key>
    <name>clang-analyzer-osx.MIG</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.MIG</p>
</div>
<h1 id="clang-analyzer-osx.mig">clang-analyzer-osx.MIG</h1>
<p>Find violations of the Mach Interface Generator calling convention.</p>
<p>The clang-analyzer-osx.MIG check is an alias of Clang Static Analyzer osx.MIG.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.MIG.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.NumberObjectConversion</key>
    <name>clang-analyzer-osx.NumberObjectConversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.NumberObjectConversion</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-numberobjectconversion">

</div>
<h1 id="clang-analyzer-osx.numberobjectconversion">clang-analyzer-osx.NumberObjectConversion</h1>
<p>Check for erroneous conversions of objects representing numbers into numbers.</p>
<p>The <span class="title-ref">clang-analyzer-osx.NumberObjectConversion</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-numberobjectconversion">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.NumberObjectConversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.ObjCProperty</key>
    <name>clang-analyzer-osx.ObjCProperty</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.ObjCProperty</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-objcproperty">

</div>
<h1 id="clang-analyzer-osx.objcproperty">clang-analyzer-osx.ObjCProperty</h1>
<p>Check for proper uses of Objective-C properties.</p>
<p>The <span class="title-ref">clang-analyzer-osx.ObjCProperty</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-objcproperty">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.ObjCProperty.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.OSObjectRetainCount</key>
    <name>clang-analyzer-osx.OSObjectRetainCount</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.OSObjectRetainCount</p>
</div>
<h1 id="clang-analyzer-osx.osobjectretaincount">clang-analyzer-osx.OSObjectRetainCount</h1>
<p>Check for leaks and improper reference count management for OSObject.</p>
<p>The clang-analyzer-osx.OSObjectRetainCount check is an alias of Clang Static Analyzer osx.OSObjectRetainCount.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.OSObjectRetainCount.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-osx.SecKeychainAPI</key>
    <name>clang-analyzer-osx.SecKeychainAPI</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-osx.SecKeychainAPI</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#osx-seckeychainapi">

</div>
<h1 id="clang-analyzer-osx.seckeychainapi">clang-analyzer-osx.SecKeychainAPI</h1>
<p>Check for proper uses of Secure Keychain APIs.</p>
<p>The <span class="title-ref">clang-analyzer-osx.SecKeychainAPI</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#osx-seckeychainapi">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/osx.SecKeychainAPI.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.cert.env.InvalidPtr</key>
    <name>clang-analyzer-security.cert.env.InvalidPtr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.cert.env.InvalidPtr</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-cert-env-invalidptr">

</div>
<h1 id="clang-analyzer-security.cert.env.invalidptr">clang-analyzer-security.cert.env.InvalidPtr</h1>
<p>Finds usages of possibly invalidated pointers.</p>
<p>The <span class="title-ref">clang-analyzer-security.cert.env.InvalidPtr</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-cert-env-invalidptr">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.cert.env.InvalidPtr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.FloatLoopCounter</key>
    <name>clang-analyzer-security.FloatLoopCounter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.FloatLoopCounter</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-floatloopcounter">

</div>
<h1 id="clang-analyzer-security.floatloopcounter">clang-analyzer-security.FloatLoopCounter</h1>
<p>Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP).</p>
<p>The <span class="title-ref">clang-analyzer-security.FloatLoopCounter</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-floatloopcounter">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.FloatLoopCounter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.bcmp</key>
    <name>clang-analyzer-security.insecureAPI.bcmp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.bcmp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bcmp">

</div>
<h1 id="clang-analyzer-security.insecureapi.bcmp">clang-analyzer-security.insecureAPI.bcmp</h1>
<p>Warn on uses of the 'bcmp' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.bcmp</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bcmp">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.bcmp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.bcopy</key>
    <name>clang-analyzer-security.insecureAPI.bcopy</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.bcopy</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bcopy">

</div>
<h1 id="clang-analyzer-security.insecureapi.bcopy">clang-analyzer-security.insecureAPI.bcopy</h1>
<p>Warn on uses of the 'bcopy' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.bcopy</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bcopy">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.bcopy.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.bzero</key>
    <name>clang-analyzer-security.insecureAPI.bzero</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.bzero</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bzero">

</div>
<h1 id="clang-analyzer-security.insecureapi.bzero">clang-analyzer-security.insecureAPI.bzero</h1>
<p>Warn on uses of the 'bzero' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.bzero</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-bzero">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.bzero.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.decodeValueOfObjCType</key>
    <name>clang-analyzer-security.insecureAPI.decodeValueOfObjCType</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.decodeValueOfObjCType</p>
</div>
<h1 id="clang-analyzer-security.insecureapi.decodevalueofobjctype">clang-analyzer-security.insecureAPI.decodeValueOfObjCType</h1>
<p>Warn on uses of the '-decodeValueOfObjCType:at:' method.</p>
<p>The clang-analyzer-security.insecureAPI.decodeValueOfObjCType check is an alias of Clang Static Analyzer security.insecureAPI.decodeValueOfObjCType.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.decodeValueOfObjCType.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling</key>
    <name>clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-deprecatedorunsafebufferhandling">

</div>
<h1 id="clang-analyzer-security.insecureapi.deprecatedorunsafebufferhandling">clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling</h1>
<p>Warn on uses of unsecure or deprecated buffer manipulating functions.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-deprecatedorunsafebufferhandling">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.DeprecatedOrUnsafeBufferHandling.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.getpw</key>
    <name>clang-analyzer-security.insecureAPI.getpw</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.getpw</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-getpw">

</div>
<h1 id="clang-analyzer-security.insecureapi.getpw">clang-analyzer-security.insecureAPI.getpw</h1>
<p>Warn on uses of the 'getpw' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.getpw</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-getpw">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.getpw.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.gets</key>
    <name>clang-analyzer-security.insecureAPI.gets</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.gets</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-gets">

</div>
<h1 id="clang-analyzer-security.insecureapi.gets">clang-analyzer-security.insecureAPI.gets</h1>
<p>Warn on uses of the 'gets' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.gets</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-gets">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.gets.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.mkstemp</key>
    <name>clang-analyzer-security.insecureAPI.mkstemp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.mkstemp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-mkstemp">

</div>
<h1 id="clang-analyzer-security.insecureapi.mkstemp">clang-analyzer-security.insecureAPI.mkstemp</h1>
<p>Warn when 'mkstemp' is passed fewer than 6 X's in the format string.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.mkstemp</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-mkstemp">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.mkstemp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.mktemp</key>
    <name>clang-analyzer-security.insecureAPI.mktemp</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.mktemp</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-mktemp">

</div>
<h1 id="clang-analyzer-security.insecureapi.mktemp">clang-analyzer-security.insecureAPI.mktemp</h1>
<p>Warn on uses of the 'mktemp' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.mktemp</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-mktemp">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.mktemp.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.rand</key>
    <name>clang-analyzer-security.insecureAPI.rand</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.rand</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-rand">

</div>
<h1 id="clang-analyzer-security.insecureapi.rand">clang-analyzer-security.insecureAPI.rand</h1>
<p>Warn on uses of the 'rand', 'random', and related functions.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.rand</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-rand">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.rand.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.strcpy</key>
    <name>clang-analyzer-security.insecureAPI.strcpy</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.strcpy</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-strcpy">

</div>
<h1 id="clang-analyzer-security.insecureapi.strcpy">clang-analyzer-security.insecureAPI.strcpy</h1>
<p>Warn on uses of the 'strcpy' and 'strcat' functions.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.strcpy</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-strcpy">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.strcpy.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.UncheckedReturn</key>
    <name>clang-analyzer-security.insecureAPI.UncheckedReturn</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.UncheckedReturn</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-uncheckedreturn">

</div>
<h1 id="clang-analyzer-security.insecureapi.uncheckedreturn">clang-analyzer-security.insecureAPI.UncheckedReturn</h1>
<p>Warn on uses of functions whose return values must be always checked.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.UncheckedReturn</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-uncheckedreturn">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.UncheckedReturn.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-security.insecureAPI.vfork</key>
    <name>clang-analyzer-security.insecureAPI.vfork</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-security.insecureAPI.vfork</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-vfork">

</div>
<h1 id="clang-analyzer-security.insecureapi.vfork">clang-analyzer-security.insecureAPI.vfork</h1>
<p>Warn on uses of the 'vfork' function.</p>
<p>The <span class="title-ref">clang-analyzer-security.insecureAPI.vfork</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#security-insecureapi-vfork">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/security.insecureAPI.vfork.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.API</key>
    <name>clang-analyzer-unix.API</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.API</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-api">

</div>
<h1 id="clang-analyzer-unix.api">clang-analyzer-unix.API</h1>
<p>Check calls to various UNIX/Posix functions.</p>
<p>The <span class="title-ref">clang-analyzer-unix.API</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-api">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.API.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.cstring.BadSizeArg</key>
    <name>clang-analyzer-unix.cstring.BadSizeArg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.cstring.BadSizeArg</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-cstring-badsizearg">

</div>
<h1 id="clang-analyzer-unix.cstring.badsizearg">clang-analyzer-unix.cstring.BadSizeArg</h1>
<p>Check the size argument passed into C string functions for common erroneous patterns.</p>
<p>The <span class="title-ref">clang-analyzer-unix.cstring.BadSizeArg</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-cstring-badsizearg">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.cstring.BadSizeArg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.cstring.NullArg</key>
    <name>clang-analyzer-unix.cstring.NullArg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.cstring.NullArg</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-cstring-nullarg">

</div>
<h1 id="clang-analyzer-unix.cstring.nullarg">clang-analyzer-unix.cstring.NullArg</h1>
<p>Check for null pointers being passed as arguments to C string functions.</p>
<p>The <span class="title-ref">clang-analyzer-unix.cstring.NullArg</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-cstring-nullarg">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.cstring.NullArg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.Errno</key>
    <name>clang-analyzer-unix.Errno</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.Errno</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-errno">

</div>
<h1 id="clang-analyzer-unix.errno">clang-analyzer-unix.Errno</h1>
<p>Check for improper use of 'errno'.</p>
<p>The <span class="title-ref">clang-analyzer-unix.Errno</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-errno">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.Errno.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.Malloc</key>
    <name>clang-analyzer-unix.Malloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.Malloc</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-malloc">

</div>
<h1 id="clang-analyzer-unix.malloc">clang-analyzer-unix.Malloc</h1>
<p>Check for memory leaks, double free, and use-after-free problems. Traces memory managed by malloc()/free().</p>
<p>The <span class="title-ref">clang-analyzer-unix.Malloc</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-malloc">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.Malloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.MallocSizeof</key>
    <name>clang-analyzer-unix.MallocSizeof</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.MallocSizeof</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-mallocsizeof">

</div>
<h1 id="clang-analyzer-unix.mallocsizeof">clang-analyzer-unix.MallocSizeof</h1>
<p>Check for dubious malloc arguments involving sizeof.</p>
<p>The <span class="title-ref">clang-analyzer-unix.MallocSizeof</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-mallocsizeof">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.MallocSizeof.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.MismatchedDeallocator</key>
    <name>clang-analyzer-unix.MismatchedDeallocator</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.MismatchedDeallocator</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-mismatcheddeallocator">

</div>
<h1 id="clang-analyzer-unix.mismatcheddeallocator">clang-analyzer-unix.MismatchedDeallocator</h1>
<p>Check for mismatched deallocators.</p>
<p>The <span class="title-ref">clang-analyzer-unix.MismatchedDeallocator</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-mismatcheddeallocator">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.MismatchedDeallocator.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.StdCLibraryFunctions</key>
    <name>clang-analyzer-unix.StdCLibraryFunctions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.StdCLibraryFunctions</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-stdclibraryfunctions">

</div>
<h1 id="clang-analyzer-unix.stdclibraryfunctions">clang-analyzer-unix.StdCLibraryFunctions</h1>
<p>Check for invalid arguments of C standard library functions, and apply relations between arguments and return value.</p>
<p>The <span class="title-ref">clang-analyzer-unix.StdCLibraryFunctions</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-stdclibraryfunctions">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.StdCLibraryFunctions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-unix.Vfork</key>
    <name>clang-analyzer-unix.Vfork</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-unix.Vfork</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#unix-vfork">

</div>
<h1 id="clang-analyzer-unix.vfork">clang-analyzer-unix.Vfork</h1>
<p>Check for proper usage of vfork.</p>
<p>The <span class="title-ref">clang-analyzer-unix.Vfork</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#unix-vfork">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/unix.Vfork.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-valist.CopyToSelf</key>
    <name>clang-analyzer-valist.CopyToSelf</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-valist.CopyToSelf</p>
</div>
<h1 id="clang-analyzer-valist.copytoself">clang-analyzer-valist.CopyToSelf</h1>
<p>Check for va_lists which are copied onto itself.</p>
<p>The clang-analyzer-valist.CopyToSelf check is an alias of Clang Static Analyzer valist.CopyToSelf.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/valist.CopyToSelf.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-valist.Uninitialized</key>
    <name>clang-analyzer-valist.Uninitialized</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-valist.Uninitialized</p>
</div>
<h1 id="clang-analyzer-valist.uninitialized">clang-analyzer-valist.Uninitialized</h1>
<p>Check for usages of uninitialized (or already released) va_lists.</p>
<p>The clang-analyzer-valist.Uninitialized check is an alias of Clang Static Analyzer valist.Uninitialized.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/valist.Uninitialized.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-valist.Unterminated</key>
    <name>clang-analyzer-valist.Unterminated</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-valist.Unterminated</p>
</div>
<h1 id="clang-analyzer-valist.unterminated">clang-analyzer-valist.Unterminated</h1>
<p>Check for va_lists which are not released by a va_end call.</p>
<p>The clang-analyzer-valist.Unterminated check is an alias of Clang Static Analyzer valist.Unterminated.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/valist.Unterminated.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-webkit.NoUncountedMemberChecker</key>
    <name>clang-analyzer-webkit.NoUncountedMemberChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-webkit.NoUncountedMemberChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#webkit-nouncountedmemberchecker">

</div>
<h1 id="clang-analyzer-webkit.nouncountedmemberchecker">clang-analyzer-webkit.NoUncountedMemberChecker</h1>
<p>Check for no uncounted member variables.</p>
<p>The <span class="title-ref">clang-analyzer-webkit.NoUncountedMemberChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#webkit-nouncountedmemberchecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/webkit.NoUncountedMemberChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-webkit.RefCntblBaseVirtualDtor</key>
    <name>clang-analyzer-webkit.RefCntblBaseVirtualDtor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-webkit.RefCntblBaseVirtualDtor</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#webkit-refcntblbasevirtualdtor">

</div>
<h1 id="clang-analyzer-webkit.refcntblbasevirtualdtor">clang-analyzer-webkit.RefCntblBaseVirtualDtor</h1>
<p>Check for any ref-countable base class having virtual destructor.</p>
<p>The <span class="title-ref">clang-analyzer-webkit.RefCntblBaseVirtualDtor</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#webkit-refcntblbasevirtualdtor">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/webkit.RefCntblBaseVirtualDtor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-analyzer-webkit.UncountedLambdaCapturesChecker</key>
    <name>clang-analyzer-webkit.UncountedLambdaCapturesChecker</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - clang-analyzer-webkit.UncountedLambdaCapturesChecker</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=https://clang.llvm.org/docs/analyzer/checkers.html#webkit-uncountedlambdacaptureschecker">

</div>
<h1 id="clang-analyzer-webkit.uncountedlambdacaptureschecker">clang-analyzer-webkit.UncountedLambdaCapturesChecker</h1>
<p>Check uncounted lambda captures.</p>
<p>The <span class="title-ref">clang-analyzer-webkit.UncountedLambdaCapturesChecker</span> check is an alias, please see <a href="https://clang.llvm.org/docs/analyzer/checkers.html#webkit-uncountedlambdacaptureschecker">Clang Static Analyzer Available Checkers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer/webkit.UncountedLambdaCapturesChecker.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>concurrency-mt-unsafe</key>
    <name>concurrency-mt-unsafe</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - concurrency-mt-unsafe</p>
</div>
<h1 id="concurrency-mt-unsafe">concurrency-mt-unsafe</h1>
<p>Checks for some thread-unsafe functions against a black list of known-to-be-unsafe functions. Usually they access static variables without synchronization (e.g. gmtime(3)) or utilize signals in a racy way. The set of functions to check is specified with the <span class="title-ref">FunctionSet</span> option.</p>
<p>Note that using some thread-unsafe functions may be still valid in concurrent programming if only a single thread is used (e.g. setenv(3)), however, some functions may track a state in global variables which would be clobbered by subsequent (non-parallel, but concurrent) calls to a related function. E.g. the following code suffers from unprotected accesses to a global state:</p>
<pre class="c++"><code>// getnetent(3) maintains global state with DB connection, etc.
// If a concurrent green thread calls getnetent(3), the global state is corrupted.
netent = getnetent();
yield();
netent = getnetent();</code></pre>
<p>Examples:</p>
<pre class="c++"><code>tm = gmtime(timep); // uses a global buffer

sleep(1); // implementation may use SIGALRM</code></pre>
<div class="option">
<p>FunctionSet</p>
<p>Specifies which functions in libc should be considered thread-safe, possible values are <span class="title-ref">posix</span>, <span class="title-ref">glibc</span>, or <span class="title-ref">any</span>.</p>
<p><span class="title-ref">posix</span> means POSIX defined thread-unsafe functions. POSIX.1-2001 in "2.9.1 Thread-Safety" defines that all functions specified in the standard are thread-safe except a predefined list of thread-unsafe functions.</p>
<p>Glibc defines some of them as thread-safe (e.g. dirname(3)), but adds non-POSIX thread-unsafe ones (e.g. getopt_long(3)). Glibc's list is compiled from GNU web documentation with a search for MT-Safe tag: <a href="https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html">https://www.gnu.org/software/libc/manual/html_node/POSIX-Safety-Concepts.html</a></p>
<p>If you want to identify thread-unsafe API for at least one libc or unsure which libc will be used, use <span class="title-ref">any</span> (default).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/concurrency/mt-unsafe.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>concurrency-thread-canceltype-asynchronous</key>
    <name>concurrency-thread-canceltype-asynchronous</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - concurrency-thread-canceltype-asynchronous</p>
</div>
<h1 id="concurrency-thread-canceltype-asynchronous">concurrency-thread-canceltype-asynchronous</h1>
<p>Finds <code>pthread_setcanceltype</code> function calls where a thread's cancellation type is set to asynchronous. Asynchronous cancellation type (<code>PTHREAD_CANCEL_ASYNCHRONOUS</code>) is generally unsafe, use type <code>PTHREAD_CANCEL_DEFERRED</code> instead which is the default. Even with deferred cancellation, a cancellation point in an asynchronous signal handler may still be acted upon and the effect is as if it was an asynchronous cancellation.</p>
<pre class="c++"><code>pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &amp;oldtype);</code></pre>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/c/POS47-C.+Do+not+use+threads+that+can+be+canceled+asynchronously">POS47-C. Do not use threads that can be canceled asynchronously</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/concurrency/thread-canceltype-asynchronous.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-c-arrays</key>
    <name>cppcoreguidelines-avoid-c-arrays</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-c-arrays</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/avoid-c-arrays.html">

</div>
<h1 id="cppcoreguidelines-avoid-c-arrays">cppcoreguidelines-avoid-c-arrays</h1>
<p>The cppcoreguidelines-avoid-c-arrays check is an alias, please see <code class="interpreted-text" role="doc">modernize-avoid-c-arrays &lt;../modernize/avoid-c-arrays&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-capturing-lambda-coroutines</key>
    <name>cppcoreguidelines-avoid-capturing-lambda-coroutines</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-capturing-lambda-coroutines</p>
</div>
<h1 id="cppcoreguidelines-avoid-capturing-lambda-coroutines">cppcoreguidelines-avoid-capturing-lambda-coroutines</h1>
<p>Flags C++20 coroutine lambdas with non-empty capture lists that may cause use-after-free errors and suggests avoiding captures or ensuring the lambda closure object has a guaranteed lifetime.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rcoro-capture">CP.51</a> from the C++ Core Guidelines.</p>
<p>Using coroutine lambdas with non-empty capture lists can be risky, as capturing variables can lead to accessing freed memory after the first suspension point. This issue can occur even with refcounted smart pointers and copyable types. When a lambda expression creates a coroutine, it results in a closure object with storage, which is often on the stack and will eventually go out of scope. When the closure object goes out of scope, its captures also go out of scope. While normal lambdas finish executing before this happens, coroutine lambdas may resume from suspension after the closure object has been destructed, resulting in use-after-free memory access for all captures.</p>
<p>Consider the following example:</p>
<pre class="c++"><code>int value = get_value();
std::shared_ptr&lt;Foo&gt; sharedFoo = get_foo();
{
    const auto lambda = [value, sharedFoo]() -&gt; std::future&lt;void&gt;
    {
        co_await something();
        // &quot;sharedFoo&quot; and &quot;value&quot; have already been destroyed
        // the &quot;shared&quot; pointer didn&#39;t accomplish anything
    };
    lambda();
} // the lambda closure object has now gone out of scope</code></pre>
<p>In this example, the lambda object is defined with two captures: value and <code>sharedFoo</code>. When <code>lambda()</code> is called, the lambda object is created on the stack, and the captures are copied into the closure object. When the coroutine is suspended, the lambda object goes out of scope, and the closure object is destroyed. When the coroutine is resumed, the captured variables may have been destroyed, resulting in use-after-free bugs.</p>
<p>In conclusion, the use of coroutine lambdas with non-empty capture lists can lead to use-after-free errors when resuming the coroutine after the closure object has been destroyed. This check helps prevent such errors by flagging C++20 coroutine lambdas with non-empty capture lists and suggesting avoiding captures or ensuring the lambda closure object has a guaranteed lifetime.</p>
<p>Following these guidelines can help ensure the safe and reliable use of coroutine lambdas in C++ code.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-capturing-lambda-coroutines.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-const-or-ref-data-members</key>
    <name>cppcoreguidelines-avoid-const-or-ref-data-members</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-const-or-ref-data-members</p>
</div>
<h1 id="cppcoreguidelines-avoid-const-or-ref-data-members">cppcoreguidelines-avoid-const-or-ref-data-members</h1>
<p>This check warns when structs or classes that are copyable or movable, and have const-qualified or reference (lvalue or rvalue) data members. Having such members is rarely useful, and makes the class only copy-constructible but not copy-assignable.</p>
<p>Examples:</p>
<pre class="c++"><code>// Bad, const-qualified member
struct Const {
  const int x;
}

// Good:
class Foo {
 public:
  int get() const { return x; }
 private:
  int x;
};

// Bad, lvalue reference member
struct Ref {
  int&amp; x;
};

// Good:
struct Foo {
  int* x;
  std::unique_ptr&lt;int&gt; x;
  std::shared_ptr&lt;int&gt; x;
  gsl::not_null&lt;int&gt; x;
};

// Bad, rvalue reference member
struct RefRef {
  int&amp;&amp; x;
};</code></pre>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-constref">C.12</a> from the C++ Core Guidelines.</p>
<p>Further reading: <a href="https://quuxplusone.github.io/blog/2022/01/23/dont-const-all-the-things/#data-members-never-const">Data members: Never const</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-const-or-ref-data-members.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-do-while</key>
    <name>cppcoreguidelines-avoid-do-while</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-do-while</p>
</div>
<h1 id="cppcoreguidelines-avoid-do-while">cppcoreguidelines-avoid-do-while</h1>
<p>Warns when using <code>do-while</code> loops. They are less readable than plain <code>while</code> loops, since the termination condition is at the end and the condition is not checked prior to the first iteration. This can lead to subtle bugs.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-do">ES.75</a> from the C++ Core Guidelines.</p>
<p>Examples:</p>
<pre class="c++"><code>int x;
do {
    std::cin &gt;&gt; x;
    // ...
} while (x &lt; 0);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>Ignore the check when analyzing macros. This is useful for safely defining function-like macros:</p>
<pre class="c++"><code>#define FOO_BAR(x) \
do { \
  foo(x); \
  bar(x); \
} while(0)</code></pre>
<p>Defaults to <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-do-while.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-goto</key>
    <name>cppcoreguidelines-avoid-goto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-goto</p>
</div>
<h1 id="cppcoreguidelines-avoid-goto">cppcoreguidelines-avoid-goto</h1>
<p>The usage of <code>goto</code> for control flow is error prone and should be replaced with looping constructs. Only forward jumps in nested loops are accepted.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es76-avoid-goto">ES.76</a> from the C++ Core Guidelines and <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">6.3.1</a> from High Integrity C++ Coding Standard.</p>
<p>For more information on why to avoid programming with <code>goto</code> you can read the famous paper <a href="https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF">A Case against the GO TO Statement.</a>.</p>
<p>The check diagnoses <code>goto</code> for backward jumps in every language mode. These should be replaced with <span class="title-ref">C/C++</span> looping constructs.</p>
<pre class="c++"><code>// Bad, handwritten for loop.
int i = 0;
// Jump label for the loop
loop_start:
do_some_operation();

if (i &lt; 100) {
  ++i;
  goto loop_start;
}

// Better
for(int i = 0; i &lt; 100; ++i)
  do_some_operation();</code></pre>
<p>Modern C++ needs <code>goto</code> only to jump out of nested loops.</p>
<pre class="c++"><code>for(int i = 0; i &lt; 100; ++i) {
  for(int j = 0; j &lt; 100; ++j) {
    if (i * j &gt; 500)
      goto early_exit;
  }
}

early_exit:
some_operation();</code></pre>
<p>All other uses of <code>goto</code> are diagnosed in <span class="title-ref">C++</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-goto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-magic-numbers</key>
    <name>cppcoreguidelines-avoid-magic-numbers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-magic-numbers</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/magic-numbers.html">

</div>
<h1 id="cppcoreguidelines-avoid-magic-numbers">cppcoreguidelines-avoid-magic-numbers</h1>
<p>The cppcoreguidelines-avoid-magic-numbers check is an alias, please see <code class="interpreted-text" role="doc">readability-magic-numbers &lt;../readability/magic-numbers&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-magic-numbers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-non-const-global-variables</key>
    <name>cppcoreguidelines-avoid-non-const-global-variables</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-non-const-global-variables</p>
</div>
<h1 id="cppcoreguidelines-avoid-non-const-global-variables">cppcoreguidelines-avoid-non-const-global-variables</h1>
<p>Finds non-const global variables as described in <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i2-avoid-non-const-global-variables">I.2</a> of C++ Core Guidelines. As <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-global">R.6</a> of C++ Core Guidelines is a duplicate of rule <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i2-avoid-non-const-global-variables">I.2</a> it also covers that rule.</p>
<pre class="c++"><code>char a;  // Warns!
const char b =  0;

namespace some_namespace
{
    char c;  // Warns!
    const char d = 0;
}

char * c_ptr1 = &amp;some_namespace::c;  // Warns!
char *const c_const_ptr = &amp;some_namespace::c;  // Warns!
char &amp; c_reference = some_namespace::c;  // Warns!

class Foo  // No Warnings inside Foo, only namespace scope is covered
{
public:
    char e = 0;
    const char f = 0;
protected:
    char g = 0;
private:
    char h = 0;
};</code></pre>
<p>The variables <code>a</code>, <code>c</code>, <code>c_ptr1</code>, <code>c_const_ptr</code> and <code>c_reference</code> will all generate warnings since they are either a non-const globally accessible variable, a pointer or a reference providing global access to non-const data or both.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-non-const-global-variables.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-avoid-reference-coroutine-parameters</key>
    <name>cppcoreguidelines-avoid-reference-coroutine-parameters</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-reference-coroutine-parameters</p>
</div>
<h1 id="cppcoreguidelines-avoid-reference-coroutine-parameters">cppcoreguidelines-avoid-reference-coroutine-parameters</h1>
<p>Warns when a coroutine accepts reference parameters. After a coroutine suspend point, references could be dangling and no longer valid. Instead, pass parameters as values.</p>
<p>Examples:</p>
<pre class="c++"><code>std::future&lt;int&gt; someCoroutine(int&amp; val) {
  co_await ...;
  // When the coroutine is resumed, &#39;val&#39; might no longer be valid.
  if (val) ...
}</code></pre>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rcoro-reference-parameters">CP.53</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/avoid-reference-coroutine-parameters.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-c-copy-assignment-signature</key>
    <name>cppcoreguidelines-c-copy-assignment-signature</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-c-copy-assignment-signature</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/unconventional-assign-operator.html">

</div>
<h1 id="cppcoreguidelines-c-copy-assignment-signature">cppcoreguidelines-c-copy-assignment-signature</h1>
<p>The <span class="title-ref">cppcoreguidelines-c-copy-assignment-signature</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-unconventional-assign-operator &lt;../misc/unconventional-assign-operator&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/c-copy-assignment-signature.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-explicit-virtual-functions</key>
    <name>cppcoreguidelines-explicit-virtual-functions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-explicit-virtual-functions</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-override.html">

</div>
<h1 id="cppcoreguidelines-explicit-virtual-functions">cppcoreguidelines-explicit-virtual-functions</h1>
<p>The <span class="title-ref">cppcoreguidelines-explicit-virtual-functions</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-override &lt;../modernize/use-override&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/explicit-virtual-functions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-init-variables</key>
    <name>cppcoreguidelines-init-variables</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-init-variables</p>
</div>
<h1 id="cppcoreguidelines-init-variables">cppcoreguidelines-init-variables</h1>
<p>Checks whether there are local variables that are declared without an initial value. These may lead to unexpected behavior if there is a code path that reads the variable before assigning to it.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-init">Type safety (Type.5)</a> profile and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-always">ES.20</a> from the C++ Core Guidelines.</p>
<p>Only integers, booleans, floats, doubles and pointers are checked. The fix option initializes all detected values with the value of zero. An exception is float and double types, which are initialized to NaN.</p>
<p>As an example a function that looks like this:</p>
<pre class="c++"><code>void function() {
  int x;
  char *txt;
  double d;

  // Rest of the function.
}</code></pre>
<p>Would be rewritten to look like this:</p>
<pre class="c++"><code>#include &lt;math.h&gt;

void function() {
  int x = 0;
  char *txt = nullptr;
  double d = NAN;

  // Rest of the function.
}</code></pre>
<p>It warns for the uninitialized enum case, but without a FixIt:</p>
<pre class="c++"><code>enum A {A1, A2, A3};
enum A_c : char { A_c1, A_c2, A_c3 };
enum class B { B1, B2, B3 };
enum class B_i : int { B_i1, B_i2, B_i3 };
void function() {
  A a;     // Warning: variable &#39;a&#39; is not initialized
  A_c a_c; // Warning: variable &#39;a_c&#39; is not initialized
  B b;     // Warning: variable &#39;b&#39; is not initialized
  B_i b_i; // Warning: variable &#39;b_i&#39; is not initialized
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>MathHeader</p>
<p>A string specifying the header to include to get the definition of <span class="title-ref">NAN</span>. Default is <span class="title-ref">&lt;math.h&gt;</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/init-variables.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-interfaces-global-init</key>
    <name>cppcoreguidelines-interfaces-global-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-interfaces-global-init</p>
</div>
<h1 id="cppcoreguidelines-interfaces-global-init">cppcoreguidelines-interfaces-global-init</h1>
<p>This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Ri-global-init">I.22</a> from the C++ Core Guidelines.</p>
<p>Note that currently this does not flag calls to non-constexpr functions, and therefore globals could still be accessed from functions themselves.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/interfaces-global-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cppcoreguidelines-macro-to-enum</key>
    <name>cppcoreguidelines-macro-to-enum</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-macro-to-enum</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/macro-to-enum.html">

</div>
<h1 id="cppcoreguidelines-macro-to-enum">cppcoreguidelines-macro-to-enum</h1>
<p>The cppcoreguidelines-macro-to-enum check is an alias, please see <code class="interpreted-text" role="doc">modernize-macro-to-enum &lt;../modernize/macro-to-enum&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/macro-to-enum.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-macro-usage</key>
    <name>cppcoreguidelines-macro-usage</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-macro-usage</p>
</div>
<h1 id="cppcoreguidelines-macro-usage">cppcoreguidelines-macro-usage</h1>
<p>Finds macro usage that is considered problematic because better language constructs exist for the task.</p>
<p>The relevant sections in the C++ Core Guidelines are <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es31-dont-use-macros-for-constants-or-functions">ES.31</a>, and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es32-use-all_caps-for-all-macro-names">ES.32</a>.</p>
<p>Examples:</p>
<pre class="c++"><code>#define C 0
#define F1(x, y) ((a) &gt; (b) ? (a) : (b))
#define F2(...) (__VA_ARGS__)
#define COMMA ,
#define NORETURN [[noreturn]]
#define DEPRECATED attribute((deprecated))
#if LIB_EXPORTS
#define DLLEXPORTS __declspec(dllexport)
#else
#define DLLEXPORTS __declspec(dllimport)
#endif</code></pre>
<p>results in the following warnings:</p>
<pre><code>4 warnings generated.
test.cpp:1:9: warning: macro &#39;C&#39; used to declare a constant; consider using a &#39;constexpr&#39; constant [cppcoreguidelines-macro-usage]
#define C 0
        ^
test.cpp:2:9: warning: function-like macro &#39;F1&#39; used; consider a &#39;constexpr&#39; template function [cppcoreguidelines-macro-usage]
#define F1(x, y) ((a) &gt; (b) ? (a) : (b))
        ^
test.cpp:3:9: warning: variadic macro &#39;F2&#39; used; consider using a &#39;constexpr&#39; variadic template function [cppcoreguidelines-macro-usage]
#define F2(...) (__VA_ARGS__)
        ^</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowedRegexp</p>
<p>A regular expression to filter allowed macros. For example <span class="title-ref">DEBUG*|LIBTORRENT*|TORRENT*|UNI*</span> could be applied to filter <span class="title-ref">libtorrent</span>. Default value is <span class="title-ref">^DEBUG_*</span>.</p>
</div>
<div class="option">
<p>CheckCapsOnly</p>
<p>Boolean flag to warn on all macros except those with CAPS_ONLY names. This option is intended to ease introduction of this check into older code bases. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoreCommandLineMacros</p>
<p>Boolean flag to toggle ignoring command-line-defined macros. Default value is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/macro-usage.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-misleading-capture-default-by-value</key>
    <name>cppcoreguidelines-misleading-capture-default-by-value</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-misleading-capture-default-by-value</p>
</div>
<h1 id="cppcoreguidelines-misleading-capture-default-by-value">cppcoreguidelines-misleading-capture-default-by-value</h1>
<p>Warns when lambda specify a by-value capture default and capture <code>this</code>.</p>
<p>By-value capture defaults in member functions can be misleading about whether data members are captured by value or reference. This occurs because specifying the capture default <code>[=]</code> actually captures the <code>this</code> pointer by value, not the data members themselves. As a result, data members are still indirectly accessed via the captured <code>this</code> pointer, which essentially means they are being accessed by reference. Therefore, even when using <code>[=]</code>, data members are effectively captured by reference, which might not align with the user's expectations.</p>
<p>Examples:</p>
<pre class="c++"><code>struct AClass {
  int member;
  void misleadingLogic() {
    int local = 0;
    member = 0;
    auto f = [=]() mutable {
      local += 1;
      member += 1;
    };
    f();
    // Here, local is 0 but member is 1
  }

  void clearLogic() {
    int local = 0;
    member = 0;
    auto f = [this, local]() mutable {
      local += 1;
      member += 1;
    };
    f();
    // Here, local is 0 but member is 1
  }
};</code></pre>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f54-when-writing-a-lambda-that-captures-this-or-any-class-data-member-dont-use--default-capture">F.54</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/misleading-capture-default-by-value.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-missing-std-forward</key>
    <name>cppcoreguidelines-missing-std-forward</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-missing-std-forward</p>
</div>
<h1 id="cppcoreguidelines-missing-std-forward">cppcoreguidelines-missing-std-forward</h1>
<p>Warns when a forwarding reference parameter is not forwarded inside the function body.</p>
<p>Example:</p>
<pre class="c++"><code>template &lt;class T&gt;
void wrapper(T&amp;&amp; t) {
  impl(std::forward&lt;T&gt;(t), 1, 2); // Correct
}

template &lt;class T&gt;
void wrapper2(T&amp;&amp; t) {
  impl(t, 1, 2); // Oops - should use std::forward&lt;T&gt;(t)
}

template &lt;class T&gt;
void wrapper3(T&amp;&amp; t) {
  impl(std::move(t), 1, 2); // Also buggy - should use std::forward&lt;T&gt;(t)
}

template &lt;class F&gt;
void wrapper_function(F&amp;&amp; f) {
  std::forward&lt;F&gt;(f)(1, 2); // Correct
}

template &lt;class F&gt;
void wrapper_function2(F&amp;&amp; f) {
  f(1, 2); // Incorrect - may not invoke the desired qualified function operator
}</code></pre>
<p>This check implements <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-forward">F.19</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/missing-std-forward.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-narrowing-conversions</key>
    <name>cppcoreguidelines-narrowing-conversions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-narrowing-conversions</p>
</div>
<h1 id="cppcoreguidelines-narrowing-conversions">cppcoreguidelines-narrowing-conversions</h1>
<p>Checks for silent narrowing conversions, e.g: <code>int i = 0; i += 0.1;</code>. While the issue is obvious in this former example, it might not be so in the following: <code>void MyClass::f(double d) { int_member_ += d; }</code>.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es46-avoid-lossy-narrowing-truncating-arithmetic-conversions">ES.46</a> from the C++ Core Guidelines.</p>
<dl>
<dt>We enforce only part of the guideline, more specifically, we flag narrowing conversions from:</dt>
<dd><ul>
<li>an integer to a narrower integer (e.g. <code>char</code> to <code>unsigned char</code>) if WarnOnIntegerNarrowingConversion Option is set,</li>
<li>an integer to a narrower floating-point (e.g. <code>uint64_t</code> to <code>float</code>) if WarnOnIntegerToFloatingPointNarrowingConversion Option is set,</li>
<li>a floating-point to an integer (e.g. <code>double</code> to <code>int</code>),</li>
<li>a floating-point to a narrower floating-point (e.g. <code>double</code> to <code>float</code>) if WarnOnFloatingPointNarrowingConversion Option is set.</li>
</ul>
</dd>
<dt>This check will flag:</dt>
<dd><ul>
<li>All narrowing conversions that are not marked by an explicit cast (c-style or <code>static_cast</code>). For example: <code>int i = 0; i += 0.1;</code>, <code>void f(int); f(0.1);</code>,</li>
<li>All applications of binary operators with a narrowing conversions. For example: <code>int i; i+= 0.1;</code>.</li>
</ul>
</dd>
</dl>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnIntegerNarrowingConversion</p>
<p>When <span class="title-ref">true</span>, the check will warn on narrowing integer conversion (e.g. <code>int</code> to <code>size_t</code>). <span class="title-ref">true</span> by default.</p>
</div>
<div class="option">
<p>WarnOnIntegerToFloatingPointNarrowingConversion</p>
<p>When <span class="title-ref">true</span>, the check will warn on narrowing integer to floating-point conversion (e.g. <code>size_t</code> to <code>double</code>). <span class="title-ref">true</span> by default.</p>
</div>
<div class="option">
<p>WarnOnFloatingPointNarrowingConversion</p>
<p>When <span class="title-ref">true</span>, the check will warn on narrowing floating point conversion (e.g. <code>double</code> to <code>float</code>). <span class="title-ref">true</span> by default.</p>
</div>
<div class="option">
<p>WarnWithinTemplateInstantiation</p>
<p>When <span class="title-ref">true</span>, the check will warn on narrowing conversions within template instantiations. <span class="title-ref">false</span> by default.</p>
</div>
<div class="option">
<p>WarnOnEquivalentBitWidth</p>
<p>When <span class="title-ref">true</span>, the check will warn on narrowing conversions that arise from casting between types of equivalent bit width. (e.g. <span class="title-ref">int n = uint(0);</span> or <span class="title-ref">long long n = double(0);</span>) <span class="title-ref">true</span> by default.</p>
</div>
<div class="option">
<p>IgnoreConversionFromTypes</p>
<p>Narrowing conversions from any type in this semicolon-separated list will be ignored. This may be useful to weed out commonly occurring, but less commonly problematic assignments such as <span class="title-ref">int n = std::vector&lt;char&gt;().size();</span> or <span class="title-ref">int n = std::difference(it1, it2);</span>. The default list is empty, but one suggested list for a legacy codebase would be <span class="title-ref">size_t;ptrdiff_t;size_type;difference_type</span>.</p>
</div>
<div class="option">
<p>PedanticMode</p>
<p>When <span class="title-ref">true</span>, the check will warn on assigning a floating point constant to an integer value even if the floating point value is exactly representable in the destination type (e.g. <code>int i = 1.0;</code>). <span class="title-ref">false</span> by default.</p>
</div>
<h2 id="faq">FAQ</h2>
<blockquote>
<ul>
<li>What does "narrowing conversion from 'int' to 'float'" mean?</li>
</ul>
</blockquote>
<p>An IEEE754 Floating Point number can represent all integer values in the range [-2^PrecisionBits, 2^PrecisionBits] where PrecisionBits is the number of bits in the mantissa.</p>
<p>For <code>float</code> this would be [-2^23, 2^23], where <code>int</code> can represent values in the range [-2^31, 2^31-1].</p>
<blockquote>
<ul>
<li>What does "implementation-defined" mean?</li>
</ul>
</blockquote>
<p>You may have encountered messages like "narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined". The C/C++ standard does not mandate two's complement for signed integers, and so the compiler is free to define what the semantics are for converting an unsigned integer to signed integer. Clang's implementation uses the two's complement format.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/narrowing-conversions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cppcoreguidelines-no-malloc</key>
    <name>cppcoreguidelines-no-malloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-no-malloc</p>
</div>
<h1 id="cppcoreguidelines-no-malloc">cppcoreguidelines-no-malloc</h1>
<p>This check handles C-Style memory management using <code>malloc()</code>, <code>realloc()</code>, <code>calloc()</code> and <code>free()</code>. It warns about its use and tries to suggest the use of an appropriate RAII object. Furthermore, it can be configured to check against a user-specified list of functions that are used for memory management (e.g. <code>posix_memalign()</code>).</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-mallocfree">R.10</a> from the C++ Core Guidelines.</p>
<p>There is no attempt made to provide fix-it hints, since manual resource management isn't easily transformed automatically into RAII.</p>
<pre class="c++"><code>// Warns each of the following lines.
// Containers like std::vector or std::string should be used.
char* some_string = (char*) malloc(sizeof(char) * 20);
char* some_string = (char*) realloc(sizeof(char) * 30);
free(some_string);

int* int_array = (int*) calloc(30, sizeof(int));

// Rather use a smartpointer or stack variable.
struct some_struct* s = (struct some_struct*) malloc(sizeof(struct some_struct));</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Allocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::malloc;::calloc</code>.</p>
</div>
<div class="option">
<p>Deallocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::free</code>.</p>
</div>
<div class="option">
<p>Reallocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::realloc</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/no-malloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-no-suspend-with-lock</key>
    <name>cppcoreguidelines-no-suspend-with-lock</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-no-suspend-with-lock</p>
</div>
<h1 id="cppcoreguidelines-no-suspend-with-lock">cppcoreguidelines-no-suspend-with-lock</h1>
<p>Flags coroutines that suspend while a lock guard is in scope at the suspension point.</p>
<p>When a coroutine suspends, any mutexes held by the coroutine will remain locked until the coroutine resumes and eventually destructs the lock guard. This can lead to long periods with a mutex held and runs the risk of deadlock.</p>
<p>Instead, locks should be released before suspending a coroutine.</p>
<p>This check only checks suspending coroutines while a lock_guard is in scope; it does not consider manual locking or unlocking of mutexes, e.g., through calls to <code>std::mutex::lock()</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>future bad_coro() {
  std::lock_guard lock{mtx};
  ++some_counter;
  co_await something(); // Suspending while holding a mutex
}

future good_coro() {
  {
    std::lock_guard lock{mtx};
    ++some_counter;
  }
  // Destroy the lock_guard to release the mutex before suspending the coroutine
  co_await something(); // Suspending while holding a mutex
}</code></pre>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rcoro-locks">CP.52</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/no-suspend-with-lock.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-noexcept-destructor</key>
    <name>cppcoreguidelines-noexcept-destructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-noexcept-destructor</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/noexcept-destructor.html">

</div>
<h1 id="cppcoreguidelines-noexcept-destructor">cppcoreguidelines-noexcept-destructor</h1>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c37-make-destructors-noexcept">C.37</a> from the C++ Core Guidelines.</p>
<p>The <span class="title-ref">cppcoreguidelines-noexcept-destructor</span> check is an alias, please see <code class="interpreted-text" role="doc">performance-noexcept-destructor &lt;../performance/noexcept-destructor&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/noexcept-destructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-noexcept-move-operations</key>
    <name>cppcoreguidelines-noexcept-move-operations</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-noexcept-move-operations</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/noexcept-move-constructor.html">

</div>
<h1 id="cppcoreguidelines-noexcept-move-operations">cppcoreguidelines-noexcept-move-operations</h1>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c66-make-move-operations-noexcept">C.66</a> from the C++ Core Guidelines.</p>
<p>The <span class="title-ref">cppcoreguidelines-noexcept-move-operations</span> check is an alias, please see <code class="interpreted-text" role="doc">performance-noexcept-move-constructor &lt;../performance/noexcept-move-constructor&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/noexcept-move-operations.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-noexcept-swap</key>
    <name>cppcoreguidelines-noexcept-swap</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-noexcept-swap</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/noexcept-swap.html">

</div>
<h1 id="cppcoreguidelines-noexcept-swap">cppcoreguidelines-noexcept-swap</h1>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c83-for-value-like-types-consider-providing-a-noexcept-swap-function">C.83</a> , <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c84-a-swap-function-must-not-fail">C.84</a> and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c85-make-swap-noexcept">C.85</a> from the C++ Core Guidelines.</p>
<p>The <span class="title-ref">cppcoreguidelines-noexcept-swap check</span> is an alias, please see <code class="interpreted-text" role="doc">performance-noexcept-swap &lt;../performance/noexcept-swap&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/noexcept-swap.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-non-private-member-variables-in-classes</key>
    <name>cppcoreguidelines-non-private-member-variables-in-classes</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-non-private-member-variables-in-classes</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/non-private-member-variables-in-classes.html">

</div>
<h1 id="cppcoreguidelines-non-private-member-variables-in-classes">cppcoreguidelines-non-private-member-variables-in-classes</h1>
<p>The cppcoreguidelines-non-private-member-variables-in-classes check is an alias, please see <code class="interpreted-text" role="doc">misc-non-private-member-variables-in-classes &lt;../misc/non-private-member-variables-in-classes&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/non-private-member-variables-in-classes.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-owning-memory</key>
    <name>cppcoreguidelines-owning-memory</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-owning-memory</p>
</div>
<h1 id="cppcoreguidelines-owning-memory">cppcoreguidelines-owning-memory</h1>
<p>This check implements the type-based semantics of <code>gsl::owner&lt;T*&gt;</code>, which allows static analysis on code, that uses raw pointers to handle resources like dynamic memory, but won't introduce RAII concepts.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i11-never-transfer-ownership-by-a-raw-pointer-t-or-reference-t">I.11</a>, <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c33-if-a-class-has-an-owning-pointer-member-define-a-destructor">C.33</a>, <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r3-a-raw-pointer-a-t-is-non-owning">R.3</a> and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#SS-views">GSL.Views</a> from the C++ Core Guidelines. The definition of a <code>gsl::owner&lt;T*&gt;</code> is straight forward</p>
<pre class="c++"><code>namespace gsl { template &lt;typename T&gt; owner = T; }</code></pre>
<p>It is therefore simple to introduce the owner even without using an implementation of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-gsl">Guideline Support Library</a>.</p>
<p>All checks are purely type based and not (yet) flow sensitive.</p>
<p>The following examples will demonstrate the correct and incorrect initializations of owners, assignment is handled the same way. Note that both <code>new</code> and <code>malloc()</code>-like resource functions are considered to produce resources.</p>
<pre class="c++"><code>// Creating an owner with factory functions is checked.
gsl::owner&lt;int*&gt; function_that_returns_owner() { return gsl::owner&lt;int*&gt;(new int(42)); }

// Dynamic memory must be assigned to an owner
int* Something = new int(42); // BAD, will be caught
gsl::owner&lt;int*&gt; Owner = new int(42); // Good
gsl::owner&lt;int*&gt; Owner = new int[42]; // Good as well

// Returned owner must be assigned to an owner
int* Something = function_that_returns_owner(); // Bad, factory function
gsl::owner&lt;int*&gt; Owner = function_that_returns_owner(); // Good, result lands in owner

// Something not a resource or owner should not be assigned to owners
int Stack = 42;
gsl::owner&lt;int*&gt; Owned = &amp;Stack; // Bad, not a resource assigned</code></pre>
<p>In the case of dynamic memory as resource, only <code>gsl::owner&lt;T*&gt;</code> variables are allowed to be deleted.</p>
<pre class="c++"><code>// Example Bad, non-owner as resource handle, will be caught.
int* NonOwner = new int(42); // First warning here, since new must land in an owner
delete NonOwner; // Second warning here, since only owners are allowed to be deleted

// Example Good, Ownership correctly stated
gsl::owner&lt;int*&gt; Owner = new int(42); // Good
delete Owner; // Good as well, statically enforced, that only owners get deleted</code></pre>
<p>The check will furthermore ensure, that functions, that expect a <code>gsl::owner&lt;T*&gt;</code> as argument get called with either a <code>gsl::owner&lt;T*&gt;</code> or a newly created resource.</p>
<pre class="c++"><code>void expects_owner(gsl::owner&lt;int*&gt; o) { delete o; }

// Bad Code
int NonOwner = 42;
expects_owner(&amp;NonOwner); // Bad, will get caught

// Good Code
gsl::owner&lt;int*&gt; Owner = new int(42);
expects_owner(Owner); // Good
expects_owner(new int(42)); // Good as well, recognized created resource

// Port legacy code for better resource-safety
gsl::owner&lt;FILE*&gt; File = fopen(&quot;my_file.txt&quot;, &quot;rw+&quot;);
FILE* BadFile = fopen(&quot;another_file.txt&quot;, &quot;w&quot;); // Bad, warned

// ... use the file

fclose(File); // Ok, File is annotated as &#39;owner&lt;&gt;&#39;
fclose(BadFile); // BadFile is not an &#39;owner&lt;&gt;&#39;, will be warned</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>LegacyResourceProducers</p>
<p>Semicolon-separated list of fully qualified names of legacy functions that create resources but cannot introduce <code>gsl::owner&lt;&gt;</code>. Defaults to <code>::malloc;::aligned_alloc;::realloc;::calloc;::fopen;::freopen;::tmpfile</code>.</p>
</div>
<div class="option">
<p>LegacyResourceConsumers</p>
<p>Semicolon-separated list of fully qualified names of legacy functions expecting resource owners as pointer arguments but cannot introduce <code>gsl::owner&lt;&gt;</code>. Defaults to <code>::free;::realloc;::freopen;::fclose</code>.</p>
</div>
<h2 id="limitations">Limitations</h2>
<p>Using <code>gsl::owner&lt;T*&gt;</code> in a typedef or alias is not handled correctly.</p>
<pre class="c++"><code>using heap_int = gsl::owner&lt;int*&gt;;
heap_int allocated = new int(42); // False positive!</code></pre>
<p>The <code>gsl::owner&lt;T*&gt;</code> is declared as a templated type alias. In template functions and classes, like in the example below, the information of the type aliases gets lost. Therefore using <code>gsl::owner&lt;T*&gt;</code> in a heavy templated code base might lead to false positives.</p>
<p>Known code constructs that do not get diagnosed correctly are:</p>
<ul>
<li><code>std::exchange</code></li>
<li><code>std::vector&lt;gsl::owner&lt;T*&gt;&gt;</code></li>
</ul>
<pre class="c++"><code>// This template function works as expected. Type information doesn&#39;t get lost.
template &lt;typename T&gt;
void delete_owner(gsl::owner&lt;T*&gt; owned_object) {
  delete owned_object; // Everything alright
}

gsl::owner&lt;int*&gt; function_that_returns_owner() { return gsl::owner&lt;int*&gt;(new int(42)); }

// Type deduction does not work for auto variables.
// This is caught by the check and will be noted accordingly.
auto OwnedObject = function_that_returns_owner(); // Type of OwnedObject will be int*

// Problematic function template that looses the typeinformation on owner
template &lt;typename T&gt;
void bad_template_function(T some_object) {
  // This line will trigger the warning, that a non-owner is assigned to an owner
  gsl::owner&lt;T*&gt; new_owner = some_object;
}

// Calling the function with an owner still yields a false positive.
bad_template_function(gsl::owner&lt;int*&gt;(new int(42)));


// The same issue occurs with templated classes like the following.
template &lt;typename T&gt;
class OwnedValue {
public:
  const T getValue() const { return _val; }
private:
  T _val;
};

// Code, that yields a false positive.
OwnedValue&lt;gsl::owner&lt;int*&gt;&gt; Owner(new int(42)); // Type deduction yield T -&gt; int *
// False positive, getValue returns int* and not gsl::owner&lt;int*&gt;
gsl::owner&lt;int*&gt; OwnedInt = Owner.getValue();</code></pre>
<p>Another limitation of the current implementation is only the type based checking. Suppose you have code like the following:</p>
<pre class="c++"><code>// Two owners with assigned resources
gsl::owner&lt;int*&gt; Owner1 = new int(42);
gsl::owner&lt;int*&gt; Owner2 = new int(42);

Owner2 = Owner1; // Conceptual Leak of initial resource of Owner2!
Owner1 = nullptr;</code></pre>
<p>The semantic of a <code>gsl::owner&lt;T*&gt;</code> is mostly like a <code>std::unique_ptr&lt;T&gt;</code>, therefore assignment of two <code>gsl::owner&lt;T*&gt;</code> is considered a move, which requires that the resource <code>Owner2</code> must have been released before the assignment. This kind of condition could be caught in later improvements of this check with flowsensitive analysis. Currently, the <span class="title-ref">Clang Static Analyzer</span> catches this bug for dynamic memory, but not for general types of resources.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/owning-memory.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cppcoreguidelines-prefer-member-initializer</key>
    <name>cppcoreguidelines-prefer-member-initializer</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-prefer-member-initializer</p>
</div>
<h1 id="cppcoreguidelines-prefer-member-initializer">cppcoreguidelines-prefer-member-initializer</h1>
<p>Finds member initializations in the constructor body which can be converted into member initializers of the constructor instead. This not only improves the readability of the code but also positively affects its performance. Class-member assignments inside a control statement or following the first control statement are ignored.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c49-prefer-initialization-to-assignment-in-constructors">C.49</a> from the C++ Core Guidelines.</p>
<p>If the language version is <span class="title-ref">C++ 11</span> or above, the constructor is the default constructor of the class, the field is not a bitfield (only in case of earlier language version than <span class="title-ref">C++ 20</span>), furthermore the assigned value is a literal, negated literal or <code>enum</code> constant then the preferred place of the initialization is at the class member declaration.</p>
<p>This latter rule is <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c48-prefer-in-class-initializers-to-member-initializers-in-constructors-for-constant-initializers">C.48</a> from the C++ Core Guidelines.</p>
<p>Please note, that this check does not enforce this latter rule for initializations already implemented as member initializers. For that purpose see check <code class="interpreted-text" role="doc">modernize-use-default-member-init &lt;../modernize/use-default-member-init&gt;</code>.</p>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Enforcement of rule C.48 in this check is deprecated, to be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19 (only C.49 will be enforced by this check then). Please use <code class="interpreted-text" role="doc">cppcoreguidelines-use-default-member-init &lt;../cppcoreguidelines/use-default-member-init&gt;</code> to enforce rule C.48.</p>
</div>
<h2 id="example-1">Example 1</h2>
<pre class="c++"><code>class C {
  int n;
  int m;
public:
  C() {
    n = 1; // Literal in default constructor
    if (dice())
      return;
    m = 1;
  }
};</code></pre>
<p>Here <code>n</code> can be initialized using a default member initializer, unlike <code>m</code>, as <code>m</code>'s initialization follows a control statement (<code>if</code>):</p>
<pre class="c++"><code>class C {
  int n{1};
  int m;
public:
  C() {
    if (dice())
      return;
    m = 1;
  }
};</code></pre>
<h2 id="example-2">Example 2</h2>
<pre class="c++"><code>class C {
  int n;
  int m;
public:
  C(int nn, int mm) {
    n = nn; // Neither default constructor nor literal
    if (dice())
      return;
    m = mm;
  }
};</code></pre>
<p>Here <code>n</code> can be initialized in the constructor initialization list, unlike <code>m</code>, as <code>m</code>'s initialization follows a control statement (<code>if</code>):</p>
<pre class="c++"><code>C(int nn, int mm) : n(nn) {
  if (dice())
    return;
  m = mm;
}</code></pre>
<div class="option">
<p>UseAssignment</p>
<p>Note: this option is deprecated, to be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the <span class="title-ref">UseAssignment</span> option from <code class="interpreted-text" role="doc">cppcoreguidelines-use-default-member-init &lt;../cppcoreguidelines/use-default-member-init&gt;</code> instead.</p>
<p>If this option is set to <span class="title-ref">true</span> (by default <span class="title-ref">UseAssignment</span> from <code class="interpreted-text" role="doc">modernize-use-default-member-init
&lt;../modernize/use-default-member-init&gt;</code> will be used), the check will initialize members with an assignment. In this case the fix of the first example looks like this:</p>
</div>
<pre class="c++"><code>class C {
  int n = 1;
  int m;
public:
  C() {
    if (dice())
      return;
    m = 1;
  }
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/prefer-member-initializer.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-bounds-array-to-pointer-decay</key>
    <name>cppcoreguidelines-pro-bounds-array-to-pointer-decay</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-array-to-pointer-decay</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-array-to-pointer-decay">cppcoreguidelines-pro-bounds-array-to-pointer-decay</h1>
<p>This check flags all array to pointer decays.</p>
<p>Pointers should not be used as arrays. <code>span&lt;T&gt;</code> is a bounds-checked, safe alternative to using pointers to access arrays.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-bounds-decay">Bounds safety (Bounds 3)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-bounds-array-to-pointer-decay.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-bounds-constant-array-index</key>
    <name>cppcoreguidelines-pro-bounds-constant-array-index</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-constant-array-index</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-constant-array-index">cppcoreguidelines-pro-bounds-constant-array-index</h1>
<p>This check flags all array subscript expressions on static arrays and <code>std::arrays</code> that either do not have a constant integer expression index or are out of bounds (for <code>std::array</code>). For out-of-bounds checking of static arrays, see the <span class="title-ref">-Warray-bounds</span> Clang diagnostic.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-bounds-arrayindex">Bounds safety (Bounds 2)</a> profile from the C++ Core Guidelines.</p>
<p>Optionally, this check can generate fixes using <code>gsl::at</code> for indexing.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>GslHeader</p>
<p>The check can generate fixes after this option has been set to the name of the include file that contains <code>gsl::at()</code>, e.g. <span class="title-ref">"gsl/gsl.h"</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-bounds-constant-array-index.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-bounds-pointer-arithmetic</key>
    <name>cppcoreguidelines-pro-bounds-pointer-arithmetic</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-pointer-arithmetic</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-pointer-arithmetic">cppcoreguidelines-pro-bounds-pointer-arithmetic</h1>
<p>This check flags all usage of pointer arithmetic, because it could lead to an invalid pointer. Subtraction of two pointers is not flagged by this check.</p>
<p>Pointers should only refer to single objects, and pointer arithmetic is fragile and easy to get wrong. <code>span&lt;T&gt;</code> is a bounds-checked, safe type for accessing arrays of data.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-bounds-arithmetic">Bounds safety (Bounds 1)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-bounds-pointer-arithmetic.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-const-cast</key>
    <name>cppcoreguidelines-pro-type-const-cast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-const-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-const-cast">cppcoreguidelines-pro-type-const-cast</h1>
<p>Imposes limitations on the use of <code>const_cast</code> within C++ code. It depends on the <code class="interpreted-text" role="option">StrictMode</code> option setting to determine whether it should flag all instances of <code>const_cast</code> or only those that remove either <code>const</code> or <code>volatile</code> qualifier.</p>
<p>Modifying a variable that has been declared as <code>const</code> in C++ is generally considered undefined behavior, and this remains true even when using <code>const_cast</code>. In C++, the <code>const</code> qualifier indicates that a variable is intended to be read-only, and the compiler enforces this by disallowing any attempts to change the value of that variable.</p>
<p>Removing the <code>volatile</code> qualifier in C++ can have serious consequences. This qualifier indicates that a variable's value can change unpredictably, and removing it may lead to undefined behavior, optimization problems, and debugging challenges. It's essential to retain the <code>volatile</code> qualifier in situations where the variable's volatility is a crucial aspect of program correctness and reliability.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-constcast">Type safety (Type 3)</a> profile and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es50-dont-cast-away-const">ES.50: Don't cast away const</a> rule from the C++ Core Guidelines.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When this setting is set to <span class="title-ref">true</span>, it means that any usage of <code>const_cast</code> is not allowed. On the other hand, when it's set to <span class="title-ref">false</span>, it permits casting to <code>const</code> or <code>volatile</code> types. Default value is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-const-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-cstyle-cast</key>
    <name>cppcoreguidelines-pro-type-cstyle-cast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-cstyle-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-cstyle-cast">cppcoreguidelines-pro-type-cstyle-cast</h1>
<p>This check flags all use of C-style casts that perform a <code>static_cast</code> downcast, <code>const_cast</code>, or <code>reinterpret_cast</code>.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type X to be accessed as if it were of an unrelated type Z. Note that a C-style <code>(T)expression</code> cast means to perform the first of the following that is possible: a <code>const_cast</code>, a <code>static_cast</code>, a <code>static_cast</code> followed by a <code>const_cast</code>, a <code>reinterpret_cast</code>, or a <code>reinterpret_cast</code> followed by a <code>const_cast</code>. This rule bans <code>(T)expression</code> only when used to perform an unsafe cast.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-cstylecast">Type safety (Type.4)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-cstyle-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-member-init</key>
    <name>cppcoreguidelines-pro-type-member-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-member-init</p>
</div>
<h1 id="cppcoreguidelines-pro-type-member-init">cppcoreguidelines-pro-type-member-init</h1>
<p>The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction, e.g. builtins, pointers and record types without user-provided default constructors containing at least one such type. If these fields aren't initialized, the constructor will leave some of the memory in an undefined state.</p>
<p>For C++11 it suggests fixes to add in-class field initializers. For older versions it inserts the field initializers into the constructor initializer list. It will also initialize any direct base classes that need to be zeroed in the constructor initializer list.</p>
<p>The check takes assignment of fields in the constructor body into account but generates false positives for fields initialized in methods invoked in the constructor body.</p>
<p>The check also flags variables with automatic storage duration that have record types without a user-provided constructor and are not initialized. The suggested fix is to zero initialize the variable via <code>{}</code> for C++11 and beyond or <code>= {}</code> for older language versions.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreArrays</p>
<p>If set to <span class="title-ref">true</span>, the check will not warn about array members that are not zero-initialized during construction. For performance critical code, it may be important to not initialize fixed-size array members. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>UseAssignment</p>
<p>If set to <span class="title-ref">true</span>, the check will provide fix-its with literal initializers ( <code>int i = 0;</code> ) instead of curly braces ( <code>int i{};</code> ).</p>
</div>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-memberinit">Type safety (Type.6)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-member-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-reinterpret-cast</key>
    <name>cppcoreguidelines-pro-type-reinterpret-cast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-reinterpret-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-reinterpret-cast">cppcoreguidelines-pro-type-reinterpret-cast</h1>
<p>This check flags all uses of <code>reinterpret_cast</code> in C++ code.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type <code>X</code> to be accessed as if it were of an unrelated type <code>Z</code>.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-reinterpretcast">Type safety (Type.1.1)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-reinterpret-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-static-cast-downcast</key>
    <name>cppcoreguidelines-pro-type-static-cast-downcast</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-static-cast-downcast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-static-cast-downcast">cppcoreguidelines-pro-type-static-cast-downcast</h1>
<p>This check flags all usages of <code>static_cast</code>, where a base class is casted to a derived class. In those cases, a fix-it is provided to convert the cast to a <code>dynamic_cast</code>.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type <code>X</code> to be accessed as if it were of an unrelated type <code>Z</code>.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-downcast">Type safety (Type.2)</a> profile from the C++ Core Guidelines.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When set to <span class="title-ref">false</span>, no warnings are emitted for casts on non-polymorphic types. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-static-cast-downcast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-union-access</key>
    <name>cppcoreguidelines-pro-type-union-access</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-union-access</p>
</div>
<h1 id="cppcoreguidelines-pro-type-union-access">cppcoreguidelines-pro-type-union-access</h1>
<p>This check flags all access to members of unions. Passing unions as a whole is not flagged.</p>
<p>Reading from a union member assumes that member was the last one written, and writing to a union member assumes another member with a nontrivial destructor had its destructor called. This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-unions">Type safety (Type.7)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-pro-type-vararg</key>
    <name>cppcoreguidelines-pro-type-vararg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-vararg</p>
</div>
<h1 id="cppcoreguidelines-pro-type-vararg">cppcoreguidelines-pro-type-vararg</h1>
<p>This check flags all calls to c-style vararg functions and all use of <code>va_arg</code>.</p>
<p>To allow for SFINAE use of vararg functions, a call is not flagged if a literal 0 is passed as the only vararg argument or function is used in unevaluated context.</p>
<p>Passing to varargs assumes the correct type will be read. This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right.</p>
<p>This rule is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Pro-type-varargs">Type safety (Type.8)</a> profile from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-vararg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-rvalue-reference-param-not-moved</key>
    <name>cppcoreguidelines-rvalue-reference-param-not-moved</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-rvalue-reference-param-not-moved</p>
</div>
<h1 id="cppcoreguidelines-rvalue-reference-param-not-moved">cppcoreguidelines-rvalue-reference-param-not-moved</h1>
<p>Warns when an rvalue reference function parameter is never moved within the function body.</p>
<p>Rvalue reference parameters indicate a parameter that should be moved with <code>std::move</code> from within the function body. Any such parameter that is never moved is confusing and potentially indicative of a buggy program.</p>
<p>Example:</p>
<pre class="c++"><code>void logic(std::string&amp;&amp; Input) {
  std::string Copy(Input); // Oops - forgot to std::move
}</code></pre>
<p>Note that parameters that are unused and marked as such will not be diagnosed.</p>
<p>Example:</p>
<pre class="c++"><code>void conditional_use([[maybe_unused]] std::string&amp;&amp; Input) {
  // No diagnostic here since Input is unused and marked as such
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowPartialMove</p>
<p>If set to <span class="title-ref">true</span>, the check accepts <code>std::move</code> calls containing any subexpression containing the parameter. CppCoreGuideline F.18 officially mandates that the parameter itself must be moved. Default is <span class="title-ref">false</span>.</p>
<pre class="c++"><code>// &#39;p&#39; is flagged by this check if and only if AllowPartialMove is false
void move_members_of(pair&lt;Obj, Obj&gt;&amp;&amp; p) {
  pair&lt;Obj, Obj&gt; other;
  other.first = std::move(p.first);
  other.second = std::move(p.second);
}

// &#39;p&#39; is never flagged by this check
void move_whole_pair(pair&lt;Obj, Obj&gt;&amp;&amp; p) {
  pair&lt;Obj, Obj&gt; other = std::move(p);
}</code></pre>
</div>
<div class="option">
<p>IgnoreUnnamedParams</p>
<p>If set to <span class="title-ref">true</span>, the check ignores unnamed rvalue reference parameters. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoreNonDeducedTemplateTypes</p>
<p>If set to <span class="title-ref">true</span>, the check ignores non-deduced template type rvalue reference parameters. Default is <span class="title-ref">false</span>.</p>
<pre class="c++"><code>template &lt;class T&gt;
struct SomeClass {
  // Below, &#39;T&#39; is not deduced and &#39;T&amp;&amp;&#39; is an rvalue reference type.
  // This will be flagged if and only if IgnoreNonDeducedTemplateTypes is
  // false. One suggested fix would be to specialize the class for &#39;T&#39; and
  // &#39;T&amp;&#39; separately (e.g., see std::future), or allow only one of &#39;T&#39; or
  // &#39;T&amp;&#39; instantiations of SomeClass (e.g., see std::optional).
  SomeClass(T&amp;&amp; t) { }
};

// Never flagged, since &#39;T&#39; is a forwarding reference in a deduced context
template &lt;class T&gt;
void forwarding_ref(T&amp;&amp; t) {
  T other = std::forward&lt;T&gt;(t);
}</code></pre>
</div>
<p>This check implements <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f18-for-will-move-from-parameters-pass-by-x-and-stdmove-the-parameter">F.18</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/rvalue-reference-param-not-moved.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-slicing</key>
    <name>cppcoreguidelines-slicing</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-slicing</p>
</div>
<h1 id="cppcoreguidelines-slicing">cppcoreguidelines-slicing</h1>
<p>Flags slicing of member variables or vtable. Slicing happens when copying a derived object into a base object: the members of the derived object (both member variables and virtual member functions) will be discarded. This can be misleading especially for member function slicing, for example:</p>
<pre class="c++"><code>struct B { int a; virtual int f(); };
struct D : B { int b; int f() override; };

void use(B b) {  // Missing reference, intended?
  b.f();  // Calls B::f.
}

D d;
use(d);  // Slice.</code></pre>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es63-dont-slice">ES.63</a> and <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c145-access-polymorphic-objects-through-pointers-and-references">C.145</a> from the C++ Core Guidelines.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/slicing.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>cppcoreguidelines-special-member-functions</key>
    <name>cppcoreguidelines-special-member-functions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-special-member-functions</p>
</div>
<h1 id="cppcoreguidelines-special-member-functions">cppcoreguidelines-special-member-functions</h1>
<p>The check finds classes where some but not all of the special member functions are defined.</p>
<p>By default the compiler defines a copy constructor, copy assignment operator, move constructor, move assignment operator and destructor. The default can be suppressed by explicit user-definitions. The relationship between which functions will be suppressed by definitions of other functions is complicated and it is advised that all five are defaulted or explicitly defined.</p>
<p>Note that defining a function with <code>= delete</code> is considered to be a definition.</p>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-five">C.21</a> from the C++ Core Guidelines.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowSoleDefaultDtor</p>
<p>When set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), this check will only trigger on destructors if they are defined and not defaulted.</p>
<pre class="c++"><code>struct A { // This is fine.
  virtual ~A() = default;
};

struct B { // This is not fine.
  ~B() {}
};

struct C {
  // This is not checked, because the destructor might be defaulted in
  // another translation unit.
  ~C();
};</code></pre>
</div>
<div class="option">
<p>AllowMissingMoveFunctions</p>
<p>When set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), this check doesn't flag classes which define no move operations at all. It still flags classes which define only one of either move constructor or move assignment operator. With this option enabled, the following class won't be flagged:</p>
<pre class="c++"><code>struct A {
  A(const A&amp;);
  A&amp; operator=(const A&amp;);
  ~A();
};</code></pre>
</div>
<div class="option">
<p>AllowMissingMoveFunctionsWhenCopyIsDeleted</p>
<p>When set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), this check doesn't flag classes which define deleted copy operations but don't define move operations. This flag is related to Google C++ Style Guide <a href="https://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types">https://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types</a>. With this option enabled, the following class won't be flagged:</p>
<pre class="c++"><code>struct A {
  A(const A&amp;) = delete;
  A&amp; operator=(const A&amp;) = delete;
  ~A();
};</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/special-member-functions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-use-default-member-init</key>
    <name>cppcoreguidelines-use-default-member-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-use-default-member-init</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-default-member-init.html">

</div>
<h1 id="cppcoreguidelines-use-default-member-init">cppcoreguidelines-use-default-member-init</h1>
<p>This check implements <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer">C.48</a> from the C++ Core Guidelines.</p>
<p>The <span class="title-ref">cppcoreguidelines-use-default-member-init</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-default-member-init &lt;../modernize/use-default-member-init&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/use-default-member-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>cppcoreguidelines-virtual-class-destructor</key>
    <name>cppcoreguidelines-virtual-class-destructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - cppcoreguidelines-virtual-class-destructor</p>
</div>
<h1 id="cppcoreguidelines-virtual-class-destructor">cppcoreguidelines-virtual-class-destructor</h1>
<p>Finds virtual classes whose destructor is neither public and virtual nor protected and non-virtual. A virtual class's destructor should be specified in one of these ways to prevent undefined behavior.</p>
<p>This check implements <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-dtor-virtual">C.35</a> from the C++ Core Guidelines.</p>
<p>Note that this check will diagnose a class with a virtual method regardless of whether the class is used as a base class or not.</p>
<p>Fixes are available for user-declared and implicit destructors that are either public and non-virtual or protected and virtual. No fixes are offered for private destructors. There, the decision whether to make them private and virtual or protected and non-virtual depends on the use case and is thus left to the user.</p>
<h2 id="example">Example</h2>
<p>For example, the following classes/structs get flagged by the check since they violate guideline <strong>C.35</strong>:</p>
<pre class="c++"><code>struct Foo {        // NOK, protected destructor should not be virtual
  virtual void f();
protected:
  virtual ~Foo(){}
};
class Bar {         // NOK, public destructor should be virtual
  virtual void f();
public:
  ~Bar(){}
};</code></pre>
<p>This would be rewritten to look like this:</p>
<pre class="c++"><code>struct Foo {        // OK, destructor is not virtual anymore
  virtual void f();
protected:
  ~Foo(){}
};
class Bar {         // OK, destructor is now virtual
  virtual void f();
public:
  virtual ~Bar(){}
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/virtual-class-destructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>darwin-avoid-spinlock</key>
    <name>darwin-avoid-spinlock</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - darwin-avoid-spinlock</p>
</div>
<h1 id="darwin-avoid-spinlock">darwin-avoid-spinlock</h1>
<p>Finds usages of <code>OSSpinlock</code>, which is deprecated due to potential livelock problems.</p>
<p>This check will detect following function invocations:</p>
<ul>
<li><code>OSSpinlockLock</code></li>
<li><code>OSSpinlockTry</code></li>
<li><code>OSSpinlockUnlock</code></li>
</ul>
<p>The corresponding information about the problem of <code>OSSpinlock</code>: <a href="https://blog.postmates.com/why-spinlocks-are-bad-on-ios-b69fc5221058">https://blog.postmates.com/why-spinlocks-are-bad-on-ios-b69fc5221058</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/darwin/avoid-spinlock.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>darwin-dispatch-once-nonstatic</key>
    <name>darwin-dispatch-once-nonstatic</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - darwin-dispatch-once-nonstatic</p>
</div>
<h1 id="darwin-dispatch-once-nonstatic">darwin-dispatch-once-nonstatic</h1>
<p>Finds declarations of <code>dispatch_once_t</code> variables without static or global storage. The behavior of using <code>dispatch_once_t</code> predicates with automatic or dynamic storage is undefined by libdispatch, and should be avoided.</p>
<p>It is a common pattern to have functions initialize internal static or global data once when the function runs, but programmers have been known to miss the static on the <code>dispatch_once_t</code> predicate, leading to an uninitialized flag value at the mercy of the stack.</p>
<p>Programmers have also been known to make <code>dispatch_once_t</code> variables be members of structs or classes, with the intent to lazily perform some expensive struct or class member initialization only once; however, this violates the libdispatch requirements.</p>
<p>See the discussion section of <a href="https://developer.apple.com/documentation/dispatch/1447169-dispatch_once">Apple's dispatch_once documentation</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/darwin/dispatch-once-nonstatic.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-default-arguments-calls</key>
    <name>fuchsia-default-arguments-calls</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-default-arguments-calls</p>
</div>
<h1 id="fuchsia-default-arguments-calls">fuchsia-default-arguments-calls</h1>
<p>Warns if a function or method is called with default arguments.</p>
<p>For example, given the declaration:</p>
<pre class="c++"><code>int foo(int value = 5) { return value; }</code></pre>
<p>A function call expression that uses a default argument will be diagnosed. Calling it without defaults will not cause a warning:</p>
<pre class="c++"><code>foo();  // warning
foo(0); // no warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/default-arguments-calls.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-default-arguments-declarations</key>
    <name>fuchsia-default-arguments-declarations</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-default-arguments-declarations</p>
</div>
<h1 id="fuchsia-default-arguments-declarations">fuchsia-default-arguments-declarations</h1>
<p>Warns if a function or method is declared with default parameters.</p>
<p>For example, the declaration:</p>
<pre class="c++"><code>int foo(int value = 5) { return value; }</code></pre>
<p>will cause a warning.</p>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/default-arguments-declarations.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-header-anon-namespaces</key>
    <name>fuchsia-header-anon-namespaces</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-header-anon-namespaces</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../google/build-namespaces.html">

</div>
<h1 id="fuchsia-header-anon-namespaces">fuchsia-header-anon-namespaces</h1>
<p>The fuchsia-header-anon-namespaces check is an alias, please see <code class="interpreted-text" role="doc">google-build-namespace &lt;../google/build-namespaces&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/header-anon-namespaces.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-multiple-inheritance</key>
    <name>fuchsia-multiple-inheritance</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-multiple-inheritance</p>
</div>
<h1 id="fuchsia-multiple-inheritance">fuchsia-multiple-inheritance</h1>
<p>Warns if a class inherits from multiple classes that are not pure virtual.</p>
<p>For example, declaring a class that inherits from multiple concrete classes is disallowed:</p>
<pre class="c++"><code>class Base_A {
public:
  virtual int foo() { return 0; }
};

class Base_B {
public:
  virtual int bar() { return 0; }
};

// Warning
class Bad_Child1 : public Base_A, Base_B {};</code></pre>
<p>A class that inherits from a pure virtual is allowed:</p>
<pre class="c++"><code>class Interface_A {
public:
  virtual int foo() = 0;
};

class Interface_B {
public:
  virtual int bar() = 0;
};

// No warning
class Good_Child1 : public Interface_A, Interface_B {
  virtual int foo() override { return 0; }
  virtual int bar() override { return 0; }
};</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/multiple-inheritance.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-overloaded-operator</key>
    <name>fuchsia-overloaded-operator</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-overloaded-operator</p>
</div>
<h1 id="fuchsia-overloaded-operator">fuchsia-overloaded-operator</h1>
<p>Warns if an operator is overloaded, except for the assignment (copy and move) operators.</p>
<p>For example:</p>
<pre class="c++"><code>int operator+(int);     // Warning

B &amp;operator=(const B &amp;Other);  // No warning
B &amp;operator=(B &amp;&amp;Other) // No warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/overloaded-operator.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-statically-constructed-objects</key>
    <name>fuchsia-statically-constructed-objects</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-statically-constructed-objects</p>
</div>
<h1 id="fuchsia-statically-constructed-objects">fuchsia-statically-constructed-objects</h1>
<p>Warns if global, non-trivial objects with static storage are constructed, unless the object is statically initialized with a <code>constexpr</code> constructor or has no explicit constructor.</p>
<p>For example:</p>
<pre class="c++"><code>class A {};

class B {
public:
  B(int Val) : Val(Val) {}
private:
  int Val;
};

class C {
public:
  constexpr C(int Val) : Val(Val) {}
  C(int Val1, int Val2) : Val(Val1+Val2) {}

private:
  int Val;
};

static A a;         // No warning, as there is no explicit constructor
static C c(0);      // No warning, as constructor is constexpr

static B b(0);      // Warning, as constructor is not constexpr
static C c2(0, 1);  // Warning, as constructor is not constexpr

static int i;       // No warning, as it is trivial

extern int get_i();
static C c3(get_i());// Warning, as the constructor is dynamically initialized</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/statically-constructed-objects.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>fuchsia-trailing-return</key>
    <name>fuchsia-trailing-return</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-trailing-return</p>
</div>
<h1 id="fuchsia-trailing-return">fuchsia-trailing-return</h1>
<p>Functions that have trailing returns are disallowed, except for those using <code>decltype</code> specifiers and lambda with otherwise unutterable return types.</p>
<p>For example:</p>
<pre class="c++"><code>// No warning
int add_one(const int arg) { return arg; }

// Warning
auto get_add_one() -&gt; int (*)(const int) {
  return add_one;
}</code></pre>
<p>Exceptions are made for lambdas and <code>decltype</code> specifiers:</p>
<pre class="c++"><code>// No warning
auto lambda = [](double x, double y) -&gt; double {return x + y;};

// No warning
template &lt;typename T1, typename T2&gt;
auto fn(const T1 &amp;lhs, const T2 &amp;rhs) -&gt; decltype(lhs + rhs) {
  return lhs + rhs;
}</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/trailing-return.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>fuchsia-virtual-inheritance</key>
    <name>fuchsia-virtual-inheritance</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - fuchsia-virtual-inheritance</p>
</div>
<h1 id="fuchsia-virtual-inheritance">fuchsia-virtual-inheritance</h1>
<p>Warns if classes are defined with virtual inheritance.</p>
<p>For example, classes should not be defined with virtual inheritance:</p>
<pre class="c++"><code>class B : public virtual A {};   // warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en">https://fuchsia.dev/fuchsia-src/development/languages/c-cpp/cxx?hl=en</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia/virtual-inheritance.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-build-explicit-make-pair</key>
    <name>google-build-explicit-make-pair</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-build-explicit-make-pair</p>
</div>
<h1 id="google-build-explicit-make-pair">google-build-explicit-make-pair</h1>
<p>Check that <code>make_pair</code>'s template arguments are deduced.</p>
<p>G++ 4.6 in C++11 mode fails badly if <code>make_pair</code>'s template arguments are specified explicitly, and such use isn't intended in any case.</p>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/explicit_make_pair</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/build-explicit-make-pair.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-build-namespaces</key>
    <name>google-build-namespaces</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-build-namespaces</p>
</div>
<h1 id="google-build-namespaces">google-build-namespaces</h1>
<p><span class="title-ref">cert-dcl59-cpp</span> redirects here as an alias for this check. <span class="title-ref">fuchsia-header-anon-namespaces</span> redirects here as an alias for this check.</p>
<p>Finds anonymous namespaces in headers.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Namespaces">https://google.github.io/styleguide/cppguide.html#Namespaces</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/namespaces</span>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include "." prefix). Default is "h,hh,hpp,hxx". For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. E.g., "h,hh,hpp,hxx," (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/build-namespaces.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-build-using-namespace</key>
    <name>google-build-using-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-build-using-namespace</p>
</div>
<h1 id="google-build-using-namespace">google-build-using-namespace</h1>
<p>Finds <code>using namespace</code> directives.</p>
<p>The check implements the following rule of the <a href="https://google.github.io/styleguide/cppguide.html#Namespaces">Google C++ Style Guide</a>:</p>
<blockquote>
<p>You may not use a using-directive to make all names from a namespace available.</p>
</blockquote>
<pre class="c++"><code>// Forbidden -- This pollutes the namespace.
using namespace foo;</code></pre>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/namespaces</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/build-using-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-default-arguments</key>
    <name>google-default-arguments</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-default-arguments</p>
</div>
<h1 id="google-default-arguments">google-default-arguments</h1>
<p>Checks that default arguments are not given for virtual methods.</p>
<p>See <a href="https://google.github.io/styleguide/cppguide.html#Default_Arguments">https://google.github.io/styleguide/cppguide.html#Default_Arguments</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/default-arguments.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-explicit-constructor</key>
    <name>google-explicit-constructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-explicit-constructor</p>
</div>
<h1 id="google-explicit-constructor">google-explicit-constructor</h1>
<p>Checks that constructors callable with a single argument and conversion operators are marked explicit to avoid the risk of unintentional implicit conversions.</p>
<p>Consider this example:</p>
<pre class="c++"><code>struct S {
  int x;
  operator bool() const { return true; }
};

bool f() {
  S a{1};
  S b{2};
  return a == b;
}</code></pre>
<p>The function will return <code>true</code>, since the objects are implicitly converted to <code>bool</code> before comparison, which is unlikely to be the intent.</p>
<p>The check will suggest inserting <code>explicit</code> before the constructor or conversion operator declaration. However, copy and move constructors should not be explicit, as well as constructors taking a single <code>initializer_list</code> argument.</p>
<p>This code:</p>
<pre class="c++"><code>struct S {
  S(int a);
  explicit S(const S&amp;);
  operator bool() const;
  ...</code></pre>
<p>will become</p>
<pre class="c++"><code>struct S {
  explicit S(int a);
  S(const S&amp;);
  explicit operator bool() const;
  ...</code></pre>
<p>See <a href="https://google.github.io/styleguide/cppguide.html#Explicit_Constructors">https://google.github.io/styleguide/cppguide.html#Explicit_Constructors</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/explicit-constructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-global-names-in-headers</key>
    <name>google-global-names-in-headers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-global-names-in-headers</p>
</div>
<h1 id="google-global-names-in-headers">google-global-names-in-headers</h1>
<p>Flag global namespace pollution in header files. Right now it only triggers on <code>using</code> declarations and directives.</p>
<p>The relevant style guide section is <a href="https://google.github.io/styleguide/cppguide.html#Namespaces">https://google.github.io/styleguide/cppguide.html#Namespaces</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not contain "." prefix). Default is "h". For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. E.g., "h,hh,hpp,hxx," (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/global-names-in-headers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-objc-avoid-nsobject-new</key>
    <name>google-objc-avoid-nsobject-new</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-objc-avoid-nsobject-new</p>
</div>
<h1 id="google-objc-avoid-nsobject-new">google-objc-avoid-nsobject-new</h1>
<p>Finds calls to <code>+new</code> or overrides of it, which are prohibited by the Google Objective-C style guide.</p>
<p>The Google Objective-C style guide forbids calling <code>+new</code> or overriding it in class implementations, preferring <code>+alloc</code> and <code>-init</code> methods to instantiate objects.</p>
<p>An example:</p>
<pre class="objc"><code>NSDate *now = [NSDate new];
Foo *bar = [Foo new];</code></pre>
<p>Instead, code should use <code>+alloc</code>/<code>-init</code> or class factory methods.</p>
<pre class="objc"><code>NSDate *now = [NSDate date];
Foo *bar = [[Foo alloc] init];</code></pre>
<p>This check corresponds to the Google Objective-C Style Guide rule <a href="https://google.github.io/styleguide/objcguide.html#do-not-use-new">Do Not Use +new</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/objc-avoid-nsobject-new.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-objc-avoid-throwing-exception</key>
    <name>google-objc-avoid-throwing-exception</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-objc-avoid-throwing-exception</p>
</div>
<h1 id="google-objc-avoid-throwing-exception">google-objc-avoid-throwing-exception</h1>
<p>Finds uses of throwing exceptions usages in Objective-C files.</p>
<p>For the same reason as the Google C++ style guide, we prefer not throwing exceptions from Objective-C code.</p>
<p>The corresponding C++ style guide rule: <a href="https://google.github.io/styleguide/cppguide.html#Exceptions">https://google.github.io/styleguide/cppguide.html#Exceptions</a></p>
<p>Instead, prefer passing in <code>NSError **</code> and return <code>BOOL</code> to indicate success or failure.</p>
<p>A counterexample:</p>
<pre class="objc"><code>- (void)readFile {
  if ([self isError]) {
    @throw [NSException exceptionWithName:...];
  }
}</code></pre>
<p>Instead, returning an error via <code>NSError **</code> is preferred:</p>
<pre class="objc"><code>- (BOOL)readFileWithError:(NSError **)error {
  if ([self isError]) {
    *error = [NSError errorWithDomain:...];
    return NO;
  }
  return YES;
}</code></pre>
<p>The corresponding style guide rule: <a href="https://google.github.io/styleguide/objcguide.html#avoid-throwing-exceptions">https://google.github.io/styleguide/objcguide.html#avoid-throwing-exceptions</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/objc-avoid-throwing-exception.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-objc-function-naming</key>
    <name>google-objc-function-naming</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-objc-function-naming</p>
</div>
<h1 id="google-objc-function-naming">google-objc-function-naming</h1>
<p>Finds function declarations in Objective-C files that do not follow the pattern described in the Google Objective-C Style Guide.</p>
<p>The corresponding style guide rule can be found here: <a href="https://google.github.io/styleguide/objcguide.html#function-names">https://google.github.io/styleguide/objcguide.html#function-names</a></p>
<p>All function names should be in Pascal case. Functions whose storage class is not static should have an appropriate prefix.</p>
<p>The following code sample does not follow this pattern:</p>
<pre class="objc"><code>static bool is_positive(int i) { return i &gt; 0; }
bool IsNegative(int i) { return i &lt; 0; }</code></pre>
<p>The sample above might be corrected to the following code:</p>
<pre class="objc"><code>static bool IsPositive(int i) { return i &gt; 0; }
bool *ABCIsNegative(int i) { return i &lt; 0; }</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/objc-function-naming.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-objc-global-variable-declaration</key>
    <name>google-objc-global-variable-declaration</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-objc-global-variable-declaration</p>
</div>
<h1 id="google-objc-global-variable-declaration">google-objc-global-variable-declaration</h1>
<p>Finds global variable declarations in Objective-C files that do not follow the pattern of variable names in Google's Objective-C Style Guide.</p>
<p>The corresponding style guide rule: <a href="https://google.github.io/styleguide/objcguide.html#variable-names">https://google.github.io/styleguide/objcguide.html#variable-names</a></p>
<p>All the global variables should follow the pattern of <code>g[A-Z].*</code> (variables) or <code>k[A-Z].*</code> (constants). The check will suggest a variable name that follows the pattern if it can be inferred from the original name.</p>
<p>For code:</p>
<pre class="objc"><code>static NSString* myString = @&quot;hello&quot;;</code></pre>
<p>The fix will be:</p>
<pre class="objc"><code>static NSString* gMyString = @&quot;hello&quot;;</code></pre>
<p>Another example of constant:</p>
<pre class="objc"><code>static NSString* const myConstString = @&quot;hello&quot;;</code></pre>
<p>The fix will be:</p>
<pre class="objc"><code>static NSString* const kMyConstString = @&quot;hello&quot;;</code></pre>
<p>However for code that prefixed with non-alphabetical characters like:</p>
<pre class="objc"><code>static NSString* __anotherString = @&quot;world&quot;;</code></pre>
<p>The check will give a warning message but will not be able to suggest a fix. The user needs to fix it on their own.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/objc-global-variable-declaration.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-avoid-underscore-in-googletest-name</key>
    <name>google-readability-avoid-underscore-in-googletest-name</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-avoid-underscore-in-googletest-name</p>
</div>
<h1 id="google-readability-avoid-underscore-in-googletest-name">google-readability-avoid-underscore-in-googletest-name</h1>
<p>Checks whether there are underscores in googletest test suite names and test names in test macros:</p>
<ul>
<li><code>TEST</code></li>
<li><code>TEST_F</code></li>
<li><code>TEST_P</code></li>
<li><code>TYPED_TEST</code></li>
<li><code>TYPED_TEST_P</code></li>
</ul>
<p>The <code>FRIEND_TEST</code> macro is not included.</p>
<p>For example:</p>
<pre class="c++"><code>TEST(TestSuiteName, Illegal_TestName) {}
TEST(Illegal_TestSuiteName, TestName) {}</code></pre>
<p>would trigger the check. <a href="https://google.github.io/googletest/faq.html#why-should-test-suite-names-and-test-names-not-contain-underscore">Underscores are not allowed</a> in test suite name nor test names.</p>
<p>The <code>DISABLED_</code> prefix, which may be used to <a href="https://google.github.io/googletest/advanced.html#temporarily-disabling-tests">disable test suites and individual tests</a>, is removed from the test suite name and test name before checking for underscores.</p>
<p>This check does not propose any fixes.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-avoid-underscore-in-googletest-name.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-braces-around-statements</key>
    <name>google-readability-braces-around-statements</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-braces-around-statements</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/braces-around-statements.html">

</div>
<h1 id="google-readability-braces-around-statements">google-readability-braces-around-statements</h1>
<p>The <span class="title-ref">google-readability-braces-around-statements</span> check is an alias, please see <code class="interpreted-text" role="doc">readability-braces-around-statements &lt;../readability/braces-around-statements&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-braces-around-statements.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-casting</key>
    <name>google-readability-casting</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-casting</p>
</div>
<h1 id="google-readability-casting">google-readability-casting</h1>
<p>Finds usages of C-style casts.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Casting">https://google.github.io/styleguide/cppguide.html#Casting</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">readability/casting</span>.</p>
<p>This check is similar to <code>-Wold-style-cast</code>, but it suggests automated fixes in some cases. The reported locations should not be different from the ones generated by <code>-Wold-style-cast</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-casting.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-function-size</key>
    <name>google-readability-function-size</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-function-size</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/function-size.html">

</div>
<h1 id="google-readability-function-size">google-readability-function-size</h1>
<p>The <span class="title-ref">google-readability-function-size</span> check is an alias, please see <code class="interpreted-text" role="doc">readability-function-size &lt;../readability/function-size&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-function-size.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-namespace-comments</key>
    <name>google-readability-namespace-comments</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-namespace-comments</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../llvm/namespace-comment.html">

</div>
<h1 id="google-readability-namespace-comments">google-readability-namespace-comments</h1>
<p>The <span class="title-ref">google-readability-namespace-comments check</span> is an alias, please see <code class="interpreted-text" role="doc">llvm-namespace-comment &lt;../llvm/namespace-comment&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-namespace-comments.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-readability-todo</key>
    <name>google-readability-todo</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-readability-todo</p>
</div>
<h1 id="google-readability-todo">google-readability-todo</h1>
<p>Finds TODO comments without a username or bug number.</p>
<p>The relevant style guide section is <a href="https://google.github.io/styleguide/cppguide.html#TODO_Comments">https://google.github.io/styleguide/cppguide.html#TODO_Comments</a>.</p>
<p>Corresponding cpplint.py check: <span class="title-ref">readability/todo</span></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/readability-todo.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-runtime-int</key>
    <name>google-runtime-int</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-runtime-int</p>
</div>
<h1 id="google-runtime-int">google-runtime-int</h1>
<p>Finds uses of <code>short</code>, <code>long</code> and <code>long long</code> and suggest replacing them with <code>u?intXX(_t)?</code>.</p>
<p>The corresponding style guide rule: <a href="https://google.github.io/styleguide/cppguide.html#Integer_Types">https://google.github.io/styleguide/cppguide.html#Integer_Types</a>.</p>
<p>Corresponding cpplint.py check: <span class="title-ref">runtime/int</span>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>UnsignedTypePrefix</p>
<p>A string specifying the unsigned type prefix. Default is <span class="title-ref">uint</span>.</p>
</div>
<div class="option">
<p>SignedTypePrefix</p>
<p>A string specifying the signed type prefix. Default is <span class="title-ref">int</span>.</p>
</div>
<div class="option">
<p>TypeSuffix</p>
<p>A string specifying the type suffix. Default is an empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/runtime-int.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-runtime-operator</key>
    <name>google-runtime-operator</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-runtime-operator</p>
</div>
<h1 id="google-runtime-operator">google-runtime-operator</h1>
<p>Finds overloads of unary <code>operator &amp;</code>.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Operator_Overloading">https://google.github.io/styleguide/cppguide.html#Operator_Overloading</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">runtime/operator</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/runtime-operator.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>google-upgrade-googletest-case</key>
    <name>google-upgrade-googletest-case</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - google-upgrade-googletest-case</p>
</div>
<h1 id="google-upgrade-googletest-case">google-upgrade-googletest-case</h1>
<p>Finds uses of deprecated Google Test version 1.9 APIs with names containing <code>case</code> and replaces them with equivalent APIs with <code>suite</code>.</p>
<p>All names containing <code>case</code> are being replaced to be consistent with the meanings of "test case" and "test suite" as used by the International Software Testing Qualifications Board and ISO 29119.</p>
<p>The new names are a part of Google Test version 1.9 (release pending). It is recommended that users update their dependency to version 1.9 and then use this check to remove deprecated names.</p>
<p>The affected APIs are:</p>
<ul>
<li>Member functions of <code>testing::Test</code>, <code>testing::TestInfo</code>, <code>testing::TestEventListener</code>, <code>testing::UnitTest</code>, and any type inheriting from these types</li>
<li>The macros <code>TYPED_TEST_CASE</code>, <code>TYPED_TEST_CASE_P</code>, <code>REGISTER_TYPED_TEST_CASE_P</code>, and <code>INSTANTIATE_TYPED_TEST_CASE_P</code></li>
<li>The type alias <code>testing::TestCase</code></li>
</ul>
<p>Examples of fixes created by this check:</p>
<pre class="c++"><code>class FooTest : public testing::Test {
public:
  static void SetUpTestCase();
  static void TearDownTestCase();
};

TYPED_TEST_CASE(BarTest, BarTypes);</code></pre>
<p>becomes</p>
<pre class="c++"><code>class FooTest : public testing::Test {
public:
  static void SetUpTestSuite();
  static void TearDownTestSuite();
};

TYPED_TEST_SUITE(BarTest, BarTypes);</code></pre>
<p>For better consistency of user code, the check renames both virtual and non-virtual member functions with matching names in derived types. The check tries to provide only a warning when a fix cannot be made safely, as is the case with some template and macro uses.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google/upgrade-googletest-case.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-avoid-c-arrays</key>
    <name>hicpp-avoid-c-arrays</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-avoid-c-arrays</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/avoid-c-arrays.html">

</div>
<h1 id="hicpp-avoid-c-arrays">hicpp-avoid-c-arrays</h1>
<p>The hicpp-avoid-c-arrays check is an alias, please see <code class="interpreted-text" role="doc">modernize-avoid-c-arrays &lt;../modernize/avoid-c-arrays&gt;</code> for more information. It partly enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-conversions">rule 4.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-avoid-goto</key>
    <name>hicpp-avoid-goto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-avoid-goto</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/avoid-goto.html">

</div>
<h1 id="hicpp-avoid-goto">hicpp-avoid-goto</h1>
<p>The <span class="title-ref">hicpp-avoid-goto</span> check is an alias, please see <code class="interpreted-text" role="doc">cppcoreguidelines-avoid-goto &lt;../cppcoreguidelines/avoid-goto&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">rule 6.3.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/avoid-goto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>hicpp-braces-around-statements</key>
    <name>hicpp-braces-around-statements</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-braces-around-statements</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/braces-around-statements.html">

</div>
<h1 id="hicpp-braces-around-statements">hicpp-braces-around-statements</h1>
<p>The <span class="title-ref">hicpp-braces-around-statements</span> check is an alias, please see <code class="interpreted-text" role="doc">readability-braces-around-statements &lt;../readability/braces-around-statements&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">rule 6.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/braces-around-statements.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-deprecated-headers</key>
    <name>hicpp-deprecated-headers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-deprecated-headers</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/deprecated-headers.html">

</div>
<h1 id="hicpp-deprecated-headers">hicpp-deprecated-headers</h1>
<p>The <span class="title-ref">hicpp-deprecated-headers</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-deprecated-headers &lt;../modernize/deprecated-headers&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/general">rule 1.3.3</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/deprecated-headers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-exception-baseclass</key>
    <name>hicpp-exception-baseclass</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-exception-baseclass</p>
</div>
<h1 id="hicpp-exception-baseclass">hicpp-exception-baseclass</h1>
<p>Ensure that every value that in a <code>throw</code> expression is an instance of <code>std::exception</code>.</p>
<p>This enforces <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard-exception-handling">rule 15.1</a> of the High Integrity C++ Coding Standard.</p>
<pre class="c++"><code>class custom_exception {};

void throwing() noexcept(false) {
  // Problematic throw expressions.
  throw int(42);
  throw custom_exception();
}

class mathematical_error : public std::exception {};

void throwing2() noexcept(false) {
  // These kind of throws are ok.
  throw mathematical_error();
  throw std::runtime_error();
  throw std::exception();
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/exception-baseclass.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-explicit-conversions</key>
    <name>hicpp-explicit-conversions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-explicit-conversions</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../google/explicit-constructor.html">

</div>
<h1 id="hicpp-explicit-conversions">hicpp-explicit-conversions</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">google-explicit-constructor &lt;../google/explicit-constructor&gt;</code>. Used to enforce parts of <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard-expressions">rule 5.4.1</a>. This check will enforce that constructors and conversion operators are marked <span class="title-ref">explicit</span>. Other forms of casting checks are implemented in other places. The following checks can be used to check for more forms of casting:</p>
<ul>
<li><code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-static-cast-downcast &lt;../cppcoreguidelines/pro-type-static-cast-downcast&gt;</code></li>
<li><code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-reinterpret-cast &lt;../cppcoreguidelines/pro-type-reinterpret-cast&gt;</code></li>
<li><code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-const-cast &lt;../cppcoreguidelines/pro-type-const-cast&gt;</code></li>
<li><code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-cstyle-cast &lt;../cppcoreguidelines/pro-type-cstyle-cast&gt;</code></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/explicit-conversions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>hicpp-function-size</key>
    <name>hicpp-function-size</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-function-size</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/function-size.html">

</div>
<h1 id="hicpp-function-size">hicpp-function-size</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">readability-function-size &lt;../readability/function-size&gt;</code>. Useful to enforce multiple sections on function complexity.</p>
<ul>
<li><a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/definitions">rule 8.2.2</a></li>
<li><a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/definitions">rule 8.3.1</a></li>
<li><a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/definitions">rule 8.3.2</a></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/function-size.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-ignored-remove-result</key>
    <name>hicpp-ignored-remove-result</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-ignored-remove-result</p>
</div>
<h1 id="hicpp-ignored-remove-result">hicpp-ignored-remove-result</h1>
<p>Ensure that the result of <code>std::remove</code>, <code>std::remove_if</code> and <code>std::unique</code> are not ignored according to <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-library">rule 17.5.1</a>.</p>
<p>The mutating algorithms <code>std::remove</code>, <code>std::remove_if</code> and both overloads of <code>std::unique</code> operate by swapping or moving elements of the range they are operating over. On completion, they return an iterator to the last valid element. In the majority of cases the correct behavior is to use this result as the first operand in a call to <code>std::erase</code>.</p>
<p>This check is a subset of <code class="interpreted-text" role="doc">bugprone-unused-return-value &lt;../bugprone/unused-return-value&gt;</code> and depending on used options it can be superfluous to enable both checks.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowCastToVoid</p>
<p>Controls whether casting return values to <code>void</code> is permitted. Default: <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/ignored-remove-result.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-invalid-access-moved</key>
    <name>hicpp-invalid-access-moved</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-invalid-access-moved</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/use-after-move.html">

</div>
<h1 id="hicpp-invalid-access-moved">hicpp-invalid-access-moved</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">bugprone-use-after-move &lt;../bugprone/use-after-move&gt;</code>.</p>
<p>Implements parts of the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/definitions">rule 8.4.1</a> to check if moved-from objects are accessed.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/invalid-access-moved.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>
  <rule>
    <key>hicpp-member-init</key>
    <name>hicpp-member-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-member-init</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/pro-type-member-init.html">

</div>
<h1 id="hicpp-member-init">hicpp-member-init</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-member-init &lt;../cppcoreguidelines/pro-type-member-init&gt;</code>. Implements the check for <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.4.2</a> to initialize class members in the right order.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/member-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>hicpp-move-const-arg</key>
    <name>hicpp-move-const-arg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-move-const-arg</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/move-const-arg.html">

</div>
<h1 id="hicpp-move-const-arg">hicpp-move-const-arg</h1>
<p>The <span class="title-ref">hicpp-move-const-arg</span> check is an alias, please see <code class="interpreted-text" role="doc">performance-move-const-arg &lt;../performance/move-const-arg&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-library">rule 17.3.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/move-const-arg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>hicpp-multiway-paths-covered</key>
    <name>hicpp-multiway-paths-covered</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-multiway-paths-covered</p>
</div>
<h1 id="hicpp-multiway-paths-covered">hicpp-multiway-paths-covered</h1>
<p>This check discovers situations where code paths are not fully-covered. It furthermore suggests using <code>if</code> instead of <code>switch</code> if the code will be more clear. The <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">rule 6.1.2</a> and <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">rule 6.1.4</a> of the High Integrity C++ Coding Standard are enforced.</p>
<p><code>if-else if</code> chains that miss a final <code>else</code> branch might lead to unexpected program execution and be the result of a logical error. If the missing <code>else</code> branch is intended you can leave it empty with a clarifying comment. This warning can be noisy on some code bases, so it is disabled by default.</p>
<pre class="c++"><code>void f1() {
  int i = determineTheNumber();

   if(i &gt; 0) {
     // Some Calculation
   } else if (i &lt; 0) {
     // Precondition violated or something else.
   }
   // ...
}</code></pre>
<p>Similar arguments hold for <code>switch</code> statements which do not cover all possible code paths.</p>
<pre class="c++"><code>// The missing default branch might be a logical error. It can be kept empty
// if there is nothing to do, making it explicit.
void f2(int i) {
  switch (i) {
  case 0: // something
    break;
  case 1: // something else
    break;
  }
  // All other numbers?
}

// Violates this rule as well, but already emits a compiler warning (-Wswitch).
enum Color { Red, Green, Blue, Yellow };
void f3(enum Color c) {
  switch (c) {
  case Red: // We can&#39;t drive for now.
    break;
  case Green:  // We are allowed to drive.
    break;
  }
  // Other cases missing
}</code></pre>
<p>The <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/statements">rule 6.1.4</a> requires every <code>switch</code> statement to have at least two <code>case</code> labels other than a <span class="title-ref">default</span> label. Otherwise, the <code>switch</code> could be better expressed with an <code>if</code> statement. Degenerated <code>switch</code> statements without any labels are caught as well.</p>
<pre class="c++"><code>// Degenerated switch that could be better written as `if`
int i = 42;
switch(i) {
  case 1: // do something here
  default: // do something else here
}

// Should rather be the following:
if (i == 1) {
  // do something here
}
else {
  // do something here
}</code></pre>
<pre class="c++"><code>// A completely degenerated switch will be diagnosed.
int i = 42;
switch(i) {}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnMissingElse</p>
<p>Boolean flag that activates a warning for missing <code>else</code> branches. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/multiway-paths-covered.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-named-parameter</key>
    <name>hicpp-named-parameter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-named-parameter</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/named-parameter.html">

</div>
<h1 id="hicpp-named-parameter">hicpp-named-parameter</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">readability-named-parameter &lt;../readability/named-parameter&gt;</code>.</p>
<p>Implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/definitions">rule 8.2.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/named-parameter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-new-delete-operators</key>
    <name>hicpp-new-delete-operators</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-new-delete-operators</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/new-delete-overloads.html">

</div>
<h1 id="hicpp-new-delete-operators">hicpp-new-delete-operators</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">misc-new-delete-overloads &lt;../misc/new-delete-overloads&gt;</code>. Implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.3.1</a> to ensure the <span class="title-ref">new</span> and <span class="title-ref">delete</span> operators have the correct signature.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/new-delete-operators.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-no-array-decay</key>
    <name>hicpp-no-array-decay</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-no-array-decay</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/pro-bounds-array-to-pointer-decay.html">

</div>
<h1 id="hicpp-no-array-decay">hicpp-no-array-decay</h1>
<p>The <span class="title-ref">hicpp-no-array-decay</span> check is an alias, please see <code class="interpreted-text" role="doc">cppcoreguidelines-pro-bounds-array-to-pointer-decay &lt;../cppcoreguidelines/pro-bounds-array-to-pointer-decay&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-conversions">rule 4.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/no-array-decay.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-no-assembler</key>
    <name>hicpp-no-assembler</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-no-assembler</p>
</div>
<h1 id="hicpp-no-assembler">hicpp-no-assembler</h1>
<p>Checks for assembler statements. Use of inline assembly should be avoided since it restricts the portability of the code.</p>
<p>This enforces <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/declarations">rule 7.5.1</a> of the High Integrity C++ Coding Standard.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/no-assembler.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-no-malloc</key>
    <name>hicpp-no-malloc</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-no-malloc</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/no-malloc.html">

</div>
<h1 id="hicpp-no-malloc">hicpp-no-malloc</h1>
<p>The <span class="title-ref">hicpp-no-malloc</span> check is an alias, please see <code class="interpreted-text" role="doc">cppcoreguidelines-no-malloc &lt;../cppcoreguidelines/no-malloc&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard-expressions">rule 5.3.2</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/no-malloc.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-noexcept-move</key>
    <name>hicpp-noexcept-move</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-noexcept-move</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/noexcept-move-constructor.html">

</div>
<h1 id="hicpp-noexcept-move">hicpp-noexcept-move</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">performance-noexcept-move-constructor
&lt;../performance/noexcept-move-constructor&gt;</code>. Checks <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.5.4</a> to mark move assignment and move construction <span class="title-ref">noexcept</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/noexcept-move.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>hicpp-signed-bitwise</key>
    <name>hicpp-signed-bitwise</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-signed-bitwise</p>
</div>
<h1 id="hicpp-signed-bitwise">hicpp-signed-bitwise</h1>
<p>Finds uses of bitwise operations on signed integer types, which may lead to undefined or implementation defined behavior.</p>
<p>The according rule is defined in the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard-expressions">High Integrity C++ Standard, Section 5.6.1</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnorePositiveIntegerLiterals</p>
<p>If this option is set to <span class="title-ref">true</span>, the check will not warn on bitwise operations with positive integer literals, e.g. <span class="title-ref">~0</span>, <span class="title-ref">2 &lt;&lt; 1</span>, etc. Default value is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/signed-bitwise.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-special-member-functions</key>
    <name>hicpp-special-member-functions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-special-member-functions</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/special-member-functions.html">

</div>
<h1 id="hicpp-special-member-functions">hicpp-special-member-functions</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">cppcoreguidelines-special-member-functions &lt;../cppcoreguidelines/special-member-functions&gt;</code>. Checks that special member functions have the correct signature, according to <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.5.7</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/special-member-functions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>hicpp-static-assert</key>
    <name>hicpp-static-assert</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-static-assert</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../misc/static-assert.html">

</div>
<h1 id="hicpp-static-assert">hicpp-static-assert</h1>
<p>The <span class="title-ref">hicpp-static-assert</span> check is an alias, please see <code class="interpreted-text" role="doc">misc-static-assert &lt;../misc/static-assert&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/declarations">rule 7.1.10</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/static-assert.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>hicpp-undelegated-constructor</key>
    <name>hicpp-undelegated-constructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-undelegated-constructor</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../bugprone/undelegated-constructor.html">

</div>
<h1 id="hicpp-undelegated-constructor">hicpp-undelegated-constructor</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">bugprone-undelegated-constructor &lt;../bugprone/undelegated-constructor&gt;</code>. Partially implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.4.5</a> to find misplaced constructor calls inside a constructor.</p>
<pre class="c++"><code>struct Ctor {
  Ctor();
  Ctor(int);
  Ctor(int, int);
  Ctor(Ctor *i) {
    // All Ctor() calls result in a temporary object
    Ctor(); // did you intend to call a delegated constructor?
    Ctor(0); // did you intend to call a delegated constructor?
    Ctor(1, 2); // did you intend to call a delegated constructor?
    foo();
  }
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/undelegated-constructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>hicpp-uppercase-literal-suffix</key>
    <name>hicpp-uppercase-literal-suffix</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-uppercase-literal-suffix</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/uppercase-literal-suffix.html">

</div>
<h1 id="hicpp-uppercase-literal-suffix">hicpp-uppercase-literal-suffix</h1>
<p>The hicpp-uppercase-literal-suffix check is an alias, please see <code class="interpreted-text" role="doc">readability-uppercase-literal-suffix &lt;../readability/uppercase-literal-suffix&gt;</code> for more information.</p>
<p>Partially implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-conversions">rule 4.2.1</a> to ensure that the <code>U</code> suffix is writeln properly.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/uppercase-literal-suffix.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-auto</key>
    <name>hicpp-use-auto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-auto</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-auto.html">

</div>
<h1 id="hicpp-use-auto">hicpp-use-auto</h1>
<p>The <span class="title-ref">hicpp-use-auto</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-auto &lt;../modernize/use-auto&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/declarations">rule 7.1.8</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-auto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-emplace</key>
    <name>hicpp-use-emplace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-emplace</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-emplace.html">

</div>
<h1 id="hicpp-use-emplace">hicpp-use-emplace</h1>
<p>The <span class="title-ref">hicpp-use-emplace</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-emplace &lt;../modernize/use-emplace&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/standard-library">rule 17.4.2</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-emplace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-equals-default</key>
    <name>hicpp-use-equals-default</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-equals-defaults</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-equals-default.html">

</div>
<h1 id="hicpp-use-equals-default">hicpp-use-equals-default</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">modernize-use-equals-default &lt;../modernize/use-equals-default&gt;</code>. Implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.5.1</a> to explicitly default special member functions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-equals-default.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-equals-delete</key>
    <name>hicpp-use-equals-delete</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-equals-delete</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-equals-delete.html">

</div>
<h1 id="hicpp-use-equals-delete">hicpp-use-equals-delete</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">modernize-use-equals-delete &lt;../modernize/use-equals-delete&gt;</code>. Implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/special-member-functions">rule 12.5.1</a> to explicitly default or delete special member functions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-equals-delete.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-noexcept</key>
    <name>hicpp-use-noexcept</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-noexcept</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-noexcept.html">

</div>
<h1 id="hicpp-use-noexcept">hicpp-use-noexcept</h1>
<p>The <span class="title-ref">hicpp-use-noexcept</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-noexcept &lt;../modernize/use-noexcept&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/general">rule 1.3.5</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-noexcept.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-nullptr</key>
    <name>hicpp-use-nullptr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-nullptr</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-nullptr.html">

</div>
<h1 id="hicpp-use-nullptr">hicpp-use-nullptr</h1>
<p>The <span class="title-ref">hicpp-use-nullptr</span> check is an alias, please see <code class="interpreted-text" role="doc">modernize-use-nullptr &lt;../modernize/use-nullptr&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/lexical-conventions">rule 2.5.3</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-nullptr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-use-override</key>
    <name>hicpp-use-override</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-use-override</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-override.html">

</div>
<h1 id="hicpp-use-override">hicpp-use-override</h1>
<p>This check is an alias for <code class="interpreted-text" role="doc">modernize-use-override &lt;../modernize/use-override&gt;</code>. Implements <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/derived-classes">rule 10.2.1</a> to declare a virtual function <span class="title-ref">override</span> when overriding.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/use-override.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>hicpp-vararg</key>
    <name>hicpp-vararg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - hicpp-vararg</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../cppcoreguidelines/pro-type-vararg.html">

</div>
<h1 id="hicpp-vararg">hicpp-vararg</h1>
<p>The <span class="title-ref">hicpp-vararg</span> check is an alias, please see <code class="interpreted-text" role="doc">cppcoreguidelines-pro-type-vararg &lt;../cppcoreguidelines/pro-type-vararg&gt;</code> for more information. It enforces the <a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard/templates">rule 14.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp/vararg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>linuxkernel-must-use-errs</key>
    <name>linuxkernel-must-use-errs</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - linuxkernel-must-use-errs</p>
</div>
<h1 id="linuxkernel-must-use-errs">linuxkernel-must-use-errs</h1>
<p>Checks Linux kernel code to see if it uses the results from the functions in <code>linux/err.h</code>. Also checks to see if code uses the results from functions that directly return a value from one of these error functions.</p>
<p>This is important in the Linux kernel because <code>ERR_PTR</code>, <code>PTR_ERR</code>, <code>IS_ERR</code>, <code>IS_ERR_OR_NULL</code>, <code>ERR_CAST</code>, and <code>PTR_ERR_OR_ZERO</code> return values must be checked, since positive pointers and negative error codes are being used in the same context. These functions are marked with <code>__attribute__((warn_unused_result))</code>, but some kernel versions do not have this warning enabled for clang.</p>
<p>Examples:</p>
<pre class="c"><code>/* Trivial unused call to an ERR function */
PTR_ERR_OR_ZERO(some_function_call());

/* A function that returns ERR_PTR. */
void *fn() { ERR_PTR(-EINVAL); }

/* An invalid use of fn. */
fn();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/linuxkernel/must-use-errs.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-else-after-return</key>
    <name>llvm-else-after-return</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-else-after-return</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/else-after-return.html">

</div>
<h1 id="llvm-else-after-return">llvm-else-after-return</h1>
<p>The <span class="title-ref">llvm-else-after-return</span> check is an alias, please see <code class="interpreted-text" role="doc">readability-else-after-return &lt;../readability/else-after-return&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/else-after-return.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-header-guard</key>
    <name>llvm-header-guard</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-header-guard</p>
</div>
<h1 id="llvm-header-guard">llvm-header-guard</h1>
<p>Finds and fixes header guards that do not adhere to LLVM style.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include "." prefix). Default is "h,hh,hpp,hxx". For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. E.g., "h,hh,hpp,hxx," (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/header-guard.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-include-order</key>
    <name>llvm-include-order</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-include-order</p>
</div>
<h1 id="llvm-include-order">llvm-include-order</h1>
<p>Checks the correct order of <code>#includes</code>.</p>
<p>See <a href="https://llvm.org/docs/CodingStandards.html#include-style">https://llvm.org/docs/CodingStandards.html#include-style</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/include-order.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-namespace-comment</key>
    <name>llvm-namespace-comment</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-namespace-comment</p>
</div>
<h1 id="llvm-namespace-comment">llvm-namespace-comment</h1>
<p><span class="title-ref">google-readability-namespace-comments</span> redirects here as an alias for this check.</p>
<p>Checks that long namespaces have a closing comment.</p>
<p><a href="https://llvm.org/docs/CodingStandards.html#namespace-indentation">https://llvm.org/docs/CodingStandards.html#namespace-indentation</a></p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Namespaces">https://google.github.io/styleguide/cppguide.html#Namespaces</a></p>
<pre class="c++"><code>namespace n1 {
void f();
}

// becomes

namespace n1 {
void f();
}  // namespace n1</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ShortNamespaceLines</p>
<p>Requires the closing brace of the namespace definition to be followed by a closing comment if the body of the namespace has more than <span class="title-ref">ShortNamespaceLines</span> lines of code. The value is an unsigned integer that defaults to <span class="title-ref">1U</span>.</p>
</div>
<div class="option">
<p>SpacesBeforeComments</p>
<p>An unsigned integer specifying the number of spaces before the comment closing a namespace definition. Default is <span class="title-ref">1U</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/namespace-comment.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-prefer-isa-or-dyn-cast-in-conditionals</key>
    <name>llvm-prefer-isa-or-dyn-cast-in-conditionals</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-prefer-isa-or-dyn-cast-in-conditionals</p>
</div>
<h1 id="llvm-prefer-isa-or-dyn-cast-in-conditionals">llvm-prefer-isa-or-dyn-cast-in-conditionals</h1>
<p>Looks at conditionals and finds and replaces cases of <code>cast&lt;&gt;</code>, which will assert rather than return a null pointer, and <code>dyn_cast&lt;&gt;</code> where the return value is not captured. Additionally, finds and replaces cases that match the pattern <code>var &amp;&amp; isa&lt;X&gt;(var)</code>, where <code>var</code> is evaluated twice.</p>
<pre class="c++"><code>// Finds these:
if (auto x = cast&lt;X&gt;(y)) {}
// is replaced by:
if (auto x = dyn_cast&lt;X&gt;(y)) {}

if (cast&lt;X&gt;(y)) {}
// is replaced by:
if (isa&lt;X&gt;(y)) {}

if (dyn_cast&lt;X&gt;(y)) {}
// is replaced by:
if (isa&lt;X&gt;(y)) {}

if (var &amp;&amp; isa&lt;T&gt;(var)) {}
// is replaced by:
if (isa_and_nonnull&lt;T&gt;(var.foo())) {}

// Other cases are ignored, e.g.:
if (auto f = cast&lt;Z&gt;(y)-&gt;foo()) {}
if (cast&lt;Z&gt;(y)-&gt;foo()) {}
if (X.cast(y)) {}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/prefer-isa-or-dyn-cast-in-conditionals.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-prefer-register-over-unsigned</key>
    <name>llvm-prefer-register-over-unsigned</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-prefer-register-over-unsigned</p>
</div>
<h1 id="llvm-prefer-register-over-unsigned">llvm-prefer-register-over-unsigned</h1>
<p>Finds historical use of <code>unsigned</code> to hold vregs and physregs and rewrites them to use <code>Register</code>.</p>
<p>Currently this works by finding all variables of unsigned integer type whose initializer begins with an implicit cast from <code>Register</code> to <code>unsigned</code>.</p>
<pre class="c++"><code>void example(MachineOperand &amp;MO) {
  unsigned Reg = MO.getReg();
  ...
}</code></pre>
<p>becomes:</p>
<pre class="c++"><code>void example(MachineOperand &amp;MO) {
  Register Reg = MO.getReg();
  ...
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/prefer-register-over-unsigned.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-qualified-auto</key>
    <name>llvm-qualified-auto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-qualified-auto</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/qualified-auto.html">

</div>
<h1 id="llvm-qualified-auto">llvm-qualified-auto</h1>
<p>The <span class="title-ref">llvm-qualified-auto check</span> is an alias, please see <code class="interpreted-text" role="doc">readability-qualified-auto &lt;../readability/qualified-auto&gt;</code> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/qualified-auto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvm-twine-local</key>
    <name>llvm-twine-local</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvm-twine-local</p>
</div>
<h1 id="llvm-twine-local">llvm-twine-local</h1>
<p>Looks for local <code>Twine</code> variables which are prone to use after frees and should be generally avoided.</p>
<pre class="c++"><code>static Twine Moo = Twine(&quot;bark&quot;) + &quot;bah&quot;;

// becomes

static std::string Moo = (Twine(&quot;bark&quot;) + &quot;bah&quot;).str();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm/twine-local.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvmlibc-callee-namespace</key>
    <name>llvmlibc-callee-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvmlibc-callee-namespace</p>
</div>
<h1 id="llvmlibc-callee-namespace">llvmlibc-callee-namespace</h1>
<p>Checks all calls resolve to functions within correct namespace.</p>
<pre class="c++"><code>// Implementation inside the LIBC_NAMESPACE namespace.
// Correct if:
// - LIBC_NAMESPACE is a macro
// - LIBC_NAMESPACE expansion starts with `__llvm_libc`
namespace LIBC_NAMESPACE {

// Allow calls with the fully qualified name.
LIBC_NAMESPACE::strlen(&quot;hello&quot;);

// Allow calls to compiler provided functions.
(void)__builtin_abs(-1);

// Bare calls are allowed as long as they resolve to the correct namespace.
strlen(&quot;world&quot;);

// Disallow calling into functions in the global namespace.
::strlen(&quot;!&quot;);

} // namespace LIBC_NAMESPACE</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvmlibc/callee-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvmlibc-implementation-in-namespace</key>
    <name>llvmlibc-implementation-in-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvmlibc-implementation-in-namespace</p>
</div>
<h1 id="llvmlibc-implementation-in-namespace">llvmlibc-implementation-in-namespace</h1>
<p>Checks that all declarations in the llvm-libc implementation are within the correct namespace.</p>
<pre class="c++"><code>// Implementation inside the LIBC_NAMESPACE namespace.
// Correct if:
// - LIBC_NAMESPACE is a macro
// - LIBC_NAMESPACE expansion starts with `__llvm_libc`
namespace LIBC_NAMESPACE {
    void LLVM_LIBC_ENTRYPOINT(strcpy)(char *dest, const char *src) {}
    // Namespaces within LIBC_NAMESPACE namespace are allowed.
    namespace inner {
        int localVar = 0;
    }
    // Functions with C linkage are allowed.
    extern &quot;C&quot; void str_fuzz() {}
}

// Incorrect: implementation not in the LIBC_NAMESPACE namespace.
void LLVM_LIBC_ENTRYPOINT(strcpy)(char *dest, const char *src) {}

// Incorrect: outer most namespace is not the LIBC_NAMESPACE macro.
namespace something_else {
    void LLVM_LIBC_ENTRYPOINT(strcpy)(char *dest, const char *src) {}
}

// Incorrect: outer most namespace expansion does not start with `__llvm_libc`.
#define LIBC_NAMESPACE custom_namespace
namespace LIBC_NAMESPACE {
    void LLVM_LIBC_ENTRYPOINT(strcpy)(char *dest, const char *src) {}
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvmlibc/implementation-in-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvmlibc-inline-function-decl</key>
    <name>llvmlibc-inline-function-decl</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvmlibc-inline-function-decl</p>
</div>
<h1 id="llvmlibc-inline-function-decl">llvmlibc-inline-function-decl</h1>
<p>Checks that all implicitly and explicitly inline functions in header files are tagged with the <code>LIBC_INLINE</code> macro, except for functions implicit to classes or deleted functions. See the <a href="https://libc.llvm.org/dev/code_style.html">libc style guide</a> for more information about this macro.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvmlibc/inline-function-decl.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>llvmlibc-restrict-system-libc-headers</key>
    <name>llvmlibc-restrict-system-libc-headers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - llvmlibc-restrict-system-libc-headers</p>
</div>
<h1 id="llvmlibc-restrict-system-libc-headers">llvmlibc-restrict-system-libc-headers</h1>
<p>Finds includes of system libc headers not provided by the compiler within llvm-libc implementations.</p>
<pre class="c++"><code>#include &lt;stdio.h&gt;            // Not allowed because it is part of system libc.
#include &lt;stddef.h&gt;           // Allowed because it is provided by the compiler.
#include &quot;internal/stdio.h&quot;   // Allowed because it is NOT part of system libc.</code></pre>
<p>This check is necessary because accidentally including system libc headers can lead to subtle and hard to detect bugs. For example consider a system libc whose <code>dirent</code> struct has slightly different field ordering than llvm-libc. While this will compile successfully, this can cause issues during runtime because they are ABI incompatible.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Includes</p>
<p>A string containing a comma separated glob list of allowed include filenames. Similar to the -checks glob list for running clang-tidy itself, the two wildcard characters are <span class="title-ref">*</span> and <span class="title-ref">-</span>, to include and exclude globs, respectively. The default is <span class="title-ref">-*</span>, which disallows all includes.</p>
<p>This can be used to allow known safe includes such as Linux development headers. See <code class="interpreted-text" role="doc">portability-restrict-system-includes
&lt;../portability/restrict-system-includes&gt;</code> for more details.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvmlibc/restrict-system-libc-headers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-confusable-identifiers</key>
    <name>misc-confusable-identifiers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-confusable-identifiers</p>
</div>
<h1 id="misc-confusable-identifiers">misc-confusable-identifiers</h1>
<p>Warn about confusable identifiers, i.e. identifiers that are visually close to each other, but use different Unicode characters. This detects a potential attack described in <a href="https://www.cve.org/CVERecord?id=CVE-2021-42574">CVE-2021-42574</a>.</p>
<p>Example:</p>
<pre class="text"><code>int fo; // Initial character is U+0066 (LATIN SMALL LETTER F).
int fo; // Initial character is U+1D41F (MATHEMATICAL BOLD SMALL F) not U+0066 (LATIN SMALL LETTER F).</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/confusable-identifiers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-const-correctness</key>
    <name>misc-const-correctness</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-const-correctness</p>
</div>
<h1 id="misc-const-correctness">misc-const-correctness</h1>
<p>This check implements detection of local variables which could be declared as <code>const</code> but are not. Declaring variables as <code>const</code> is required or recommended by many coding guidelines, such as: <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es25-declare-an-object-const-or-constexpr-unless-you-want-to-modify-its-value-later-on">ES.25</a> from the C++ Core Guidelines and <a href="https://www.autosar.org/fileadmin/standards/R22-11/AP/AUTOSAR_RS_CPP14Guidelines.pdf">AUTOSAR C++14 Rule A7-1-1 (6.7.1 Specifiers)</a>.</p>
<p>Please note that this check's analysis is type-based only. Variables that are not modified but used to create a non-const handle that might escape the scope are not diagnosed as potential <code>const</code>.</p>
<pre class="c++"><code>// Declare a variable, which is not ``const`` ...
int i = 42;
// but use it as read-only. This means that `i` can be declared ``const``.
int result = i * i;       // Before transformation
int const result = i * i; // After transformation</code></pre>
<p>The check can analyze values, pointers and references but not (yet) pointees:</p>
<pre class="c++"><code>// Normal values like built-ins or objects.
int potential_const_int = 42;       // Before transformation
int const potential_const_int = 42; // After transformation
int copy_of_value = potential_const_int;

MyClass could_be_const;       // Before transformation
MyClass const could_be_const; // After transformation
could_be_const.const_qualified_method();

// References can be declared const as well.
int &amp;reference_value = potential_const_int;       // Before transformation
int const&amp; reference_value = potential_const_int; // After transformation
int another_copy = reference_value;

// The similar semantics of pointers are not (yet) analyzed.
int *pointer_variable = &amp;potential_const_int; // _NO_ &#39;const int *pointer_variable&#39; suggestion.
int last_copy = *pointer_variable;</code></pre>
<p>The automatic code transformation is only applied to variables that are declared in single declarations. You may want to prepare your code base with <code class="interpreted-text" role="doc">readability-isolate-declaration &lt;../readability/isolate-declaration&gt;</code> first.</p>
<p>Note that there is the check <code class="interpreted-text" role="doc">cppcoreguidelines-avoid-non-const-global-variables &lt;../cppcoreguidelines/avoid-non-const-global-variables&gt;</code> to enforce <code>const</code> correctness on all globals.</p>
<h2 id="known-limitations">Known Limitations</h2>
<p>The check does not run on <span class="title-ref">C</span> code.</p>
<p>The check will not analyze templated variables or variables that are instantiation dependent. Different instantiations can result in different <code>const</code> correctness properties and in general it is not possible to find all instantiations of a template. The template might be used differently in an independent translation unit.</p>
<p>Pointees can not be analyzed for constness yet. The following code shows this limitation.</p>
<pre class="c++"><code>// Declare a variable that will not be modified.
int constant_value = 42;

// Declare a pointer to that variable, that does not modify either, but misses &#39;const&#39;.
// Could be &#39;const int *pointer_to_constant = &amp;constant_value;&#39;
int *pointer_to_constant = &amp;constant_value;

// Usage:
int result = 520 * 120 * (*pointer_to_constant);</code></pre>
<p>This limitation affects the capability to add <code>const</code> to methods which is not possible, too.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AnalyzeValues (default = true)</p>
<p>Enable or disable the analysis of ordinary value variables, like <code>int i = 42;</code></p>
<pre class="c++"><code>// Warning
int i = 42;
// No warning
int const i = 42;

// Warning
int a[] = {42, 42, 42};
// No warning
int const a[] = {42, 42, 42};</code></pre>
</div>
<div class="option">
<p>AnalyzeReferences (default = true)</p>
<p>Enable or disable the analysis of reference variables, like <code>int &amp;ref = i;</code></p>
<pre class="c++"><code>int i = 42;
// Warning
int&amp; ref = i;
// No warning
int const&amp; ref = i;</code></pre>
</div>
<div class="option">
<p>WarnPointersAsValues (default = false)</p>
<p>This option enables the suggestion for <code>const</code> of the pointer itself. Pointer values have two possibilities to be <code>const</code>, the pointer and the value pointing to.</p>
<pre class="c++"><code>int value = 42;

// Warning
const int * pointer_variable = &amp;value;
// No warning
const int *const pointer_variable = &amp;value;</code></pre>
</div>
<div class="option">
<p>TransformValues (default = true)</p>
<p>Provides fixit-hints for value types that automatically add <code>const</code> if its a single declaration.</p>
<pre class="c++"><code>// Before
int value = 42;
// After
int const value = 42;

// Before
int a[] = {42, 42, 42};
// After
int const a[] = {42, 42, 42};

// Result is modified later in its life-time. No diagnostic and fixit hint will be emitted.
int result = value * 3;
result -= 10;</code></pre>
</div>
<div class="option">
<p>TransformReferences (default = true)</p>
<p>Provides fixit-hints for reference types that automatically add <code>const</code> if its a single declaration.</p>
<pre class="c++"><code>// This variable could still be a constant. But because there is a non-const reference to
// it, it can not be transformed (yet).
int value = 42;
// The reference &#39;ref_value&#39; is not modified and can be made &#39;const int &amp;ref_value = value;&#39;
// Before
int &amp;ref_value = value;
// After
int const &amp;ref_value = value;

// Result is modified later in its life-time. No diagnostic and fixit hint will be emitted.
int result = ref_value * 3;
result -= 10;</code></pre>
</div>
<div class="option">
<p>TransformPointersAsValues (default = false)</p>
<p>Provides fixit-hints for pointers if their pointee is not changed. This does not analyze if the value-pointed-to is unchanged!</p>
<p>Requires 'WarnPointersAsValues' to be 'true'.</p>
<pre class="c++"><code>int value = 42;

// Before
const int * pointer_variable = &amp;value;
// After
const int *const pointer_variable = &amp;value;

// Before
const int * a[] = {&amp;value, &amp;value};
// After
const int *const a[] = {&amp;value, &amp;value};

// Before
int *ptr_value = &amp;value;
// After
int *const ptr_value = &amp;value;

int result = 100 * (*ptr_value); // Does not modify the pointer itself.
// This modification of the pointee is still allowed and not diagnosed.
*ptr_value = 0;

// The following pointer may not become a &#39;int *const&#39;.
int *changing_pointee = &amp;value;
changing_pointee = &amp;result;</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/const-correctness.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-coroutine-hostile-raii</key>
    <name>misc-coroutine-hostile-raii</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-coroutine-hostile-raii</p>
</div>
<h1 id="misc-coroutine-hostile-raii">misc-coroutine-hostile-raii</h1>
<p>Detects when objects of certain hostile RAII types persists across suspension points in a coroutine. Such hostile types include scoped-lockable types and types belonging to a configurable denylist.</p>
<p>Some objects require that they be destroyed on the same thread that created them. Traditionally this requirement was often phrased as "must be a local variable", under the assumption that local variables always work this way. However this is incorrect with C++20 coroutines, since an intervening <code>co_await</code> may cause the coroutine to suspend and later be resumed on another thread.</p>
<p>The lifetime of an object that requires being destroyed on the same thread must not encompass a <code>co_await</code> or <code>co_yield</code> point. If you create/destroy an object, you must do so without allowing the coroutine to suspend in the meantime.</p>
<p>Following types are considered as hostile:</p>
<blockquote>
<ul>
<li>Scoped-lockable types: A scoped-lockable object persisting across a suspension point is problematic as the lock held by this object could be unlocked by a different thread. This would be undefined behaviour. This includes all types annotated with the <code>scoped_lockable</code> attribute.</li>
<li>Types belonging to a configurable denylist.</li>
</ul>
</blockquote>
<pre class="c++"><code>// Call some async API while holding a lock.
task coro() {
  const std::lock_guard l(&amp;mu_);

  // Oops! The async Bar function may finish on a different
  // thread from the one that created the lock_guard (and called
  // Mutex::Lock). After suspension, Mutex::Unlock will be called on the wrong thread.
  co_await Bar();
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>RAIITypesList</p>
<p>A semicolon-separated list of qualified types which should not be allowed to persist across suspension points. Eg: <code>my::lockable; a::b;::my::other::lockable;</code> The default value of this option is <span class="title-ref">"std::lock_guard;std::scoped_lock"</span>.</p>
</div>
<div class="option">
<p>AllowedAwaitablesList</p>
<p>A semicolon-separated list of qualified types of awaitables types which can be safely awaited while having hostile RAII objects in scope.</p>
<p><code>co_await</code>-ing an expression of <code>awaitable</code> type is considered safe if the <code>awaitable</code> type is part of this list. RAII objects persisting across such a <code>co_await</code> expression are considered safe and hence are not flagged.</p>
<p>Example usage:</p>
<pre class="c++"><code>// Consider option AllowedAwaitablesList = &quot;safe_awaitable&quot;
struct safe_awaitable {
  bool await_ready() noexcept { return false; }
  void await_suspend(std::coroutine_handle&lt;&gt;) noexcept {}
  void await_resume() noexcept {}
};
auto wait() { return safe_awaitable{}; }

task coro() {
  // This persists across both the co_await&#39;s but is not flagged
  // because the awaitable is considered safe to await on.
  const std::lock_guard l(&amp;mu_);
  co_await safe_awaitable{};
  co_await wait();
}</code></pre>
<p>Eg: <code>my::safe::awaitable;other::awaitable</code> The default value of this option is empty string <span class="title-ref">""</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/coroutine-hostile-raii.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-definitions-in-headers</key>
    <name>misc-definitions-in-headers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-definitions-in-headers</p>
</div>
<h1 id="misc-definitions-in-headers">misc-definitions-in-headers</h1>
<p>Finds non-extern non-inline function and variable definitions in header files, which can lead to potential ODR violations in case these headers are included from multiple translation units.</p>
<pre class="c++"><code>// Foo.h
int a = 1; // Warning: variable definition.
extern int d; // OK: extern variable.

namespace N {
  int e = 2; // Warning: variable definition.
}

// Warning: variable definition.
const char* str = &quot;foo&quot;;

// OK: internal linkage variable definitions are ignored for now.
// Although these might also cause ODR violations, we can be less certain and
// should try to keep the false-positive rate down.
static int b = 1;
const int c = 1;
const char* const str2 = &quot;foo&quot;;
constexpr int k = 1;
namespace { int x = 1; }

// Warning: function definition.
int g() {
  return 1;
}

// OK: inline function definition is allowed to be defined multiple times.
inline int e() {
  return 1;
}

class A {
public:
  int f1() { return 1; } // OK: implicitly inline member function definition is allowed.
  int f2();

  static int d;
};

// Warning: not an inline member function definition.
int A::f2() { return 1; }

// OK: class static data member declaration is allowed.
int A::d = 1;

// OK: function template is allowed.
template&lt;typename T&gt;
T f3() {
  T a = 1;
  return a;
}

// Warning: full specialization of a function template is not allowed.
template &lt;&gt;
int f3() {
  int a = 1;
  return a;
}

template &lt;typename T&gt;
struct B {
  void f1();
};

// OK: member function definition of a class template is allowed.
template &lt;typename T&gt;
void B&lt;T&gt;::f1() {}

class CE {
  constexpr static int i = 5; // OK: inline variable definition.
};

inline int i = 5; // OK: inline variable definition.

constexpr int f10() { return 0; } // OK: constexpr function implies inline.

// OK: C++14 variable templates are inline.
template &lt;class T&gt;
constexpr T pi = T(3.1415926L);</code></pre>
<p>When <code class="interpreted-text" role="program">clang-tidy</code> is invoked with the <span class="title-ref">--fix-notes</span> option, this check provides fixes that automatically add the <code>inline</code> keyword to discovered functions. Please note that the addition of the <code>inline</code> keyword to variables is not currently supported by this check.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include "." prefix). Default is "h,hh,hpp,hxx". For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. E.g., "h,hh,hpp,hxx," (note the trailing comma).</p>
</div>
<div class="option">
<p>UseHeaderFileExtension</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. The check will unconditionally use the global option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>When <span class="title-ref">true</span>, the check will use the file extension to distinguish header files. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/definitions-in-headers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-header-include-cycle</key>
    <name>misc-header-include-cycle</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-header-include-cycle</p>
</div>
<h1 id="misc-header-include-cycle">misc-header-include-cycle</h1>
<p>Check detects cyclic <code>#include</code> dependencies between user-defined headers.</p>
<pre class="c++"><code>// Header A.hpp
#pragma once
#include &quot;B.hpp&quot;

// Header B.hpp
#pragma once
#include &quot;C.hpp&quot;

// Header C.hpp
#pragma once
#include &quot;A.hpp&quot;

// Include chain: A-&gt;B-&gt;C-&gt;A</code></pre>
<p>Header files are a crucial part of many C++ programs as they provide a way to organize declarations and definitions shared across multiple source files. However, header files can also create problems when they become entangled in complex dependency cycles. Such cycles can cause issues with compilation times, unnecessary rebuilds, and make it harder to understand the overall structure of the code.</p>
<p>To address these issues, a check has been developed to detect cyclic dependencies between header files, also known as "include cycles". An include cycle occurs when a header file <span class="title-ref">A</span> includes header file <span class="title-ref">B</span>, and <span class="title-ref">B</span> (or any subsequent included header file) includes back header file <span class="title-ref">A</span>, resulting in a circular dependency cycle.</p>
<p>This check operates at the preprocessor level and specifically analyzes user-defined headers and their dependencies. It focuses solely on detecting include cycles while disregarding other types or function dependencies. This specialized analysis helps identify and prevent issues related to header file organization.</p>
<p>By detecting include cycles early in the development process, developers can identify and resolve these issues before they become more difficult and time-consuming to fix. This can lead to faster compile times, improved code quality, and a more maintainable codebase overall. Additionally, by ensuring that header files are organized in a way that avoids cyclic dependencies, developers can make their code easier to understand and modify over time.</p>
<p>It's worth noting that only user-defined headers their dependencies are analyzed, System includes such as standard library headers and third-party library headers are excluded. System includes are usually well-designed and free of include cycles, and ignoring them helps to focus on potential issues within the project's own codebase. This limitation doesn't diminish the ability to detect <code>#include</code> cycles within the analyzed code.</p>
<p>Developers should carefully review any warnings or feedback provided by this solution. While the analysis aims to identify and prevent include cycles, there may be situations where exceptions or modifications are necessary. It's important to exercise judgment and consider the specific context of the codebase when making adjustments.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredFilesList</p>
<p>Provides a way to exclude specific files/headers from the warnings raised by a check. This can be achieved by specifying a semicolon-separated list of regular expressions or filenames. This option can be used as an alternative to <code>//NOLINT</code> when using it is not possible. The default value of this option is an empty string, indicating that no files are ignored by default.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/header-include-cycle.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-include-cleaner</key>
    <name>misc-include-cleaner</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-include-cleaner</p>
</div>
<h1 id="misc-include-cleaner">misc-include-cleaner</h1>
<p>Checks for unused and missing includes. Generates findings only for the main file of a translation unit. Findings correspond to <a href="https://clangd.llvm.org/design/include-cleaner">https://clangd.llvm.org/design/include-cleaner</a>.</p>
<p>Example:</p>
<pre class="c++"><code>// foo.h
class Foo{};
// bar.h
#include &quot;baz.h&quot;
class Bar{};
// baz.h
class Baz{};
// main.cc
#include &quot;bar.h&quot; // OK: uses class Bar from bar.h
#include &quot;foo.h&quot; // warning: unused include &quot;foo.h&quot;
Bar bar;
Baz baz; // warning: missing include &quot;baz.h&quot;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreHeaders</p>
<p>A semicolon-separated list of regexes to disable insertion/removal of header files that match this regex as a suffix. E.g., <span class="title-ref">foo/.*</span> disables insertion/removal for all headers under the directory <span class="title-ref">foo</span>. By default, no headers will be ignored.</p>
</div>
<div class="option">
<p>DeduplicateFindings</p>
<p>A boolean that controls whether the check should deduplicate findings for the same symbol. Defaults to <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/include-cleaner.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-misleading-bidirectional</key>
    <name>misc-misleading-bidirectional</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-misleading-bidirectional</p>
</div>
<h1 id="misc-misleading-bidirectional">misc-misleading-bidirectional</h1>
<p>Warn about unterminated bidirectional unicode sequence, detecting potential attack as described in the <a href="https://www.trojansource.codes">Trojan Source</a> attack.</p>
<p>Example:</p>
<pre class="c++"><code>#include &lt;iostream&gt;

int main() {
    bool isAdmin = false;
    /* } if (isAdmin) begin admins only */
        std::cout &lt;&lt; &quot;You are an admin.\n&quot;;
    /* end admins only { */
    return 0;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/misleading-bidirectional.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-misleading-identifier</key>
    <name>misc-misleading-identifier</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-misleading-identifier</p>
</div>
<h1 id="misc-misleading-identifier">misc-misleading-identifier</h1>
<p>Finds identifiers that contain Unicode characters with right-to-left direction, which can be confusing as they may change the understanding of a whole statement line, as described in <a href="https://trojansource.codes">Trojan Source</a>.</p>
<p>An example of such misleading code follows:</p>
<pre class="text"><code>#include &lt;stdio.h&gt;

short int N = (short int)0;
short int l = (short int)12345;

int main() {
  int N = N; // a local variable, set to zero?
  printf(&quot;l is %d\n&quot;, l);
  printf(&quot;N is %d\n&quot;, N);
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/misleading-identifier.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-misplaced-const</key>
    <name>misc-misplaced-const</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-misplaced-const</p>
</div>
<h1 id="misc-misplaced-const">misc-misplaced-const</h1>
<p>This check diagnoses when a <code>const</code> qualifier is applied to a <code>typedef</code>/ <code>using</code> to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the <code>const</code> applies to the pointer rather than the pointee.</p>
<p>For instance, in the following code, the resulting type is <code>int * const</code> rather than <code>const int *</code>:</p>
<pre class="c++"><code>typedef int *int_ptr;
void f(const int_ptr ptr) {
  *ptr = 0; // potentially quite unexpectedly the int can be modified here
  ptr = 0; // does not compile
}</code></pre>
<p>The check does not diagnose when the underlying <code>typedef</code>/<code>using</code> type is a pointer to a <code>const</code> type or a function pointer type. This is because the <code>const</code> qualifier is less likely to be mistaken because it would be redundant (or disallowed) on the underlying pointee type.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/misplaced-const.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-new-delete-overloads</key>
    <name>misc-new-delete-overloads</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-new-delete-overloads</p>
</div>
<h1 id="misc-new-delete-overloads">misc-new-delete-overloads</h1>
<p><span class="title-ref">cert-dcl54-cpp</span> redirects here as an alias for this check.</p>
<p>The check flags overloaded operator <code>new()</code> and operator <code>delete()</code> functions that do not have a corresponding free store function defined within the same scope. For instance, the check will flag a class implementation of a non-placement operator <code>new()</code> when the class does not also define a non-placement operator <code>delete()</code> function as well.</p>
<p>The check does not flag implicitly-defined operators, deleted or private operators, or placement operators.</p>
<p>This check corresponds to CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL54-CPP.+Overload+allocation+and+deallocation+functions+as+a+pair+in+the+same+scope">DCL54-CPP. Overload allocation and deallocation functions as a pair in the same scope</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/new-delete-overloads.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-no-recursion</key>
    <name>misc-no-recursion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-no-recursion</p>
</div>
<h1 id="misc-no-recursion">misc-no-recursion</h1>
<p>Finds strongly connected functions (by analyzing the call graph for SCC's (Strongly Connected Components) that are loops), diagnoses each function in the cycle, and displays one example of a possible call graph loop (recursion).</p>
<p>References:</p>
<ul>
<li>CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/DCL56-CPP.+Avoid+cycles+during+initialization+of+static+objects">DCL56-CPP. Avoid cycles during initialization of static objects</a>.</li>
<li>JPL Institutional Coding Standard for the C Programming Language (JPL DOCID D-60411) rule <span class="title-ref">2.4 Do not use direct or indirect recursion</span>.</li>
<li>OpenCL Specification, Version 1.2 rule <a href="https://www.khronos.org/registry/OpenCL/specs/opencl-1.2.pdf">6.9 Restrictions: i. Recursion is not supported.</a>.</li>
</ul>
<p>Limitations:</p>
<ul>
<li>The check does not handle calls done through function pointers</li>
<li>The check does not handle C++ destructors</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/no-recursion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-non-copyable-objects</key>
    <name>misc-non-copyable-objects</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-non-copyable-objects</p>
</div>
<h1 id="misc-non-copyable-objects">misc-non-copyable-objects</h1>
<p><span class="title-ref">cert-fio38-c</span> redirects here as an alias for this check.</p>
<p>The check flags dereferences and non-pointer declarations of objects that are not meant to be passed by value, such as C FILE objects or POSIX <code>pthread_mutex_t</code> objects.</p>
<p>This check corresponds to CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/FIO38-C.+Do+not+copy+a+FILE+object">FIO38-C. Do not copy a FILE object</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/non-copyable-objects.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-non-private-member-variables-in-classes</key>
    <name>misc-non-private-member-variables-in-classes</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-non-private-member-variables-in-classes</p>
</div>
<h1 id="misc-non-private-member-variables-in-classes">misc-non-private-member-variables-in-classes</h1>
<p><span class="title-ref">cppcoreguidelines-non-private-member-variables-in-classes</span> redirects here as an alias for this check.</p>
<p>Finds classes that contain non-static data members in addition to user-declared non-static member functions and diagnose all data members declared with a non-<code>public</code> access specifier. The data members should be declared as <code>private</code> and accessed through member functions instead of exposed to derived classes or class consumers.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreClassesWithAllMemberVariablesBeingPublic</p>
<p>Allows to completely ignore classes if <strong>all</strong> the member variables in that class a declared with a <code>public</code> access specifier.</p>
</div>
<div class="option">
<p>IgnorePublicMemberVariables</p>
<p>Allows to ignore (not diagnose) <strong>all</strong> the member variables declared with a <code>public</code> access specifier.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/non-private-member-variables-in-classes.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-redundant-expression</key>
    <name>misc-redundant-expression</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-redundant-expression</p>
</div>
<h1 id="misc-redundant-expression">misc-redundant-expression</h1>
<p>Detect redundant expressions which are typically errors due to copy-paste.</p>
<p>Depending on the operator expressions may be</p>
<ul>
<li>redundant,</li>
<li>always <code>true</code>,</li>
<li>always <code>false</code>,</li>
<li>always a constant (zero or one).</li>
</ul>
<p>Examples:</p>
<pre class="c++"><code>((x+1) | (x+1))             // (x+1) is redundant
(p-&gt;x == p-&gt;x)              // always true
(p-&gt;x &lt; p-&gt;x)               // always false
(speed - speed + 1 == 12)   // speed - speed is always zero</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/redundant-expression.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-static-assert</key>
    <name>misc-static-assert</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-static-assert</p>
</div>
<h1 id="misc-static-assert">misc-static-assert</h1>
<p><span class="title-ref">cert-dcl03-c</span> redirects here as an alias for this check.</p>
<p>Replaces <code>assert()</code> with <code>static_assert()</code> if the condition is evaluable at compile time.</p>
<p>The condition of <code>static_assert()</code> is evaluated at compile time which is safer and more efficient.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/static-assert.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-throw-by-value-catch-by-reference</key>
    <name>misc-throw-by-value-catch-by-reference</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-throw-by-value-catch-by-reference</p>
</div>
<h1 id="misc-throw-by-value-catch-by-reference">misc-throw-by-value-catch-by-reference</h1>
<p><span class="title-ref">cert-err09-cpp</span> redirects here as an alias for this check. <span class="title-ref">cert-err61-cpp</span> redirects here as an alias for this check.</p>
<p>Finds violations of the rule "Throw by value, catch by reference" presented for example in "C++ Coding Standards" by H. Sutter and A. Alexandrescu, as well as the CERT C++ Coding Standard rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR61-CPP.+Catch+exceptions+by+lvalue+reference">ERR61-CPP. Catch exceptions by lvalue reference</a>.</p>
<dl>
<dt>Exceptions:</dt>
<dd><ul>
<li>Throwing string literals will not be flagged despite being a pointer. They are not susceptible to slicing and the usage of string literals is idiomatic.</li>
<li>Catching character pointers (<code>char</code>, <code>wchar_t</code>, unicode character types) will not be flagged to allow catching string literals.</li>
<li>Moved named values will not be flagged as not throwing an anonymous temporary. In this case we can be sure that the user knows that the object can't be accessed outside catch blocks handling the error.</li>
<li>Throwing function parameters will not be flagged as not throwing an anonymous temporary. This allows helper functions for throwing.</li>
<li>Re-throwing caught exception variables will not be flagged as not throwing an anonymous temporary. Although this can usually be done by just writing <code>throw;</code> it happens often enough in real code.</li>
</ul>
</dd>
</dl>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckThrowTemporaries</p>
<p>Triggers detection of violations of the CERT recommendation ERR09-CPP. Throw anonymous temporaries. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>WarnOnLargeObject</p>
<p>Also warns for any large, trivial object caught by value. Catching a large object by value is not dangerous but affects the performance negatively. The maximum size of an object allowed to be caught without warning can be set using the <span class="title-ref">MaxSize</span> option. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>MaxSize</p>
<p>Determines the maximum size of an object allowed to be caught without warning. Only applicable if <code class="interpreted-text" role="option">WarnOnLargeObject</code> is set to <span class="title-ref">true</span>. If the option is set by the user to <span class="title-ref">std::numeric_limits&lt;uint64_t&gt;::max()</span> then it reverts to the default value. Default is the size of <span class="title-ref">size_t</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/throw-by-value-catch-by-reference.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-unconventional-assign-operator</key>
    <name>misc-unconventional-assign-operator</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-unconventional-assign-operator</p>
</div>
<h1 id="misc-unconventional-assign-operator">misc-unconventional-assign-operator</h1>
<p>Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong <code>return</code> statements.</p>
<blockquote>
<ul>
<li>The return type must be <code>Class&amp;</code>.</li>
<li>The assignment may be from the class type by value, const lvalue reference, non-const rvalue reference, or from a completely different type (e.g. <code>int</code>).</li>
<li>Private and deleted operators are ignored.</li>
<li>The operator must always return <code>*this</code>.</li>
</ul>
</blockquote>
<p>This check implements <a href="https://www.autosar.org/fileadmin/standards/R22-11/AP/AUTOSAR_RS_CPP14Guidelines.pdf">AUTOSAR C++14 Rule A13-2-1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/unconventional-assign-operator.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-uniqueptr-reset-release</key>
    <name>misc-uniqueptr-reset-release</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-uniqueptr-reset-release</p>
</div>
<h1 id="misc-uniqueptr-reset-release">misc-uniqueptr-reset-release</h1>
<p>Find and replace <code>unique_ptr::reset(release())</code> with <code>std::move()</code>.</p>
<p>Example:</p>
<pre class="c++"><code>std::unique_ptr&lt;Foo&gt; x, y;
x.reset(y.release()); -&gt; x = std::move(y);</code></pre>
<p>If <code>y</code> is already rvalue, <code>std::move()</code> is not added. <code>x</code> and <code>y</code> can also be <code>std::unique_ptr&lt;Foo&gt;*</code>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/uniqueptr-reset-release.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>misc-unused-alias-decls</key>
    <name>misc-unused-alias-decls</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-unused-alias-decls</p>
</div>
<h1 id="misc-unused-alias-decls">misc-unused-alias-decls</h1>
<p>Finds unused namespace alias declarations.</p>
<pre class="c++"><code>namespace my_namespace {
class C {};
}
namespace unused_alias = ::my_namespace;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/unused-alias-decls.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-unused-parameters</key>
    <name>misc-unused-parameters</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-unused-parameters</p>
</div>
<h1 id="misc-unused-parameters">misc-unused-parameters</h1>
<p>Finds unused function parameters. Unused parameters may signify a bug in the code (e.g. when a different parameter is used instead). The suggested fixes either comment parameter name out or remove the parameter completely, if all callers of the function are in the same translation unit and can be updated.</p>
<p>The check is similar to the <code>-Wunused-parameter</code> compiler diagnostic and can be used to prepare a codebase to enabling of that diagnostic. By default the check is more permissive (see <code class="interpreted-text" role="option">StrictMode</code>).</p>
<pre class="c++"><code>void a(int i) { /*some code that doesn&#39;t use `i`*/ }

// becomes

void a(int  /*i*/) { /*some code that doesn&#39;t use `i`*/ }</code></pre>
<pre class="c++"><code>static void staticFunctionA(int i);
static void staticFunctionA(int i) { /*some code that doesn&#39;t use `i`*/ }

// becomes

static void staticFunctionA()
static void staticFunctionA() { /*some code that doesn&#39;t use `i`*/ }</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When <span class="title-ref">false</span> (default value), the check will ignore trivially unused parameters, i.e. when the corresponding function has an empty body (and in case of constructors - no constructor initializers). When the function body is empty, an unused parameter is unlikely to be unnoticed by a human reader, and there's basically no place for a bug to hide.</p>
</div>
<div class="option">
<p>IgnoreVirtual</p>
<p>Determines whether virtual method parameters should be inspected. Set to <span class="title-ref">true</span> to ignore them. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/unused-parameters.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-unused-using-decls</key>
    <name>misc-unused-using-decls</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-unused-using-decls</p>
</div>
<h1 id="misc-unused-using-decls">misc-unused-using-decls</h1>
<p>Finds unused <code>using</code> declarations.</p>
<p>Unused <code>using</code><span class="title-ref"> declarations in header files will not be diagnosed since these using declarations are part of the header's public API. Allowed header file extensions can be configured via the `HeaderFileExtensions</span> option (see below).</p>
<p>Example:</p>
<pre class="c++"><code>// main.cpp
namespace n { class C; }
using n::C;  // Never actually used.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A semicolon-separated list of filename extensions of header files (the filename extensions should not include "." prefix). Default is "h,hh,hpp,hxx". For extension-less header files, use an empty string or leave an empty string between "," if there are other filename extensions.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/unused-using-decls.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>misc-use-anonymous-namespace</key>
    <name>misc-use-anonymous-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - misc-use-anonymous-namespace</p>
</div>
<h1 id="misc-use-anonymous-namespace">misc-use-anonymous-namespace</h1>
<p>Finds instances of <code>static</code> functions or variables declared at global scope that could instead be moved into an anonymous namespace.</p>
<p>Anonymous namespaces are the "superior alternative" according to the C++ Standard. <code>static</code> was proposed for deprecation, but later un-deprecated to keep C compatibility [1]. <code>static</code> is an overloaded term with different meanings in different contexts, so it can create confusion.</p>
<p>The following uses of <code>static</code> will <em>not</em> be diagnosed:</p>
<ul>
<li>Functions or variables in header files, since anonymous namespaces in headers is considered an antipattern. Allowed header file extensions can be configured via the <span class="title-ref">HeaderFileExtensions</span> option (see below).</li>
<li><code>const</code> or <code>constexpr</code> variables, since they already have implicit internal linkage in C++.</li>
</ul>
<p>Examples:</p>
<pre class="c++"><code>// Bad
static void foo();
static int x;

// Good
namespace {
  void foo();
  int x;
} // namespace</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>Note: this option is deprecated, it will be removed in <code class="interpreted-text" role="program">clang-tidy</code> version 19. Please use the global configuration option <span class="title-ref">HeaderFileExtensions</span>.</p>
<p>A semicolon-separated list of filename extensions of header files (the filename extensions should not include "." prefix). Default is ";h;hh;hpp;hxx". For extension-less header files, using an empty string or leaving an empty string between ";" if there are other filename extensions.</p>
</div>
<p>[1] <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1012">Undeprecating static</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc/use-anonymous-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-avoid-bind</key>
    <name>modernize-avoid-bind</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-avoid-bind</p>
</div>
<h1 id="modernize-avoid-bind">modernize-avoid-bind</h1>
<p>The check finds uses of <code>std::bind</code> and <code>boost::bind</code> and replaces them with lambdas. Lambdas will use value-capture unless reference capture is explicitly requested with <code>std::ref</code> or <code>boost::ref</code>.</p>
<p>It supports arbitrary callables including member functions, function objects, and free functions, and all variations thereof. Anything that you can pass to the first argument of <code>bind</code> should be diagnosable. Currently, the only known case where a fix-it is unsupported is when the same placeholder is specified multiple times in the parameter list.</p>
<p>Given:</p>
<pre class="c++"><code>int add(int x, int y) { return x + y; }</code></pre>
<p>Then:</p>
<pre class="c++"><code>void f() {
  int x = 2;
  auto clj = std::bind(add, x, _1);
}</code></pre>
<p>is replaced by:</p>
<pre class="c++"><code>void f() {
  int x = 2;
  auto clj = [=](auto &amp;&amp; arg1) { return add(x, arg1); };
}</code></pre>
<p><code>std::bind</code> can be hard to read and can result in larger object files and binaries due to type information that will not be produced by equivalent lambdas.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>PermissiveParameterList</p>
<p>If the option is set to <span class="title-ref">true</span>, the check will append <code>auto&amp;&amp;...</code> to the end of every placeholder parameter list. Without this, it is possible for a fix-it to perform an incorrect transformation in the case where the result of the <code>bind</code> is used in the context of a type erased functor such as <code>std::function</code> which allows mismatched arguments. For example:</p>
</div>
<pre class="c++"><code>int add(int x, int y) { return x + y; }
int foo() {
  std::function&lt;int(int,int)&gt; ignore_args = std::bind(add, 2, 2);
  return ignore_args(3, 3);
}</code></pre>
<p>is valid code, and returns <span class="title-ref">4</span>. The actual values passed to <code>ignore_args</code> are simply ignored. Without <code>PermissiveParameterList</code>, this would be transformed into</p>
<pre class="c++"><code>int add(int x, int y) { return x + y; }
int foo() {
  std::function&lt;int(int,int)&gt; ignore_args = [] { return add(2, 2); }
  return ignore_args(3, 3);
}</code></pre>
<p>which will <em>not</em> compile, since the lambda does not contain an <code>operator()</code> that accepts 2 arguments. With permissive parameter list, it instead generates</p>
<pre class="c++"><code>int add(int x, int y) { return x + y; }
int foo() {
  std::function&lt;int(int,int)&gt; ignore_args = [](auto&amp;&amp;...) { return add(2, 2); }
  return ignore_args(3, 3);
}</code></pre>
<p>which is correct.</p>
<p>This check requires using C++14 or higher to run.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/avoid-bind.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-avoid-c-arrays</key>
    <name>modernize-avoid-c-arrays</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-avoid-c-arrays</p>
</div>
<h1 id="modernize-avoid-c-arrays">modernize-avoid-c-arrays</h1>
<p><span class="title-ref">cppcoreguidelines-avoid-c-arrays</span> redirects here as an alias for this check.</p>
<p><span class="title-ref">hicpp-avoid-c-arrays</span> redirects here as an alias for this check.</p>
<p>Finds C-style array types and recommend to use <code>std::array&lt;&gt;</code> / <code>std::vector&lt;&gt;</code>. All types of C arrays are diagnosed.</p>
<p>However, fix-it are potentially dangerous in header files and are therefore not emitted right now.</p>
<pre class="c++"><code>int a[] = {1, 2}; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

int b[1]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

void foo() {
  int c[b[0]]; // warning: do not declare C VLA arrays, use std::vector&lt;&gt; instead
}

template &lt;typename T, int Size&gt;
class array {
  T d[Size]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

  int e[1]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead
};

array&lt;int[4], 2&gt; d; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

using k = int[4]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead</code></pre>
<p>However, the <code>extern "C"</code> code is ignored, since it is common to share such headers between C code, and C++ code.</p>
<pre class="c++"><code>// Some header
extern &quot;C&quot; {

int f[] = {1, 2}; // not diagnosed

int j[1]; // not diagnosed

inline void bar() {
  {
    int j[j[0]]; // not diagnosed
  }
}

}</code></pre>
<p>Similarly, the <code>main()</code> function is ignored. Its second and third parameters can be either <code>char* argv[]</code> or <code>char** argv</code>, but cannot be <code>std::array&lt;&gt;</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-concat-nested-namespaces</key>
    <name>modernize-concat-nested-namespaces</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-concat-nested-namespaces</p>
</div>
<h1 id="modernize-concat-nested-namespaces">modernize-concat-nested-namespaces</h1>
<p>Checks for use of nested namespaces such as <code>namespace a { namespace b { ... } }</code> and suggests changing to the more concise syntax introduced in C++17: <code>namespace a::b { ... }</code>. Inline namespaces are not modified.</p>
<p>For example:</p>
<pre class="c++"><code>namespace n1 {
namespace n2 {
void t();
}
}

namespace n3 {
namespace n4 {
namespace n5 {
void t();
}
}
namespace n6 {
namespace n7 {
void t();
}
}
}

// in c++20
namespace n8 {
inline namespace n9 {
void t();
}
}</code></pre>
<p>Will be modified to:</p>
<pre class="c++"><code>namespace n1::n2 {
void t();
}

namespace n3 {
namespace n4::n5 {
void t();
}
namespace n6::n7 {
void t();
}
}

// in c++20
namespace n8::inline n9 {
void t();
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/concat-nested-namespaces.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-deprecated-headers</key>
    <name>modernize-deprecated-headers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-deprecated-headers</p>
</div>
<h1 id="modernize-deprecated-headers">modernize-deprecated-headers</h1>
<p>Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases. Some have no effect in C++. For more details refer to the C++ 14 Standard [depr.c.headers] section.</p>
<p>This check replaces C standard library headers with their C++ alternatives and removes redundant ones.</p>
<pre class="c++"><code>// C++ source file...
#include &lt;assert.h&gt;
#include &lt;stdbool.h&gt;

// becomes

#include &lt;cassert&gt;
// No &#39;stdbool.h&#39; here.</code></pre>
<p>Important note: the Standard doesn't guarantee that the C++ headers declare all the same functions in the global namespace. The check in its current form can break the code that uses library symbols from the global namespace.</p>
<ul>
<li><span class="title-ref">&lt;assert.h&gt;</span></li>
<li><span class="title-ref">&lt;complex.h&gt;</span></li>
<li><span class="title-ref">&lt;ctype.h&gt;</span></li>
<li><span class="title-ref">&lt;errno.h&gt;</span></li>
<li><span class="title-ref">&lt;fenv.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;float.h&gt;</span></li>
<li><span class="title-ref">&lt;inttypes.h&gt;</span></li>
<li><span class="title-ref">&lt;limits.h&gt;</span></li>
<li><span class="title-ref">&lt;locale.h&gt;</span></li>
<li><span class="title-ref">&lt;math.h&gt;</span></li>
<li><span class="title-ref">&lt;setjmp.h&gt;</span></li>
<li><span class="title-ref">&lt;signal.h&gt;</span></li>
<li><span class="title-ref">&lt;stdarg.h&gt;</span></li>
<li><span class="title-ref">&lt;stddef.h&gt;</span></li>
<li><span class="title-ref">&lt;stdint.h&gt;</span></li>
<li><span class="title-ref">&lt;stdio.h&gt;</span></li>
<li><span class="title-ref">&lt;stdlib.h&gt;</span></li>
<li><span class="title-ref">&lt;string.h&gt;</span></li>
<li><span class="title-ref">&lt;tgmath.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;time.h&gt;</span></li>
<li><span class="title-ref">&lt;uchar.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;wchar.h&gt;</span></li>
<li><span class="title-ref">&lt;wctype.h&gt;</span></li>
</ul>
<p>If the specified standard is older than C++11 the check will only replace headers deprecated before C++11, otherwise -- every header that appeared in the previous list.</p>
<p>These headers don't have effect in C++:</p>
<ul>
<li><span class="title-ref">&lt;iso646.h&gt;</span></li>
<li><span class="title-ref">&lt;stdalign.h&gt;</span></li>
<li><span class="title-ref">&lt;stdbool.h&gt;</span></li>
</ul>
<p>The checker ignores <span class="title-ref">include</span> directives within <span class="title-ref">extern "C" { ... }</span> blocks, since a library might want to expose some API for C and C++ libraries.</p>
<pre class="c++"><code>// C++ source file...
extern &quot;C&quot; {
#include &lt;assert.h&gt;  // Left intact.
#include &lt;stdbool.h&gt; // Left intact.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckHeaderFile</p>
<p><span class="title-ref">clang-tidy</span> cannot know if the header file included by the currently analyzed C++ source file is not included by any other C source files. Hence, to omit false-positives and wrong fixit-hints, we ignore emitting reports into header files. One can set this option to <span class="title-ref">true</span> if they know that the header files in the project are only used by C++ source file. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/deprecated-headers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>modernize-deprecated-ios-base-aliases</key>
    <name>modernize-deprecated-ios-base-aliases</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-deprecated-ios-base-aliases</p>
</div>
<h1 id="modernize-deprecated-ios-base-aliases">modernize-deprecated-ios-base-aliases</h1>
<p>Detects usage of the deprecated member types of <code>std::ios_base</code> and replaces those that have a non-deprecated equivalent.</p>
<table>
<thead>
<tr class="header">
<th>Deprecated member type</th>
<th>Replacement</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>std::ios_base::io_state</code></td>
<td><code>std::ios_base::iostate</code></td>
</tr>
<tr class="even">
<td><code>std::ios_base::open_mode</code></td>
<td><code>std::ios_base::openmode</code></td>
</tr>
<tr class="odd">
<td><p><code>std::ios_base::seek_dir</code> <code>std::ios_base::streamoff</code> <code>std::ios_base::streampos</code></p></td>
<td><p><code>std::ios_base::seekdir</code></p></td>
</tr>
</tbody>
</table>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/deprecated-ios-base-aliases.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-loop-convert</key>
    <name>modernize-loop-convert</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-loop-convert</p>
</div>
<h1 id="modernize-loop-convert">modernize-loop-convert</h1>
<p>This check converts <code>for(...; ...; ...)</code> loops to use the new range-based loops in C++11.</p>
<p>Three kinds of loops can be converted:</p>
<ul>
<li>Loops over statically allocated arrays.</li>
<li>Loops over containers, using iterators.</li>
<li>Loops over array-like containers, using <code>operator[]</code> and <code>at()</code>.</li>
</ul>
<h2 id="minconfidence-option">MinConfidence option</h2>
<h3 id="risky">risky</h3>
<p>In loops where the container expression is more complex than just a reference to a declared expression (a variable, function, enum, etc.), and some part of it appears elsewhere in the loop, we lower our confidence in the transformation due to the increased risk of changing semantics. Transformations for these loops are marked as <span class="title-ref">risky</span>, and thus will only be converted if the minimum required confidence level is set to <span class="title-ref">risky</span>.</p>
<pre class="c++"><code>int arr[10][20];
int l = 5;

for (int j = 0; j &lt; 20; ++j)
  int k = arr[l][j] + l; // using l outside arr[l] is considered risky

for (int i = 0; i &lt; obj.getVector().size(); ++i)
  obj.foo(10); // using &#39;obj&#39; is considered risky</code></pre>
<p>See <code class="interpreted-text" role="ref">Range-based loops evaluate end() only once&lt;IncorrectRiskyTransformation&gt;</code> for an example of an incorrect transformation when the minimum required confidence level is set to <span class="title-ref">risky</span>.</p>
<h3 id="reasonable-default">reasonable (Default)</h3>
<p>If a loop calls <code>.end()</code> or <code>.size()</code> after each iteration, the transformation for that loop is marked as <span class="title-ref">reasonable</span>, and thus will be converted if the required confidence level is set to <span class="title-ref">reasonable</span> (default) or lower.</p>
<pre class="c++"><code>// using size() is considered reasonable
for (int i = 0; i &lt; container.size(); ++i)
  cout &lt;&lt; container[i];</code></pre>
<h3 id="safe">safe</h3>
<p>Any other loops that do not match the above criteria to be marked as <span class="title-ref">risky</span> or <span class="title-ref">reasonable</span> are marked <span class="title-ref">safe</span>, and thus will be converted if the required confidence level is set to <span class="title-ref">safe</span> or lower.</p>
<pre class="c++"><code>int arr[] = {1,2,3};

for (int i = 0; i &lt; 3; ++i)
  cout &lt;&lt; arr[i];</code></pre>
<h2 id="example">Example</h2>
<p>Original:</p>
<pre class="c++"><code>const int N = 5;
int arr[] = {1,2,3,4,5};
vector&lt;int&gt; v;
v.push_back(1);
v.push_back(2);
v.push_back(3);

// safe conversion
for (int i = 0; i &lt; N; ++i)
  cout &lt;&lt; arr[i];

// reasonable conversion
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it)
  cout &lt;&lt; *it;

// reasonable conversion
for (vector&lt;int&gt;::iterator it = begin(v); it != end(v); ++it)
  cout &lt;&lt; *it;

// reasonable conversion
for (vector&lt;int&gt;::iterator it = std::begin(v); it != std::end(v); ++it)
  cout &lt;&lt; *it;

// reasonable conversion
for (int i = 0; i &lt; v.size(); ++i)
  cout &lt;&lt; v[i];

// reasonable conversion
for (int i = 0; i &lt; size(v); ++i)
  cout &lt;&lt; v[i];</code></pre>
<p>After applying the check with minimum confidence level set to <span class="title-ref">reasonable</span> (default):</p>
<pre class="c++"><code>const int N = 5;
int arr[] = {1,2,3,4,5};
vector&lt;int&gt; v;
v.push_back(1);
v.push_back(2);
v.push_back(3);

// safe conversion
for (auto &amp; elem : arr)
  cout &lt;&lt; elem;

// reasonable conversion
for (auto &amp; elem : v)
  cout &lt;&lt; elem;

// reasonable conversion
for (auto &amp; elem : v)
  cout &lt;&lt; elem;</code></pre>
<h2 id="reverse-iterator-support">Reverse Iterator Support</h2>
<p>The converter is also capable of transforming iterator loops which use <code>rbegin</code> and <code>rend</code> for looping backwards over a container. Out of the box this will automatically happen in C++20 mode using the <code>ranges</code> library, however the check can be configured to work without C++20 by specifying a function to reverse a range and optionally the header file where that function lives.</p>
<div class="option">
<p>UseCxx20ReverseRanges</p>
<p>When set to true convert loops when in C++20 or later mode using <code>std::ranges::reverse_view</code>. Default value is <code>true</code>.</p>
</div>
<div class="option">
<p>MakeReverseRangeFunction</p>
<p>Specify the function used to reverse an iterator pair, the function should accept a class with <code>rbegin</code> and <code>rend</code> methods and return a class with <code>begin</code> and <code>end</code> methods that call the <code>rbegin</code> and <code>rend</code> methods respectively. Common examples are <code>ranges::reverse_view</code> and <code>llvm::reverse</code>. Default value is an empty string.</p>
</div>
<div class="option">
<p>MakeReverseRangeHeader</p>
<p>Specifies the header file where <code class="interpreted-text" role="option">MakeReverseRangeFunction</code> is declared. For the previous examples this option would be set to <code>range/v3/view/reverse.hpp</code> and <code>llvm/ADT/STLExtras.h</code> respectively. If this is an empty string and <code class="interpreted-text" role="option">MakeReverseRangeFunction</code> is set, the check will proceed on the assumption that the function is already available in the translation unit. This can be wrapped in angle brackets to signify to add the include as a system include. Default value is an empty string.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2 id="limitations">Limitations</h2>
<p>There are certain situations where the tool may erroneously perform transformations that remove information and change semantics. Users of the tool should be aware of the behavior and limitations of the check outlined by the cases below.</p>
<h3 id="comments-inside-loop-headers">Comments inside loop headers</h3>
<p>Comments inside the original loop header are ignored and deleted when transformed.</p>
<pre class="c++"><code>for (int i = 0; i &lt; N; /* This will be deleted */ ++i) { }</code></pre>
<h3 id="range-based-loops-evaluate-end-only-once">Range-based loops evaluate end() only once</h3>
<p>The C++11 range-based for loop calls <code>.end()</code> only once during the initialization of the loop. If in the original loop <code>.end()</code> is called after each iteration the semantics of the transformed loop may differ.</p>
<pre class="c++"><code>// The following is semantically equivalent to the C++11 range-based for loop,
// therefore the semantics of the header will not change.
for (iterator it = container.begin(), e = container.end(); it != e; ++it) { }

// Instead of calling .end() after each iteration, this loop will be
// transformed to call .end() only once during the initialization of the loop,
// which may affect semantics.
for (iterator it = container.begin(); it != container.end(); ++it) { }</code></pre>
<div id="IncorrectRiskyTransformation">
<p>As explained above, calling member functions of the container in the body of the loop is considered <span class="title-ref">risky</span>. If the called member function modifies the container the semantics of the converted loop will differ due to <code>.end()</code> being called only once.</p>
</div>
<pre class="c++"><code>bool flag = false;
for (vector&lt;T&gt;::iterator it = vec.begin(); it != vec.end(); ++it) {
  // Add a copy of the first element to the end of the vector.
  if (!flag) {
    // This line makes this transformation &#39;risky&#39;.
    vec.push_back(*it);
    flag = true;
  }
  cout &lt;&lt; *it;
}</code></pre>
<p>The original code above prints out the contents of the container including the newly added element while the converted loop, shown below, will only print the original contents and not the newly added element.</p>
<pre class="c++"><code>bool flag = false;
for (auto &amp; elem : vec) {
  // Add a copy of the first element to the end of the vector.
  if (!flag) {
    // This line makes this transformation &#39;risky&#39;
    vec.push_back(elem);
    flag = true;
  }
  cout &lt;&lt; elem;
}</code></pre>
<p>Semantics will also be affected if <code>.end()</code> has side effects. For example, in the case where calls to <code>.end()</code> are logged the semantics will change in the transformed loop if <code>.end()</code> was originally called after each iteration.</p>
<pre class="c++"><code>iterator end() {
  num_of_end_calls++;
  return container.end();
}</code></pre>
<h3 id="overloaded-operator--with-side-effects">Overloaded operator-&gt;() with side effects</h3>
<p>Similarly, if <code>operator-&gt;()</code> was overloaded to have side effects, such as logging, the semantics will change. If the iterator's <code>operator-&gt;()</code> was used in the original loop it will be replaced with <code>&lt;container element&gt;.&lt;member&gt;</code> instead due to the implicit dereference as part of the range-based for loop. Therefore any side effect of the overloaded <code>operator-&gt;()</code> will no longer be performed.</p>
<pre class="c++"><code>for (iterator it = c.begin(); it != c.end(); ++it) {
  it-&gt;func(); // Using operator-&gt;()
}
// Will be transformed to:
for (auto &amp; elem : c) {
  elem.func(); // No longer using operator-&gt;()
}</code></pre>
<h3 id="pointers-and-references-to-containers">Pointers and references to containers</h3>
<p>While most of the check's risk analysis is dedicated to determining whether the iterator or container was modified within the loop, it is possible to circumvent the analysis by accessing and modifying the container through a pointer or reference.</p>
<p>If the container were directly used instead of using the pointer or reference the following transformation would have only been applied at the <span class="title-ref">risky</span> level since calling a member function of the container is considered <span class="title-ref">risky</span>. The check cannot identify expressions associated with the container that are different than the one used in the loop header, therefore the transformation below ends up being performed at the <span class="title-ref">safe</span> level.</p>
<pre class="c++"><code>vector&lt;int&gt; vec;

vector&lt;int&gt; *ptr = &amp;vec;
vector&lt;int&gt; &amp;ref = vec;

for (vector&lt;int&gt;::iterator it = vec.begin(), e = vec.end(); it != e; ++it) {
  if (!flag) {
    // Accessing and modifying the container is considered risky, but the risk
    // level is not raised here.
    ptr-&gt;push_back(*it);
    ref.push_back(*it);
    flag = true;
  }
}</code></pre>
<h3 id="openmp">OpenMP</h3>
<p>As range-based for loops are only available since OpenMP 5, this check should not be used on code with a compatibility requirement of OpenMP prior to version 5. It is <strong>intentional</strong> that this check does not make any attempts to exclude incorrect diagnostics on OpenMP for loops prior to OpenMP 5.</p>
<p>To prevent this check to be applied (and to break) OpenMP for loops but still be applied to non-OpenMP for loops the usage of <code>NOLINT</code> (see <code class="interpreted-text" role="ref">clang-tidy-nolint</code>) on the specific for loops is recommended.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/loop-convert.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>modernize-macro-to-enum</key>
    <name>modernize-macro-to-enum</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-macro-to-enum</p>
</div>
<h1 id="modernize-macro-to-enum">modernize-macro-to-enum</h1>
<p>Replaces groups of adjacent macros with an unscoped anonymous enum. Using an unscoped anonymous enum ensures that everywhere the macro token was used previously, the enumerator name may be safely used.</p>
<p>This check can be used to enforce the C++ core guideline <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#enum1-prefer-enumerations-over-macros">Enum.1: Prefer enumerations over macros</a>, within the constraints outlined below.</p>
<p>Potential macros for replacement must meet the following constraints:</p>
<ul>
<li>Macros must expand only to integral literal tokens or expressions of literal tokens. The expression may contain any of the unary operators <code>-</code>, <code>+</code>, <code>~</code> or <code>!</code>, any of the binary operators <code>,</code>, <code>-</code>, <code>+</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code> or <code>&lt;=&gt;</code>, the ternary operator <code>?:</code> and its <a href="https://gcc.gnu.org/onlinedocs/gcc/Conditionals.html">GNU extension</a>. Parenthesized expressions are also recognized. This recognizes most valid expressions. In particular, expressions with the <code>sizeof</code> operator are not recognized.</li>
<li>Macros must be defined on sequential source file lines, or with only comment lines in between macro definitions.</li>
<li>Macros must all be defined in the same source file.</li>
<li>Macros must not be defined within a conditional compilation block. (Conditional include guards are exempt from this constraint.)</li>
<li>Macros must not be defined adjacent to other preprocessor directives.</li>
<li>Macros must not be used in any conditional preprocessing directive.</li>
<li>Macros must not be used as arguments to other macros.</li>
<li>Macros must not be undefined.</li>
<li>Macros must be defined at the top-level, not inside any declaration or definition.</li>
</ul>
<p>Each cluster of macros meeting the above constraints is presumed to be a set of values suitable for replacement by an anonymous enum. From there, a developer can give the anonymous enum a name and continue refactoring to a scoped enum if desired. Comments on the same line as a macro definition or between subsequent macro definitions are preserved in the output. No formatting is assumed in the provided replacements, although clang-tidy can optionally format all fixes.</p>
<div class="warning">
<div class="title">
<p>Warning</p>
</div>
<p>Initializing expressions are assumed to be valid initializers for an enum. C requires that enum values fit into an <code>int</code>, but this may not be the case for some accepted constant expressions. For instance <code>1 &lt;&lt; 40</code> will not fit into an <code>int</code> when the size of an <code>int</code> is 32 bits.</p>
</div>
<p>Examples:</p>
<pre class="c++"><code>#define RED   0xFF0000
#define GREEN 0x00FF00
#define BLUE  0x0000FF

#define TM_NONE (-1) // No method selected.
#define TM_ONE 1    // Use tailored method one.
#define TM_TWO 2    // Use tailored method two.  Method two
                    // is preferable to method one.
#define TM_THREE 3  // Use tailored method three.</code></pre>
<p>becomes</p>
<pre class="c++"><code>enum {
RED = 0xFF0000,
GREEN = 0x00FF00,
BLUE = 0x0000FF
};

enum {
TM_NONE = (-1), // No method selected.
TM_ONE = 1,    // Use tailored method one.
TM_TWO = 2,    // Use tailored method two.  Method two
                    // is preferable to method one.
TM_THREE = 3  // Use tailored method three.
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/macro-to-enum.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-make-shared</key>
    <name>modernize-make-shared</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-make-shared</p>
</div>
<h1 id="modernize-make-shared">modernize-make-shared</h1>
<p>This check finds the creation of <code>std::shared_ptr</code> objects by explicitly calling the constructor and a <code>new</code> expression, and replaces it with a call to <code>std::make_shared</code>.</p>
<pre class="c++"><code>auto my_ptr = std::shared_ptr&lt;MyPair&gt;(new MyPair(1, 2));

// becomes

auto my_ptr = std::make_shared&lt;MyPair&gt;(1, 2);</code></pre>
<p>This check also finds calls to <code>std::shared_ptr::reset()</code> with a <code>new</code> expression, and replaces it with a call to <code>std::make_shared</code>.</p>
<pre class="c++"><code>my_ptr.reset(new MyPair(1, 2));

// becomes

my_ptr = std::make_shared&lt;MyPair&gt;(1, 2);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>MakeSmartPtrFunction</p>
<p>A string specifying the name of make-shared-ptr function. Default is <span class="title-ref">std::make_shared</span>.</p>
</div>
<div class="option">
<p>MakeSmartPtrFunctionHeader</p>
<p>A string specifying the corresponding header of make-shared-ptr function. Default is <span class="title-ref">memory</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreDefaultInitialization</p>
<p>If set to non-zero, the check does not suggest edits that will transform default initialization into value initialization, as this can cause performance regressions. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/make-shared.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-make-unique</key>
    <name>modernize-make-unique</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-make-unique</p>
</div>
<h1 id="modernize-make-unique">modernize-make-unique</h1>
<p>This check finds the creation of <code>std::unique_ptr</code> objects by explicitly calling the constructor and a <code>new</code> expression, and replaces it with a call to <code>std::make_unique</code>, introduced in C++14.</p>
<pre class="c++"><code>auto my_ptr = std::unique_ptr&lt;MyPair&gt;(new MyPair(1, 2));

// becomes

auto my_ptr = std::make_unique&lt;MyPair&gt;(1, 2);</code></pre>
<p>This check also finds calls to <code>std::unique_ptr::reset()</code> with a <code>new</code> expression, and replaces it with a call to <code>std::make_unique</code>.</p>
<pre class="c++"><code>my_ptr.reset(new MyPair(1, 2));

// becomes

my_ptr = std::make_unique&lt;MyPair&gt;(1, 2);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>MakeSmartPtrFunction</p>
<p>A string specifying the name of make-unique-ptr function. Default is <span class="title-ref">std::make_unique</span>.</p>
</div>
<div class="option">
<p>MakeSmartPtrFunctionHeader</p>
<p>A string specifying the corresponding header of make-unique-ptr function. Default is <span class="title-ref">&lt;memory&gt;</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreDefaultInitialization</p>
<p>If set to non-zero, the check does not suggest edits that will transform default initialization into value initialization, as this can cause performance regressions. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/make-unique.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-pass-by-value</key>
    <name>modernize-pass-by-value</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-pass-by-value</p>
</div>
<h1 id="modernize-pass-by-value">modernize-pass-by-value</h1>
<p>With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy. This check allows the compiler to take care of choosing the best way to construct the copy.</p>
<p>The transformation is usually beneficial when the calling code passes an <em>rvalue</em> and assumes the move construction is a cheap operation. This short example illustrates how the construction of the value happens:</p>
<pre class="c++"><code>void foo(std::string s);
std::string get_str();

void f(const std::string &amp;str) {
  foo(str);       // lvalue  -&gt; copy construction
  foo(get_str()); // prvalue -&gt; move construction
}</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Currently, only constructors are transformed to make use of pass-by-value. Contributions that handle other situations are welcome!</p>
</div>
<h2 id="pass-by-value-in-constructors">Pass-by-value in constructors</h2>
<p>Replaces the uses of const-references constructor parameters that are copied into class fields. The parameter is then moved with <span class="title-ref">std::move()</span>.</p>
<p>Since <code>std::move()</code> is a library function declared in <span class="title-ref">&lt;utility&gt;</span> it may be necessary to add this include. The check will add the include directive when necessary.</p>
<pre class="c++"><code>#include &lt;string&gt;

class Foo {
public:
-  Foo(const std::string &amp;Copied, const std::string &amp;ReadOnly)
-    : Copied(Copied), ReadOnly(ReadOnly)
+  Foo(std::string Copied, const std::string &amp;ReadOnly)
+    : Copied(std::move(Copied)), ReadOnly(ReadOnly)
  {}

private:
  std::string Copied;
  const std::string &amp;ReadOnly;
};

std::string get_cwd();

void f(const std::string &amp;Path) {
  // The parameter corresponding to &#39;get_cwd()&#39; is move-constructed. By
  // using pass-by-value in the Foo constructor we managed to avoid a
  // copy-construction.
  Foo foo(get_cwd(), Path);
}</code></pre>
<p>If the parameter is used more than once no transformation is performed since moved objects have an undefined state. It means the following code will be left untouched:</p>
<pre class="c++"><code>#include &lt;string&gt;

void pass(const std::string &amp;S);

struct Foo {
  Foo(const std::string &amp;S) : Str(S) {
    pass(S);
  }

  std::string Str;
};</code></pre>
<h3 id="known-limitations">Known limitations</h3>
<p>A situation where the generated code can be wrong is when the object referenced is modified before the assignment in the init-list through a "hidden" reference.</p>
<p>Example:</p>
<pre class="c++"><code>std::string s(&quot;foo&quot;);

struct Base {
  Base() {
    s = &quot;bar&quot;;
  }
};

struct Derived : Base {
-  Derived(const std::string &amp;S) : Field(S)
+  Derived(std::string S) : Field(std::move(S))
  { }

  std::string Field;
};

void f() {
-  Derived d(s); // d.Field holds &quot;bar&quot;
+  Derived d(s); // d.Field holds &quot;foo&quot;
}</code></pre>
<h3 id="note-about-delayed-template-parsing">Note about delayed template parsing</h3>
<p>When delayed template parsing is enabled, constructors part of templated contexts; templated constructors, constructors in class templates, constructors of inner classes of template classes, etc., are not transformed. Delayed template parsing is enabled by default on Windows as a Microsoft extension: <a href="https://clang.llvm.org/docs/UsersManual.html#microsoft-extensions">Clang Compiler User's Manual - Microsoft extensions</a>.</p>
<p>Delayed template parsing can be enabled using the <span class="title-ref">-fdelayed-template-parsing</span> flag and disabled using <span class="title-ref">-fno-delayed-template-parsing</span>.</p>
<p>Example:</p>
<pre class="c++"><code>template &lt;typename T&gt; class C {
  std::string S;

public:
=  // using -fdelayed-template-parsing (default on Windows)
=  C(const std::string &amp;S) : S(S) {}

+  // using -fno-delayed-template-parsing (default on non-Windows systems)
+  C(std::string S) : S(std::move(S)) {}
};</code></pre>
<div class="seealso">
<p>For more information about the pass-by-value idiom, read: <a href="">Want Speed? Pass by Value</a>.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>ValuesOnly</p>
<p>When <span class="title-ref">true</span>, the check only warns about copied parameters that are already passed by value. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/pass-by-value.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-raw-string-literal</key>
    <name>modernize-raw-string-literal</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-raw-string-literal</p>
</div>
<h1 id="modernize-raw-string-literal">modernize-raw-string-literal</h1>
<p>This check selectively replaces string literals containing escaped characters with raw string literals.</p>
<p>Example:</p>
<pre class="c++"><code>const char *const Quotes{&quot;embedded \&quot;quotes\&quot;&quot;};
const char *const Paragraph{&quot;Line one.\nLine two.\nLine three.\n&quot;};
const char *const SingleLine{&quot;Single line.\n&quot;};
const char *const TrailingSpace{&quot;Look here -&gt; \n&quot;};
const char *const Tab{&quot;One\tTwo\n&quot;};
const char *const Bell{&quot;Hello!\a  And welcome!&quot;};
const char *const Path{&quot;C:\\Program Files\\Vendor\\Application.exe&quot;};
const char *const RegEx{&quot;\\w\\([a-z]\\)&quot;};</code></pre>
<p>becomes</p>
<pre class="c++"><code>const char *const Quotes{R&quot;(embedded &quot;quotes&quot;)&quot;};
const char *const Paragraph{&quot;Line one.\nLine two.\nLine three.\n&quot;};
const char *const SingleLine{&quot;Single line.\n&quot;};
const char *const TrailingSpace{&quot;Look here -&gt; \n&quot;};
const char *const Tab{&quot;One\tTwo\n&quot;};
const char *const Bell{&quot;Hello!\a  And welcome!&quot;};
const char *const Path{R&quot;(C:\Program Files\Vendor\Application.exe)&quot;};
const char *const RegEx{R&quot;(\w\([a-z]\))&quot;};</code></pre>
<p>The presence of any of the following escapes can cause the string to be converted to a raw string literal: <code>\\</code>, <code>\'</code>, <code>\"</code>, <code>\?</code>, and octal or hexadecimal escapes for printable ASCII characters.</p>
<p>A string literal containing only escaped newlines is a common way of writing lines of text output. Introducing physical newlines with raw string literals in this case is likely to impede readability. These string literals are left unchanged.</p>
<p>An escaped horizontal tab, form feed, or vertical tab prevents the string literal from being converted. The presence of a horizontal tab, form feed or vertical tab in source code is not visually obvious.</p>
<div class="option">
<p>DelimiterStem</p>
<p>Custom delimiter to escape characters in raw string literals. It is used in the following construction: <code>R"stem_delimiter(contents)stem_delimiter"</code>. The default value is <span class="title-ref">lit</span>.</p>
</div>
<div class="option">
<p>ReplaceShorterLiterals</p>
<p>Controls replacing shorter non-raw string literals with longer raw string literals. Setting this option to <span class="title-ref">true</span> enables the replacement. The default value is <span class="title-ref">false</span> (shorter literals are not replaced).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/raw-string-literal.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-redundant-void-arg</key>
    <name>modernize-redundant-void-arg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-redundant-void-arg</p>
</div>
<h1 id="modernize-redundant-void-arg">modernize-redundant-void-arg</h1>
<p>Find and remove redundant <code>void</code> argument lists.</p>
<dl>
<dt>Examples:</dt>
<dd><table>
<thead>
<tr class="header">
<th>Initial code</th>
<th>Code with applied fixes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>int f(void);</code></td>
<td><code>int f();</code></td>
</tr>
<tr class="even">
<td><code>int (*f(void))(void);</code></td>
<td><code>int (*f())();</code></td>
</tr>
<tr class="odd">
<td><code>typedef int (*f_t(void))(void);</code></td>
<td><code>typedef int (*f_t())();</code></td>
</tr>
<tr class="even">
<td><code>void (C::*p)(void);</code></td>
<td><code>void (C::*p)();</code></td>
</tr>
<tr class="odd">
<td><code>C::C(void) {}</code></td>
<td><code>C::C() {}</code></td>
</tr>
<tr class="even">
<td><code>C::~C(void) {}</code></td>
<td><code>C::~C() {}</code></td>
</tr>
</tbody>
</table>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/redundant-void-arg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>modernize-replace-auto-ptr</key>
    <name>modernize-replace-auto-ptr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-replace-auto-ptr</p>
</div>
<h1 id="modernize-replace-auto-ptr">modernize-replace-auto-ptr</h1>
<p>This check replaces the uses of the deprecated class <code>std::auto_ptr</code> by <code>std::unique_ptr</code> (introduced in C++11). The transfer of ownership, done by the copy-constructor and the assignment operator, is changed to match <code>std::unique_ptr</code> usage by using explicit calls to <code>std::move()</code>.</p>
<p>Migration example:</p>
<pre class="c++"><code>-void take_ownership_fn(std::auto_ptr&lt;int&gt; int_ptr);
+void take_ownership_fn(std::unique_ptr&lt;int&gt; int_ptr);

 void f(int x) {
-  std::auto_ptr&lt;int&gt; a(new int(x));
-  std::auto_ptr&lt;int&gt; b;
+  std::unique_ptr&lt;int&gt; a(new int(x));
+  std::unique_ptr&lt;int&gt; b;

-  b = a;
-  take_ownership_fn(b);
+  b = std::move(a);
+  take_ownership_fn(std::move(b));
 }</code></pre>
<p>Since <code>std::move()</code> is a library function declared in <code>&lt;utility&gt;</code> it may be necessary to add this include. The check will add the include directive when necessary.</p>
<h2 id="known-limitations">Known Limitations</h2>
<ul>
<li>If headers modification is not activated or if a header is not allowed to be changed this check will produce broken code (compilation error), where the headers' code will stay unchanged while the code using them will be changed.</li>
<li>Client code that declares a reference to an <code>std::auto_ptr</code> coming from code that can't be migrated (such as a header coming from a 3<sup>rd</sup> party library) will produce a compilation error after migration. This is because the type of the reference will be changed to <code>std::unique_ptr</code> but the type returned by the library won't change, binding a reference to <code>std::unique_ptr</code> from an <code>std::auto_ptr</code>. This pattern doesn't make much sense and usually <code>std::auto_ptr</code> are stored by value (otherwise what is the point in using them instead of a reference or a pointer?).</li>
</ul>
<pre class="c++"><code>// &lt;3rd-party header...&gt;
std::auto_ptr&lt;int&gt; get_value();
const std::auto_ptr&lt;int&gt; &amp; get_ref();

// &lt;calling code (with migration)...&gt;
-std::auto_ptr&lt;int&gt; a(get_value());
+std::unique_ptr&lt;int&gt; a(get_value()); // ok, unique_ptr constructed from auto_ptr

-const std::auto_ptr&lt;int&gt; &amp; p = get_ptr();
+const std::unique_ptr&lt;int&gt; &amp; p = get_ptr(); // won&#39;t compile</code></pre>
<ul>
<li>Non-instantiated templates aren't modified.</li>
</ul>
<pre class="c++"><code>template &lt;typename X&gt;
void f() {
    std::auto_ptr&lt;X&gt; p;
}

// only &#39;f&lt;int&gt;()&#39; (or similar) will trigger the replacement.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/replace-auto-ptr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-replace-disallow-copy-and-assign-macro</key>
    <name>modernize-replace-disallow-copy-and-assign-macro</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-replace-disallow-copy-and-assign-macro</p>
</div>
<h1 id="modernize-replace-disallow-copy-and-assign-macro">modernize-replace-disallow-copy-and-assign-macro</h1>
<p>Finds macro expansions of <code>DISALLOW_COPY_AND_ASSIGN(Type)</code> and replaces them with a deleted copy constructor and a deleted assignment operator.</p>
<p>Before the <code>delete</code> keyword was introduced in C++11 it was common practice to declare a copy constructor and an assignment operator as private members. This effectively makes them unusable to the public API of a class.</p>
<p>With the advent of the <code>delete</code> keyword in C++11 we can abandon the <code>private</code> access of the copy constructor and the assignment operator and delete the methods entirely.</p>
<p>When running this check on a code like this:</p>
<pre class="c++"><code>class Foo {
private:
  DISALLOW_COPY_AND_ASSIGN(Foo);
};</code></pre>
<p>It will be transformed to this:</p>
<pre class="c++"><code>class Foo {
private:
  Foo(const Foo &amp;) = delete;
  const Foo &amp;operator=(const Foo &amp;) = delete;
};</code></pre>
<h2 id="known-limitations">Known Limitations</h2>
<ul>
<li>Notice that the migration example above leaves the <code>private</code> access specification untouched. You might want to run the check <code class="interpreted-text" role="doc">modernize-use-equals-delete
&lt;../modernize/use-equals-delete&gt;</code> to get warnings for deleted functions in private sections.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>MacroName</p>
<p>A string specifying the macro name whose expansion will be replaced. Default is <span class="title-ref">DISALLOW_COPY_AND_ASSIGN</span>.</p>
</div>
<p>See: <a href="https://en.cppreference.com/w/cpp/language/function#Deleted_functions">https://en.cppreference.com/w/cpp/language/function#Deleted_functions</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/replace-disallow-copy-and-assign-macro.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-replace-random-shuffle</key>
    <name>modernize-replace-random-shuffle</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-replace-random-shuffle</p>
</div>
<h1 id="modernize-replace-random-shuffle">modernize-replace-random-shuffle</h1>
<p>This check will find occurrences of <code>std::random_shuffle</code> and replace it with <code>std::shuffle</code>. In C++17 <code>std::random_shuffle</code> will no longer be available and thus we need to replace it.</p>
<p>Below are two examples of what kind of occurrences will be found and two examples of what it will be replaced with.</p>
<pre class="c++"><code>std::vector&lt;int&gt; v;

// First example
std::random_shuffle(vec.begin(), vec.end());

// Second example
std::random_shuffle(vec.begin(), vec.end(), randomFunc);</code></pre>
<p>Both of these examples will be replaced with:</p>
<pre class="c++"><code>std::shuffle(vec.begin(), vec.end(), std::mt19937(std::random_device()()));</code></pre>
<p>The second example will also receive a warning that <code>randomFunc</code> is no longer supported in the same way as before so if the user wants the same functionality, the user will need to change the implementation of the <code>randomFunc</code>.</p>
<p>One thing to be aware of here is that <code>std::random_device</code> is quite expensive to initialize. So if you are using the code in a performance critical place, you probably want to initialize it elsewhere. Another thing is that the seeding quality of the suggested fix is quite poor: <code>std::mt19937</code> has an internal state of 624 32-bit integers, but is only seeded with a single integer. So if you require higher quality randomness, you should consider seeding better, for example:</p>
<pre class="c++"><code>std::shuffle(v.begin(), v.end(), []() {
  std::mt19937::result_type seeds[std::mt19937::state_size];
  std::random_device device;
  std::uniform_int_distribution&lt;typename std::mt19937::result_type&gt; dist;
  std::generate(std::begin(seeds), std::end(seeds), [&amp;] { return dist(device); });
  std::seed_seq seq(std::begin(seeds), std::end(seeds));
  return std::mt19937(seq);
}());</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/replace-random-shuffle.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-return-braced-init-list</key>
    <name>modernize-return-braced-init-list</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-return-braced-init-list</p>
</div>
<h1 id="modernize-return-braced-init-list">modernize-return-braced-init-list</h1>
<p>Replaces explicit calls to the constructor in a return with a braced initializer list. This way the return type is not needlessly duplicated in the function definition and the return statement.</p>
<pre class="c++"><code>Foo bar() {
  Baz baz;
  return Foo(baz);
}

// transforms to:

Foo bar() {
  Baz baz;
  return {baz};
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/return-braced-init-list.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-shrink-to-fit</key>
    <name>modernize-shrink-to-fit</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-shrink-to-fit</p>
</div>
<h1 id="modernize-shrink-to-fit">modernize-shrink-to-fit</h1>
<p>Replace copy and swap tricks on shrinkable containers with the <code>shrink_to_fit()</code> method call.</p>
<p>The <code>shrink_to_fit()</code> method is more readable and more effective than the copy and swap trick to reduce the capacity of a shrinkable container. Note that, the <code>shrink_to_fit()</code> method is only available in C++11 and up.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/shrink-to-fit.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-type-traits</key>
    <name>modernize-type-traits</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-type-traits</p>
</div>
<h1 id="modernize-type-traits">modernize-type-traits</h1>
<p>Converts standard library type traits of the form <code>traits&lt;...&gt;::type</code> and <code>traits&lt;...&gt;::value</code> into <code>traits_t&lt;...&gt;</code> and <code>traits_v&lt;...&gt;</code> respectively.</p>
<p>For example:</p>
<pre class="c++"><code>std::is_integral&lt;T&gt;::value
std::is_same&lt;int, float&gt;::value
typename std::add_const&lt;T&gt;::type
std::make_signed&lt;unsigned&gt;::type</code></pre>
<p>Would be converted into:</p>
<pre class="c++"><code>std::is_integral_v&lt;T&gt;
std::is_same_v&lt;int, float&gt;
std::add_const_t&lt;T&gt;
std::make_signed_t&lt;unsigned&gt;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If <span class="title-ref">true</span> don't diagnose traits defined in macros.</p>
<p>Note: Fixes will never be emitted for code inside of macros.</p>
<pre class="c++"><code>#define IS_SIGNED(T) std::is_signed&lt;T&gt;::value</code></pre>
<p>Defaults to <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/type-traits.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-unary-static-assert</key>
    <name>modernize-unary-static-assert</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-unary-static-assert</p>
</div>
<h1 id="modernize-unary-static-assert">modernize-unary-static-assert</h1>
<p>The check diagnoses any <code>static_assert</code> declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument <code>static_assert</code> declaration.</p>
<p>The check is only applicable for C++17 and later code.</p>
<p>The following code:</p>
<pre class="c++"><code>void f_textless(int a) {
  static_assert(sizeof(a) &lt;= 10, &quot;&quot;);
}</code></pre>
<p>is replaced by:</p>
<pre class="c++"><code>void f_textless(int a) {
  static_assert(sizeof(a) &lt;= 10);
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/unary-static-assert.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-auto</key>
    <name>modernize-use-auto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-auto</p>
</div>
<h1 id="modernize-use-auto">modernize-use-auto</h1>
<p>This check is responsible for using the <code>auto</code> type specifier for variable declarations to <em>improve code readability and maintainability</em>. For example:</p>
<pre class="c++"><code>std::vector&lt;int&gt;::iterator I = my_container.begin();

// transforms to:

auto I = my_container.begin();</code></pre>
<p>The <code>auto</code> type specifier will only be introduced in situations where the variable type matches the type of the initializer expression. In other words <code>auto</code> should deduce the same type that was originally spelled in the source. However, not every situation should be transformed:</p>
<pre class="c++"><code>int val = 42;
InfoStruct &amp;I = SomeObject.getInfo();

// Should not become:

auto val = 42;
auto &amp;I = SomeObject.getInfo();</code></pre>
<p>In this example using <code>auto</code> for builtins doesn't improve readability. In other situations it makes the code less self-documenting impairing readability and maintainability. As a result, <code>auto</code> is used only introduced in specific situations described below.</p>
<h2 id="iterators">Iterators</h2>
<p>Iterator type specifiers tend to be long and used frequently, especially in loop constructs. Since the functions generating iterators have a common format, the type specifier can be replaced without obscuring the meaning of code while improving readability and maintainability.</p>
<pre class="c++"><code>for (std::vector&lt;int&gt;::iterator I = my_container.begin(),
                                E = my_container.end();
     I != E; ++I) {
}

// becomes

for (auto I = my_container.begin(), E = my_container.end(); I != E; ++I) {
}</code></pre>
<p>The check will only replace iterator type-specifiers when all of the following conditions are satisfied:</p>
<ul>
<li>The iterator is for one of the standard containers in <code>std</code> namespace:
<ul>
<li><code>array</code></li>
<li><code>deque</code></li>
<li><code>forward_list</code></li>
<li><code>list</code></li>
<li><code>vector</code></li>
<li><code>map</code></li>
<li><code>multimap</code></li>
<li><code>set</code></li>
<li><code>multiset</code></li>
<li><code>unordered_map</code></li>
<li><code>unordered_multimap</code></li>
<li><code>unordered_set</code></li>
<li><code>unordered_multiset</code></li>
<li><code>queue</code></li>
<li><code>priority_queue</code></li>
<li><code>stack</code></li>
</ul></li>
<li>The iterator is one of the possible iterator types for standard containers:
<ul>
<li><code>iterator</code></li>
<li><code>reverse_iterator</code></li>
<li><code>const_iterator</code></li>
<li><code>const_reverse_iterator</code></li>
</ul></li>
<li>In addition to using iterator types directly, typedefs or other ways of referring to those types are also allowed. However, implementation-specific types for which a type like <code>std::vector&lt;int&gt;::iterator</code> is itself a typedef will not be transformed. Consider the following examples:</li>
</ul>
<pre class="c++"><code>// The following direct uses of iterator types will be transformed.
std::vector&lt;int&gt;::iterator I = MyVec.begin();
{
  using namespace std;
  list&lt;int&gt;::iterator I = MyList.begin();
}

// The type specifier for J would transform to auto since it&#39;s a typedef
// to a standard iterator type.
typedef std::map&lt;int, std::string&gt;::const_iterator map_iterator;
map_iterator J = MyMap.begin();

// The following implementation-specific iterator type for which
// std::vector&lt;int&gt;::iterator could be a typedef would not be transformed.
__gnu_cxx::__normal_iterator&lt;int*, std::vector&gt; K = MyVec.begin();</code></pre>
<ul>
<li>The initializer for the variable being declared is not a braced initializer list. Otherwise, use of <code>auto</code> would cause the type of the variable to be deduced as <code>std::initializer_list</code>.</li>
</ul>
<h2 id="new-expressions">New expressions</h2>
<p>Frequently, when a pointer is declared and initialized with <code>new</code>, the pointee type is written twice: in the declaration type and in the <code>new</code> expression. In this case, the declaration type can be replaced with <code>auto</code> improving readability and maintainability.</p>
<pre class="c++"><code>TypeName *my_pointer = new TypeName(my_param);

// becomes

auto *my_pointer = new TypeName(my_param);</code></pre>
<p>The check will also replace the declaration type in multiple declarations, if the following conditions are satisfied:</p>
<ul>
<li>All declared variables have the same type (i.e. all of them are pointers to the same type).</li>
<li>All declared variables are initialized with a <code>new</code> expression.</li>
<li>The types of all the new expressions are the same than the pointee of the declaration type.</li>
</ul>
<pre class="c++"><code>TypeName *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// becomes

auto *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;</code></pre>
<h2 id="cast-expressions">Cast expressions</h2>
<p>Frequently, when a variable is declared and initialized with a cast, the variable type is written twice: in the declaration type and in the cast expression. In this case, the declaration type can be replaced with <code>auto</code> improving readability and maintainability.</p>
<pre class="c++"><code>TypeName *my_pointer = static_cast&lt;TypeName&gt;(my_param);

// becomes

auto *my_pointer = static_cast&lt;TypeName&gt;(my_param);</code></pre>
<p>The check handles <code>static_cast</code>, <code>dynamic_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>, functional casts, C-style casts and function templates that behave as casts, such as <code>llvm::dyn_cast</code>, <code>boost::lexical_cast</code> and <code>gsl::narrow_cast</code>. Calls to function templates are considered to behave as casts if the first template argument is explicit and is a type, and the function returns that type, or a pointer or reference to it.</p>
<h2 id="known-limitations">Known Limitations</h2>
<ul>
<li>If the initializer is an explicit conversion constructor, the check will not replace the type specifier even though it would be safe to do so.</li>
<li>User-defined iterators are not handled at this time.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>MinTypeNameLength</p>
<p>If the option is set to non-zero (default <span class="title-ref">5</span>), the check will ignore type names having a length less than the option value. The option affects expressions only, not iterators. Spaces between multi-lexeme type names (<code>long int</code>) are considered as one. If the <code class="interpreted-text" role="option">RemoveStars</code> option (see below) is set to <span class="title-ref">true</span>, then <code>*s</code> in the type are also counted as a part of the type name.</p>
</div>
<pre class="c++"><code>// MinTypeNameLength = 0, RemoveStars=0

int a = static_cast&lt;int&gt;(foo());            // ---&gt; auto a = ...
// length(bool *) = 4
bool *b = new bool;                         // ---&gt; auto *b = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());  // ---&gt; auto c = ...

// MinTypeNameLength = 5, RemoveStars=0

int a = static_cast&lt;int&gt;(foo());                 // ---&gt; int  a = ...
bool b = static_cast&lt;bool&gt;(foo());               // ---&gt; bool b = ...
bool *pb = static_cast&lt;bool*&gt;(foo());            // ---&gt; bool *pb = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());       // ---&gt; auto c = ...
// length(long &lt;on-or-more-spaces&gt; int) = 8
long int d = static_cast&lt;long int&gt;(foo());       // ---&gt; auto d = ...

// MinTypeNameLength = 5, RemoveStars=1

int a = static_cast&lt;int&gt;(foo());                 // ---&gt; int  a = ...
// length(int * * ) = 5
int **pa = static_cast&lt;int**&gt;(foo());            // ---&gt; auto pa = ...
bool b = static_cast&lt;bool&gt;(foo());               // ---&gt; bool b = ...
bool *pb = static_cast&lt;bool*&gt;(foo());            // ---&gt; auto pb = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());       // ---&gt; auto c = ...
long int d = static_cast&lt;long int&gt;(foo());       // ---&gt; auto d = ...</code></pre>
<div class="option">
<p>RemoveStars</p>
<p>If the option is set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), the check will remove stars from the non-typedef pointer types when replacing type names with <code>auto</code>. Otherwise, the check will leave stars. For example:</p>
</div>
<pre class="c++"><code>TypeName *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// RemoveStars = 0

auto *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// RemoveStars = 1

auto my_first_pointer = new TypeName, my_second_pointer = new TypeName;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-auto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-bool-literals</key>
    <name>modernize-use-bool-literals</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-bool-literals</p>
</div>
<h1 id="modernize-use-bool-literals">modernize-use-bool-literals</h1>
<p>Finds integer literals which are cast to <code>bool</code>.</p>
<pre class="c++"><code>bool p = 1;
bool f = static_cast&lt;bool&gt;(1);
std::ios_base::sync_with_stdio(0);
bool x = p ? 1 : 0;

// transforms to

bool p = true;
bool f = true;
std::ios_base::sync_with_stdio(false);
bool x = p ? true : false;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-bool-literals.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>modernize-use-constraints</key>
    <name>modernize-use-constraints</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-constraints</p>
</div>
<h1 id="modernize-use-constraints">modernize-use-constraints</h1>
<p>Replace <code>std::enable_if</code> with C++20 requires clauses.</p>
<p><code>std::enable_if</code> is a SFINAE mechanism for selecting the desired function or class template based on type traits or other requirements. <code>enable_if</code> changes the meta-arity of the template, and has other <a href="https://open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0225r0.html">adverse side effects</a> in the code. C++20 introduces concepts and constraints as a cleaner language provided solution to achieve the same outcome.</p>
<p>This check finds some common <code>std::enable_if</code> patterns that can be replaced by C++20 requires clauses. The tool can replace some of these patterns automatically, otherwise, the tool will emit a diagnostic without a replacement. The tool can detect the following <code>std::enable_if</code> patterns</p>
<ol type="1">
<li><code>std::enable_if</code> in the return type of a function</li>
<li><code>std::enable_if</code> as the trailing template parameter for function templates</li>
</ol>
<p>Other uses, for example, in class templates for function parameters, are not currently supported by this tool. Other variants such as <code>boost::enable_if</code> are not currently supported by this tool.</p>
<p>Below are some examples of code using <code>std::enable_if</code>.</p>
<pre class="c++"><code>// enable_if in function return type
template &lt;typename T&gt;
std::enable_if_t&lt;T::some_trait, int&gt; only_if_t_has_the_trait() { ... }

// enable_if in the trailing template parameter
template &lt;typename T, std::enable_if_t&lt;T::some_trait, int&gt; = 0&gt;
void another_version() { ... }

template &lt;typename T&gt;
typename std::enable_if&lt;T::some_value, Obj&gt;::type existing_constraint() requires (T::another_value) {
  return Obj{};
}

template &lt;typename T, std::enable_if_t&lt;T::some_trait, int&gt; = 0&gt;
struct my_class {};</code></pre>
<p>The tool will replace the above code with,</p>
<pre class="c++"><code>// warning: use C++20 requires constraints instead of enable_if [modernize-use-constraints]
template &lt;typename T&gt;
int only_if_t_has_the_trait() requires T::some_trait { ... }

// warning: use C++20 requires constraints instead of enable_if [modernize-use-constraints]
template &lt;typename T&gt;
void another_version() requires T::some_trait { ... }

// The tool will emit a diagnostic for the following, but will
// not attempt to replace the code.
// warning: use C++20 requires constraints instead of enable_if [modernize-use-constraints]
template &lt;typename T&gt;
typename std::enable_if&lt;T::some_value, Obj&gt;::type existing_constraint() requires (T::another_value) {
  return Obj{};
}

// The tool will not emit a diagnostic or attempt to replace the code.
template &lt;typename T, std::enable_if_t&lt;T::some_trait, int&gt; = 0&gt;
struct my_class {};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-constraints.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-default-member-init</key>
    <name>modernize-use-default-member-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-default-member-init</p>
</div>
<h1 id="modernize-use-default-member-init">modernize-use-default-member-init</h1>
<p>This check converts constructors' member initializers into the new default member initializers in C++11. Other member initializers that match the default member initializer are removed. This can reduce repeated code or allow use of '= default'.</p>
<pre class="c++"><code>struct A {
  A() : i(5), j(10.0) {}
  A(int i) : i(i), j(10.0) {}
  int i;
  double j;
};

// becomes

struct A {
  A() {}
  A(int i) : i(i) {}
  int i{5};
  double j{10.0};
};</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Only converts member initializers for built-in types, enums, and pointers. The <span class="title-ref">readability-redundant-member-init</span> check will remove redundant member initializers for classes.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>UseAssignment</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), the check will initialize members with an assignment. For example:</p>
</div>
<pre class="c++"><code>struct A {
  A() {}
  A(int i) : i(i) {}
  int i = 5;
  double j = 10.0;
};</code></pre>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">true</span>), the check will not warn about members declared inside macros.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-default-member-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-default</key>
    <name>modernize-use-default</name>
    <description>
      <![CDATA[<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - modernize-use-default</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../modernize/use-equals-default.html">

</div>
<h1 id="modernize-use-default">modernize-use-default</h1>
<p>This check has been renamed to <code class="interpreted-text" role="doc">modernize-use-equals-default &lt;../modernize/use-equals-default&gt;</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-default.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-emplace</key>
    <name>modernize-use-emplace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-emplace</p>
</div>
<h1 id="modernize-use-emplace">modernize-use-emplace</h1>
<p>The check flags insertions to an STL-style container done by calling the <code>push_back</code>, <code>push</code>, or <code>push_front</code> methods with an explicitly-constructed temporary of the container element type. In this case, the corresponding <code>emplace</code> equivalent methods result in less verbose and potentially more efficient code. Right now the check doesn't support <code>insert</code>. It also doesn't support <code>insert</code> functions for associative containers because replacing <code>insert</code> with <code>emplace</code> may result in <a href="https://htmlpreview.github.io/?https://github.com/HowardHinnant/papers/blob/master/insert_vs_emplace.html">speed regression</a>, but it might get support with some addition flag in the future.</p>
<p>The <code class="interpreted-text" role="option">ContainersWithPushBack</code>, <code class="interpreted-text" role="option">ContainersWithPush</code>, and <code class="interpreted-text" role="option">ContainersWithPushFront</code> options are used to specify the container types that support the <code>push_back</code>, <code>push</code>, and <code>push_front</code> operations respectively. The default values for these options are as follows:</p>
<ul>
<li><code class="interpreted-text" role="option">ContainersWithPushBack</code>: <code>std::vector</code>, <code>std::deque</code>, and <code>std::list</code>.</li>
<li><code class="interpreted-text" role="option">ContainersWithPush</code>: <code>std::stack</code>, <code>std::queue</code>, and <code>std::priority_queue</code>.</li>
<li><code class="interpreted-text" role="option">ContainersWithPushFront</code>: <code>std::forward_list</code>, <code>std::list</code>, and <code>std::deque</code>.</li>
</ul>
<p>This check also reports when an <code>emplace</code>-like method is improperly used, for example using <code>emplace_back</code> while also calling a constructor. This creates a temporary that requires at best a move and at worst a copy. Almost all <code>emplace</code>-like functions in the STL are covered by this, with <code>try_emplace</code> on <code>std::map</code> and <code>std::unordered_map</code> being the exception as it behaves slightly differently than all the others. More containers can be added with the <code class="interpreted-text" role="option">EmplacyFunctions</code> option, so long as the container defines a <code>value_type</code> type, and the <code>emplace</code>-like functions construct a <code>value_type</code> object.</p>
<p>Before:</p>
<pre class="c++"><code>std::vector&lt;MyClass&gt; v;
v.push_back(MyClass(21, 37));
v.emplace_back(MyClass(21, 37));

std::vector&lt;std::pair&lt;int, int&gt;&gt; w;

w.push_back(std::pair&lt;int, int&gt;(21, 37));
w.push_back(std::make_pair(21L, 37L));
w.emplace_back(std::make_pair(21L, 37L));</code></pre>
<p>After:</p>
<pre class="c++"><code>std::vector&lt;MyClass&gt; v;
v.emplace_back(21, 37);
v.emplace_back(21, 37);

std::vector&lt;std::pair&lt;int, int&gt;&gt; w;
w.emplace_back(21, 37);
w.emplace_back(21L, 37L);
w.emplace_back(21L, 37L);</code></pre>
<p>By default, the check is able to remove unnecessary <code>std::make_pair</code> and <code>std::make_tuple</code> calls from <code>push_back</code> calls on containers of <code>std::pair</code> and <code>std::tuple</code>. Custom tuple-like types can be modified by the <code class="interpreted-text" role="option">TupleTypes</code> option; custom make functions can be modified by the <code class="interpreted-text" role="option">TupleMakeFunctions</code> option.</p>
<p>The other situation is when we pass arguments that will be converted to a type inside a container.</p>
<p>Before:</p>
<pre class="c++"><code>std::vector&lt;boost::optional&lt;std::string&gt; &gt; v;
v.push_back(&quot;abc&quot;);</code></pre>
<p>After:</p>
<pre class="c++"><code>std::vector&lt;boost::optional&lt;std::string&gt; &gt; v;
v.emplace_back(&quot;abc&quot;);</code></pre>
<p>In some cases the transformation would be valid, but the code wouldn't be exception safe. In this case the calls of <code>push_back</code> won't be replaced.</p>
<pre class="c++"><code>std::vector&lt;std::unique_ptr&lt;int&gt;&gt; v;
v.push_back(std::unique_ptr&lt;int&gt;(new int(0)));
auto *ptr = new int(1);
v.push_back(std::unique_ptr&lt;int&gt;(ptr));</code></pre>
<p>This is because replacing it with <code>emplace_back</code> could cause a leak of this pointer if <code>emplace_back</code> would throw exception before emplacement (e.g. not enough memory to add a new element).</p>
<p>For more info read item 42 - "Consider emplacement instead of insertion." of Scott Meyers "Effective Modern C++".</p>
<p>The default smart pointers that are considered are <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::auto_ptr</code>. To specify other smart pointers or other classes use the <code class="interpreted-text" role="option">SmartPointers</code> option.</p>
<p>Check also doesn't fire if any argument of the constructor call would be:</p>
<blockquote>
<ul>
<li>a bit-field (bit-fields can't bind to rvalue/universal reference)</li>
<li>a <code>new</code> expression (to avoid leak)</li>
<li>if the argument would be converted via derived-to-base cast.</li>
</ul>
</blockquote>
<p>This check requires C++11 or higher to run.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>ContainersWithPushBack</p>
<p>Semicolon-separated list of class names of custom containers that support <code>push_back</code>.</p>
</div>
<div class="option">
<p>ContainersWithPush</p>
<p>Semicolon-separated list of class names of custom containers that support <code>push</code>.</p>
</div>
<div class="option">
<p>ContainersWithPushFront</p>
<p>Semicolon-separated list of class names of custom containers that support <code>push_front</code>.</p>
</div>
<div class="option">
<p>IgnoreImplicitConstructors</p>
<p>When <span class="title-ref">true</span>, the check will ignore implicitly constructed arguments of <code>push_back</code>, e.g.</p>
<pre class="c++"><code>std::vector&lt;std::string&gt; v;
v.push_back(&quot;a&quot;); // Ignored when IgnoreImplicitConstructors is `true`.</code></pre>
<p>Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>SmartPointers</p>
<p>Semicolon-separated list of class names of custom smart pointers.</p>
</div>
<div class="option">
<p>TupleTypes</p>
<p>Semicolon-separated list of <code>std::tuple</code>-like class names.</p>
</div>
<div class="option">
<p>TupleMakeFunctions</p>
<p>Semicolon-separated list of <code>std::make_tuple</code>-like function names. Those function calls will be removed from <code>push_back</code> calls and turned into <code>emplace_back</code>.</p>
</div>
<div class="option">
<p>EmplacyFunctions</p>
<p>Semicolon-separated list of containers without their template parameters and some <code>emplace</code>-like method of the container. Example: <code>vector::emplace_back</code>. Those methods will be checked for improper use and the check will report when a temporary is unnecessarily created.</p>
</div>
<h3 id="example">Example</h3>
<pre class="c++"><code>std::vector&lt;MyTuple&lt;int, bool, char&gt;&gt; x;
x.push_back(MakeMyTuple(1, false, &#39;x&#39;));
x.emplace_back(MakeMyTuple(1, false, &#39;x&#39;));</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>std::vector&lt;MyTuple&lt;int, bool, char&gt;&gt; x;
x.emplace_back(1, false, &#39;x&#39;);
x.emplace_back(1, false, &#39;x&#39;);</code></pre>
<p>when <code class="interpreted-text" role="option">TupleTypes</code> is set to <code>MyTuple</code>, <code class="interpreted-text" role="option">TupleMakeFunctions</code> is set to <code>MakeMyTuple</code>, and <code class="interpreted-text" role="option">EmplacyFunctions</code> is set to <code>vector::emplace_back</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-emplace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-equals-default</key>
    <name>modernize-use-equals-default</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-equals-default</p>
</div>
<h1 id="modernize-use-equals-default">modernize-use-equals-default</h1>
<p>This check replaces default bodies of special member functions with <code>= default;</code>. The explicitly defaulted function declarations enable more opportunities in optimization, because the compiler might treat explicitly defaulted functions as trivial.</p>
<pre class="c++"><code>struct A {
  A() {}
  ~A();
};
A::~A() {}

// becomes

struct A {
  A() = default;
  ~A();
};
A::~A() = default;</code></pre>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Move-constructor and move-assignment operator are not supported yet.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros and will ignore special members with bodies contain macros or preprocessor directives. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-equals-default.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-equals-delete</key>
    <name>modernize-use-equals-delete</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-equals-delete</p>
</div>
<h1 id="modernize-use-equals-delete">modernize-use-equals-delete</h1>
<p>Identifies unimplemented private special member functions, and recommends using <code>= delete</code> for them. Additionally, it recommends relocating any deleted member function from the <code>private</code> to the <code>public</code> section.</p>
<p>Before the introduction of C++11, the primary method to effectively "erase" a particular function involved declaring it as <code>private</code> without providing a definition. This approach would result in either a compiler error (when attempting to call a private function) or a linker error (due to an undefined reference).</p>
<p>However, subsequent to the advent of C++11, a more conventional approach emerged for achieving this purpose. It involves flagging functions as <code>= delete</code> and keeping them in the <code>public</code> section of the class.</p>
<p>To prevent false positives, this check is only active within a translation unit where all other member functions have been implemented. The check will generate partial fixes by introducing <code>= delete</code>, but the user is responsible for manually relocating functions to the <code>public</code> section.</p>
<pre class="c++"><code>// Example: bad
class A {
 private:
  A(const A&amp;);
  A&amp; operator=(const A&amp;);
};

// Example: good
class A {
 public:
  A(const A&amp;) = delete;
  A&amp; operator=(const A&amp;) = delete;
};</code></pre>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">true</span>), the check will not warn about functions declared inside macros.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-equals-delete.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-nodiscard</key>
    <name>modernize-use-nodiscard</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-nodiscard</p>
</div>
<h1 id="modernize-use-nodiscard">modernize-use-nodiscard</h1>
<p>Adds <code>[[nodiscard]]</code> attributes (introduced in C++17) to member functions in order to highlight at compile time which return values should not be ignored.</p>
<p>Member functions need to satisfy the following conditions to be considered by this check:</p>
<blockquote>
<ul>
<li>no <code>[[nodiscard]]</code>, <code>[[noreturn]]</code>, <code>__attribute__((warn_unused_result))</code>, <code>[[clang::warn_unused_result]]</code> nor <code>[[gcc::warn_unused_result]]</code> attribute,</li>
<li>non-void return type,</li>
<li>non-template return types,</li>
<li>const member function,</li>
<li>non-variadic functions,</li>
<li>no non-const reference parameters,</li>
<li>no pointer parameters,</li>
<li>no template parameters,</li>
<li>no template function parameters,</li>
<li>not be a member of a class with mutable member variables,</li>
<li>no Lambdas,</li>
<li>no conversion functions.</li>
</ul>
</blockquote>
<p>Such functions have no means of altering any state or passing values other than via the return type. Unless the member functions are altering state via some external call (e.g. I/O).</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>bool empty() const;
bool empty(int i) const;</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>[[nodiscard]] bool empty() const;
[[nodiscard]] bool empty(int i) const;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ReplacementString</p>
<p>Specifies a macro to use instead of <code>[[nodiscard]]</code>. This is useful when maintaining source code that needs to compile with a pre-C++17 compiler.</p>
</div>
<h3 id="example-1">Example</h3>
<pre class="c++"><code>bool empty() const;
bool empty(int i) const;</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>NO_DISCARD bool empty() const;
NO_DISCARD bool empty(int i) const;</code></pre>
<p>if the <code class="interpreted-text" role="option">ReplacementString</code> option is set to <span class="title-ref">NO_DISCARD</span>.</p>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>If the <code class="interpreted-text" role="option">ReplacementString</code> is not a C++ attribute, but instead a macro, then that macro must be defined in scope or the fix-it will not be applied.</p>
</div>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>For alternative <code>__attribute__</code> syntax options to mark functions as <code>[[nodiscard]]</code> in non-c++17 source code. See <a href="https://clang.llvm.org/docs/AttributeReference.html#nodiscard-warn-unused-result">https://clang.llvm.org/docs/AttributeReference.html#nodiscard-warn-unused-result</a></p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-nodiscard.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-noexcept</key>
    <name>modernize-use-noexcept</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-noexcept</p>
</div>
<h1 id="modernize-use-noexcept">modernize-use-noexcept</h1>
<p>This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11). By default this check will replace <code>throw()</code> with <code>noexcept</code>, and <code>throw(&lt;exception&gt;[,...])</code> or <code>throw(...)</code> with <code>noexcept(false)</code>.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>void foo() throw();
void bar() throw(int) {}</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>void foo() noexcept;
void bar() noexcept(false) {}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ReplacementString</p>
<p>Users can use <code class="interpreted-text" role="option">ReplacementString</code> to specify a macro to use instead of <code>noexcept</code>. This is useful when maintaining source code that uses custom exception specification marking other than <code>noexcept</code>. Fix-it hints will only be generated for non-throwing specifications.</p>
</div>
<h3 id="example-1">Example</h3>
<pre class="c++"><code>void bar() throw(int);
void foo() throw();</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>void bar() throw(int);  // No fix-it generated.
void foo() NOEXCEPT;</code></pre>
<p>if the <code class="interpreted-text" role="option">ReplacementString</code> option is set to <span class="title-ref">NOEXCEPT</span>.</p>
<div class="option">
<p>UseNoexceptFalse</p>
</div>
<p>Enabled by default, disabling will generate fix-it hints that remove throwing dynamic exception specs, e.g., <code>throw(&lt;something&gt;)</code>, completely without providing a replacement text, except for destructors and delete operators that are <code>noexcept(true)</code> by default.</p>
<h3 id="example-2">Example</h3>
<pre class="c++"><code>void foo() throw(int) {}

struct bar {
  void foobar() throw(int);
  void operator delete(void *ptr) throw(int);
  void operator delete[](void *ptr) throw(int);
  ~bar() throw(int);
}</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>void foo() {}

struct bar {
  void foobar();
  void operator delete(void *ptr) noexcept(false);
  void operator delete[](void *ptr) noexcept(false);
  ~bar() noexcept(false);
}</code></pre>
<p>if the <code class="interpreted-text" role="option">UseNoexceptFalse</code> option is set to <span class="title-ref">false</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-noexcept.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-nullptr</key>
    <name>modernize-use-nullptr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-nullptr</p>
</div>
<h1 id="modernize-use-nullptr">modernize-use-nullptr</h1>
<p>The check converts the usage of null pointer constants (e.g. <code>NULL</code>, <code>0</code>) to use the new C++11 <code>nullptr</code> keyword.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>void assignment() {
  char *a = NULL;
  char *b = 0;
  char c = 0;
}

int *ret_ptr() {
  return 0;
}</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>void assignment() {
  char *a = nullptr;
  char *b = nullptr;
  char c = 0;
}

int *ret_ptr() {
  return nullptr;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredTypes</p>
<p>Semicolon-separated list of regular expressions to match pointer types for which implicit casts will be ignored. Default value: <span class="title-ref">std::_CmpUnspecifiedParam::;^std::__cmp_cat::__unspec</span>.</p>
</div>
<div class="option">
<p>NullMacros</p>
<p>Comma-separated list of macro names that will be transformed along with <code>NULL</code>. By default this check will only replace the <code>NULL</code> macro and will skip any similar user-defined macros.</p>
</div>
<h3 id="example-1">Example</h3>
<pre class="c++"><code>#define MY_NULL (void*)0
void assignment() {
  void *p = MY_NULL;
}</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>#define MY_NULL NULL
void assignment() {
  int *p = nullptr;
}</code></pre>
<p>if the <code class="interpreted-text" role="option">NullMacros</code> option is set to <code>MY_NULL</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-nullptr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>modernize-use-override</key>
    <name>modernize-use-override</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-override</p>
</div>
<h1 id="modernize-use-override">modernize-use-override</h1>
<p>Adds <code>override</code> (introduced in C++11) to overridden virtual functions and removes <code>virtual</code> from those functions as it is not required.</p>
<p><code>virtual</code> on non base class implementations was used to help indicate to the user that a function was virtual. C++ compilers did not use the presence of this to signify an overridden function.</p>
<p>In C++ 11 <code>override</code> and <code>final</code> keywords were introduced to allow overridden functions to be marked appropriately. Their presence allows compilers to verify that an overridden function correctly overrides a base class implementation.</p>
<p>This can be useful as compilers can generate a compile time error when:</p>
<blockquote>
<ul>
<li>The base class implementation function signature changes.</li>
<li>The user has not created the override with the correct signature.</li>
</ul>
</blockquote>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreDestructors</p>
<p>If set to <span class="title-ref">true</span>, this check will not diagnose destructors. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoreTemplateInstantiations</p>
<p>If set to <span class="title-ref">true</span>, instructs this check to ignore virtual function overrides that are part of template instantiations. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>AllowOverrideAndFinal</p>
<p>If set to <span class="title-ref">true</span>, this check will not diagnose <code>override</code> as redundant with <code>final</code>. This is useful when code will be compiled by a compiler with warning/error checking flags requiring <code>override</code> explicitly on overridden members, such as <code>gcc -Wsuggest-override</code>/<code>gcc -Werror=suggest-override</code>. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>OverrideSpelling</p>
<p>Specifies a macro to use instead of <code>override</code>. This is useful when maintaining source code that also needs to compile with a pre-C++11 compiler.</p>
</div>
<div class="option">
<p>FinalSpelling</p>
<p>Specifies a macro to use instead of <code>final</code>. This is useful when maintaining source code that also needs to compile with a pre-C++11 compiler.</p>
</div>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>For more information on the use of <code>override</code> see <a href="https://en.cppreference.com/w/cpp/language/override">https://en.cppreference.com/w/cpp/language/override</a></p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-override.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-starts-ends-with</key>
    <name>modernize-use-starts-ends-with</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-starts-ends-with</p>
</div>
<h1 id="modernize-use-starts-ends-with">modernize-use-starts-ends-with</h1>
<p>Checks whether a <code>find</code> or <code>rfind</code> result is compared with 0 and suggests replacing with <code>starts_with</code> when the method exists in the class. Notably, this will work with <code>std::string</code> and <code>std::string_view</code>.</p>
<pre class="c++"><code>std::string s = &quot;...&quot;;
if (s.find(&quot;prefix&quot;) == 0) { /* do something */ }
if (s.rfind(&quot;prefix&quot;, 0) == 0) { /* do something */ }</code></pre>
<p>becomes</p>
<pre class="c++"><code>std::string s = &quot;...&quot;;
if (s.starts_with(&quot;prefix&quot;)) { /* do something */ }
if (s.starts_with(&quot;prefix&quot;)) { /* do something */ }</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-starts-ends-with.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-std-numbers</key>
    <name>modernize-use-std-numbers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-std-numbers</p>
</div>
<h1 id="modernize-use-std-numbers">modernize-use-std-numbers</h1>
<p>Finds constants and function calls to math functions that can be replaced with C++20's mathematical constants from the <code>numbers</code> header and offers fix-it hints. Does not match the use of variables with that value, and instead, offers a replacement for the definition of those variables. Function calls that match the pattern of how the constant is calculated are matched and replaced with the <code>std::numbers</code> constant. The use of macros gets replaced with the corresponding <code>std::numbers</code> constant, instead of changing the macro definition.</p>
<p>The following list of constants from the <code>numbers</code> header are supported:</p>
<ul>
<li><code>e</code></li>
<li><code>log2e</code></li>
<li><code>log10e</code></li>
<li><code>pi</code></li>
<li><code>inv_pi</code></li>
<li><code>inv_sqrtpi</code></li>
<li><code>ln2</code></li>
<li><code>ln10</code></li>
<li><code>sqrt2</code></li>
<li><code>sqrt3</code></li>
<li><code>inv_sqrt3</code></li>
<li><code>egamma</code></li>
<li><code>phi</code></li>
</ul>
<p>The list currently includes all constants as of C++20.</p>
<p>The replacements use the type of the matched constant and can remove explicit casts, i.e., switching between <code>std::numbers::e</code>, <code>std::numbers::e_v&lt;float&gt;</code> and <code>std::numbers::e_v&lt;long double&gt;</code> where appropriate.</p>
<pre class="c++"><code>double sqrt(double);
double log2(double);
void sink(auto&amp;&amp;) {}
void floatSink(float);

#define MY_PI 3.1415926

void foo() {
    const double Pi = 3.141592653589;           // const double Pi = std::numbers::pi
    const auto Use = Pi / 2;                    // no match for Pi
    static constexpr double Euler = 2.7182818;  // static constexpr double Euler = std::numbers::e;

    log2(exp(1));                               // std::numbers::log2e;
    log2(Euler);                                // std::numbers::log2e;
    1 / sqrt(MY_PI);                            // std::numbers::inv_sqrtpi;
    sink(MY_PI);                                // sink(std::numbers::pi);
    floatSink(MY_PI);                           // floatSink(std::numbers::pi);
    floatSink(static_cast&lt;float&gt;(MY_PI));       // floatSink(std::numbers::pi_v&lt;float&gt;);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>DiffThreshold</p>
<p>A floating point value that sets the detection threshold for when literals match a constant. A literal matches a constant if <code>abs(literal - constant) &lt; DiffThreshold</code> evaluates to <code>true</code>. Default is <span class="title-ref">0.001</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-std-numbers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-std-print</key>
    <name>modernize-use-std-print</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-std-print</p>
</div>
<h1 id="modernize-use-std-print">modernize-use-std-print</h1>
<p>Converts calls to <code>printf</code>, <code>fprintf</code>, <code>absl::PrintF</code> and <code>absl::FPrintf</code> to equivalent calls to C++23's <code>std::print</code> or <code>std::println</code> as appropriate, modifying the format string appropriately. The replaced and replacement functions can be customised by configuration options. Each argument that is the result of a call to <code>std::string::c_str()</code> and <code>std::string::data()</code> will have that now-unnecessary call removed in a similar manner to the <span class="title-ref">readability-redundant-string-cstr</span> check.</p>
<p>In other words, it turns lines like:</p>
<pre class="c++"><code>fprintf(stderr, &quot;The %s is %3d\n&quot;, description.c_str(), value);</code></pre>
<p>into:</p>
<pre class="c++"><code>std::println(stderr, &quot;The {} is {:3}&quot;, description, value);</code></pre>
<p>If the <span class="title-ref">ReplacementPrintFunction</span> or <span class="title-ref">ReplacementPrintlnFunction</span> options are left, or assigned to their default values then this check is only enabled with <span class="title-ref">-std=c++23</span> or later.</p>
<p>The check doesn't do a bad job, but it's not perfect. In particular:</p>
<ul>
<li>It assumes that the format string is correct for the arguments. If you get any warnings when compiling with <span class="title-ref">-Wformat</span> then misbehaviour is possible.</li>
<li>At the point that the check runs, the AST contains a single <code>StringLiteral</code> for the format string and any macro expansion, token pasting, adjacent string literal concatenation and escaping has been handled. Although it's possible for the check to automatically put the escapes back, they may not be exactly as they were written (e.g. <code>"\x0a"</code> will become <code>"\n"</code> and <code>"ab" "cd"</code> will become <code>"abcd"</code>.) This is helpful since it means that the <code>PRIx</code> macros from <code>&lt;inttypes.h&gt;</code> are removed correctly.</li>
<li>It supports field widths, precision, positional arguments, leading zeros, leading <code>+</code>, alignment and alternative forms.</li>
<li>Use of any unsupported flags or specifiers will cause the entire statement to be left alone and a warning to be emitted. Particular unsupported features are:
<ul>
<li>The <code>%'</code> flag for thousands separators.</li>
<li>The glibc extension <code>%m</code>.</li>
</ul></li>
<li><code>printf</code> and similar functions return the number of characters printed. <code>std::print</code> does not. This means that any invocations that use the return value will not be converted. Unfortunately this currently includes explicitly-casting to <code>void</code>. Deficiencies in this check mean that any invocations inside <code>GCC</code> compound statements cannot be converted even if the resulting value is not used.</li>
</ul>
<p>If conversion would be incomplete or unsafe then the entire invocation will be left unchanged.</p>
<p>If the call is deemed suitable for conversion then:</p>
<ul>
<li><code>printf</code>, <code>fprintf</code>, <code>absl::PrintF</code>, <code>absl::FPrintF</code> and any functions specified by the <span class="title-ref">PrintfLikeFunctions</span> option or <span class="title-ref">FprintfLikeFunctions</span> are replaced with the function specified by the <span class="title-ref">ReplacementPrintlnFunction</span> option if the format string ends with <code>\n</code> or <span class="title-ref">ReplacementPrintFunction</span> otherwise.</li>
<li>the format string is rewritten to use the <code>std::formatter</code> language. If a <code>\n</code> is found at the end of the format string not preceded by <code>r</code> then it is removed and <span class="title-ref">ReplacementPrintlnFunction</span> is used rather than <span class="title-ref">ReplacementPrintFunction</span>.</li>
<li>any arguments that corresponded to <code>%p</code> specifiers that <code>std::formatter</code> wouldn't accept are wrapped in a <code>static_cast</code> to <code>const void *</code>.</li>
<li>any arguments that corresponded to <code>%s</code> specifiers where the argument is of <code>signed char</code> or <code>unsigned char</code> type are wrapped in a <code>reinterpret_cast&lt;const char *&gt;</code>.</li>
<li>any arguments where the format string and the parameter differ in signedness will be wrapped in an appropriate <code>static_cast</code> if <span class="title-ref">StrictMode</span> is enabled.</li>
<li>any arguments that end in a call to <code>std::string::c_str()</code> or <code>std::string::data()</code> will have that call removed.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When <span class="title-ref">true</span>, the check will add casts when converting from variadic functions like <code>printf</code> and printing signed or unsigned integer types (including fixed-width integer types from <code>&lt;cstdint&gt;</code>, <code>ptrdiff_t</code>, <code>size_t</code> and <code>ssize_t</code>) as the opposite signedness to ensure that the output matches that of <code>printf</code>. This does not apply when converting from non-variadic functions such as <code>absl::PrintF</code> and <code>fmt::printf</code>. For example, with <span class="title-ref">StrictMode</span> enabled:</p>
<pre class="c++"><code>int i = -42;
unsigned int u = 0xffffffff;
printf(&quot;%d %u\n&quot;, i, u);</code></pre>
<p>would be converted to:</p>
<pre class="c++"><code>std::print(&quot;{} {}\n&quot;, static_cast&lt;unsigned int&gt;(i), static_cast&lt;int&gt;(u));</code></pre>
<p>to ensure that the output will continue to be the unsigned representation of <span class="title-ref">-42</span> and the signed representation of <span class="title-ref">0xffffffff</span> (often <span class="title-ref">4294967254</span> and <span class="title-ref">-1</span> respectively.) When <span class="title-ref">false</span> (which is the default), these casts will not be added which may cause a change in the output.</p>
</div>
<div class="option">
<p>PrintfLikeFunctions</p>
<p>A semicolon-separated list of (fully qualified) extra function names to replace, with the requirement that the first parameter contains the printf-style format string and the arguments to be formatted follow immediately afterwards. If neither this option nor <span class="title-ref">FprintfLikeFunctions</span> are set then the default value for this option is <span class="title-ref">printf; absl::PrintF</span>, otherwise it is empty.</p>
</div>
<div class="option">
<p>FprintfLikeFunctions</p>
<p>A semicolon-separated list of (fully qualified) extra function names to replace, with the requirement that the first parameter is retained, the second parameter contains the printf-style format string and the arguments to be formatted follow immediately afterwards. If neither this option nor <span class="title-ref">PrintfLikeFunctions</span> are set then the default value for this option is <span class="title-ref">fprintf; absl::FPrintF</span>, otherwise it is empty.</p>
</div>
<div class="option">
<p>ReplacementPrintFunction</p>
<p>The function that will be used to replace <code>printf</code>, <code>fprintf</code> etc. during conversion rather than the default <code>std::print</code> when the originalformat string does not end with <code>\n</code>. It is expected that the function provides an interface that is compatible with <code>std::print</code>. A suitable candidate would be <code>fmt::print</code>.</p>
</div>
<div class="option">
<p>ReplacementPrintlnFunction</p>
<p>The function that will be used to replace <code>printf</code>, <code>fprintf</code> etc. during conversion rather than the default <code>std::println</code> when the original format string ends with <code>\n</code>. It is expected that the function provides an interface that is compatible with <code>std::println</code>. A suitable candidate would be <code>fmt::println</code>.</p>
</div>
<div class="option">
<p>PrintHeader</p>
<p>The header that must be included for the declaration of <span class="title-ref">ReplacementPrintFunction</span> so that a <code>#include</code> directive can be added if required. If <span class="title-ref">ReplacementPrintFunction</span> is <code>std::print</code> then this option will default to <code>&lt;print&gt;</code>, otherwise this option will default to nothing and no <code>#include</code> directive will be added.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-std-print.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-trailing-return-type</key>
    <name>modernize-use-trailing-return-type</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-trailing-return-type</p>
</div>
<h1 id="modernize-use-trailing-return-type">modernize-use-trailing-return-type</h1>
<p>Rewrites function signatures to use a trailing return type (introduced in C++11). This transformation is purely stylistic. The return type before the function name is replaced by <code>auto</code> and inserted after the function parameter list (and qualifiers).</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>int f1();
inline int f2(int arg) noexcept;
virtual float f3() const &amp;&amp; = delete;</code></pre>
<p>transforms to:</p>
<pre class="c++"><code>auto f1() -&gt; int;
inline auto f2(int arg) -&gt; int noexcept;
virtual auto f3() const &amp;&amp; -&gt; float = delete;</code></pre>
<h2 id="known-limitations">Known Limitations</h2>
<p>The following categories of return types cannot be rewritten currently:</p>
<ul>
<li>function pointers</li>
<li>member function pointers</li>
<li>member pointers</li>
</ul>
<p>Unqualified names in the return type might erroneously refer to different entities after the rewrite. Preventing such errors requires a full lookup of all unqualified names present in the return type in the scope of the trailing return type location. This location includes e.g. function parameter names and members of the enclosing class (including all inherited classes). Such a lookup is currently not implemented.</p>
<p>Given the following piece of code</p>
<pre class="c++"><code>struct S { long long value; };
S f(unsigned S) { return {S * 2}; }
class CC {
  int S;
  struct S m();
};
S CC::m() { return {0}; }</code></pre>
<p>a careless rewrite would produce the following output:</p>
<pre class="c++"><code>struct S { long long value; };
auto f(unsigned S) -&gt; S { return {S * 2}; } // error
class CC {
  int S;
  auto m() -&gt; struct S;
};
auto CC::m() -&gt; S { return {0}; } // error</code></pre>
<p>This code fails to compile because the S in the context of f refers to the equally named function parameter. Similarly, the S in the context of m refers to the equally named class member. The check can currently only detect and avoid a clash with a function parameter name.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-trailing-return-type.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-transparent-functors</key>
    <name>modernize-use-transparent-functors</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-transparent-functors</p>
</div>
<h1 id="modernize-use-transparent-functors">modernize-use-transparent-functors</h1>
<p>Prefer transparent functors to non-transparent ones. When using transparent functors, the type does not need to be repeated. The code is easier to read, maintain and less prone to errors. It is not possible to introduce unwanted conversions.</p>
<pre class="c++"><code>// Non-transparent functor
std::map&lt;int, std::string, std::greater&lt;int&gt;&gt; s;

// Transparent functor.
std::map&lt;int, std::string, std::greater&lt;&gt;&gt; s;

// Non-transparent functor
using MyFunctor = std::less&lt;MyType&gt;;</code></pre>
<p>It is not always a safe transformation though. The following case will be untouched to preserve the semantics.</p>
<pre class="c++"><code>// Non-transparent functor
std::map&lt;const char *, std::string, std::greater&lt;std::string&gt;&gt; s;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>SafeMode</p>
<p>If the option is set to <span class="title-ref">true</span>, the check will not diagnose cases where using a transparent functor cannot be guaranteed to produce identical results as the original code. The default value for this option is <span class="title-ref">false</span>.</p>
</div>
<p>This check requires using C++14 or higher to run.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-transparent-functors.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-uncaught-exceptions</key>
    <name>modernize-use-uncaught-exceptions</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-uncaught-exceptions</p>
</div>
<h1 id="modernize-use-uncaught-exceptions">modernize-use-uncaught-exceptions</h1>
<p>This check will warn on calls to <code>std::uncaught_exception</code> and replace them with calls to <code>std::uncaught_exceptions</code>, since <code>std::uncaught_exception</code> was deprecated in C++17.</p>
<p>Below are a few examples of what kind of occurrences will be found and what they will be replaced with.</p>
<pre class="c++"><code>#define MACRO1 std::uncaught_exception
#define MACRO2 std::uncaught_exception

int uncaught_exception() {
  return 0;
}

int main() {
  int res;

  res = uncaught_exception();
  // No warning, since it is not the deprecated function from namespace std

  res = MACRO2();
  // Warning, but will not be replaced

  res = std::uncaught_exception();
  // Warning and replaced

  using std::uncaught_exception;
  // Warning and replaced

  res = uncaught_exception();
  // Warning and replaced
}</code></pre>
<p>After applying the fixes the code will look like the following:</p>
<pre class="c++"><code>#define MACRO1 std::uncaught_exception
#define MACRO2 std::uncaught_exception

int uncaught_exception() {
  return 0;
}

int main() {
  int res;

  res = uncaught_exception();

  res = MACRO2();

  res = std::uncaught_exceptions();

  using std::uncaught_exceptions;

  res = uncaught_exceptions();
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-uncaught-exceptions.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>modernize-use-using</key>
    <name>modernize-use-using</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - modernize-use-using</p>
</div>
<h1 id="modernize-use-using">modernize-use-using</h1>
<p>The check converts the usage of <code>typedef</code> with <code>using</code> keyword.</p>
<p>Before:</p>
<pre class="c++"><code>typedef int variable;

class Class{};
typedef void (Class::* MyPtrType)() const;

typedef struct { int a; } R_t, *R_p;</code></pre>
<p>After:</p>
<pre class="c++"><code>using variable = int;

class Class{};
using MyPtrType = void (Class::*)() const;

using R_t = struct { int a; };
using R_p = R_t*;</code></pre>
<p>The checker ignores <span class="title-ref">typedef</span> within <span class="title-ref">extern "C" { ... }</span> blocks.</p>
<pre class="c++"><code>extern &quot;C&quot; {
  typedef int InExternC; // Left intact.
}</code></pre>
<p>This check requires using C++11 or higher to run.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreExternC</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warning inside <span class="title-ref">extern "C"`scope. Default is `false</span></p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize/use-using.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>mpi-buffer-deref</key>
    <name>mpi-buffer-deref</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - mpi-buffer-deref</p>
</div>
<h1 id="mpi-buffer-deref">mpi-buffer-deref</h1>
<p>This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced. Buffers should be passed as a single pointer or array. As MPI function signatures specify <code>void *</code> for their buffer types, insufficiently dereferenced buffers can be passed, like for example as double pointers or multidimensional arrays, without a compiler warning emitted.</p>
<p>Examples:</p>
<pre class="c++"><code>// A double pointer is passed to the MPI function.
char *buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);

// A multidimensional array is passed to the MPI function.
short buf[1][1];
MPI_Send(buf, 1, MPI_SHORT, 0, 0, MPI_COMM_WORLD);

// A pointer to an array is passed to the MPI function.
short *buf[1];
MPI_Send(buf, 1, MPI_SHORT, 0, 0, MPI_COMM_WORLD);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/mpi/buffer-deref.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    </rule>
  <rule>
    <key>mpi-type-mismatch</key>
    <name>mpi-type-mismatch</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - mpi-type-mismatch</p>
</div>
<h1 id="mpi-type-mismatch">mpi-type-mismatch</h1>
<p>This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions. All MPI datatypes defined by the MPI standard (3.1) are verified by this check. User defined typedefs, custom MPI datatypes and null pointer constants are skipped, in the course of verification.</p>
<p>Example:</p>
<pre class="c++"><code>// In this case, the buffer type matches MPI datatype.
char buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);

// In the following case, the buffer type does not match MPI datatype.
int buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/mpi/type-mismatch.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>objc-assert-equals</key>
    <name>objc-assert-equals</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-assert-equals</p>
</div>
<h1 id="objc-assert-equals">objc-assert-equals</h1>
<p>Finds improper usages of <span class="title-ref">XCTAssertEqual</span> and <span class="title-ref">XCTAssertNotEqual</span> and replaces them with <span class="title-ref">XCTAssertEqualObjects</span> or <span class="title-ref">XCTAssertNotEqualObjects</span>.</p>
<p>This makes tests less fragile, as many improperly rely on pointer equality for strings that have equal values. This assumption is not guaranteed by the language.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/assert-equals.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-avoid-nserror-init</key>
    <name>objc-avoid-nserror-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-avoid-nserror-init</p>
</div>
<h1 id="objc-avoid-nserror-init">objc-avoid-nserror-init</h1>
<p>Finds improper initialization of <code>NSError</code> objects.</p>
<p>According to Apple developer document, we should always use factory method <code>errorWithDomain:code:userInfo:</code> to create new NSError objects instead of <code>[NSError alloc] init]</code>. Otherwise it will lead to a warning message during runtime.</p>
<p>The corresponding information about <code>NSError</code> creation: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/CreateCustomizeNSError/CreateCustomizeNSError.html">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/CreateCustomizeNSError/CreateCustomizeNSError.html</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/avoid-nserror-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>objc-dealloc-in-category</key>
    <name>objc-dealloc-in-category</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-dealloc-in-category</p>
</div>
<h1 id="objc-dealloc-in-category">objc-dealloc-in-category</h1>
<p>Finds implementations of <code>-dealloc</code> in Objective-C categories. The category implementation will override any <code>-dealloc</code> in the class implementation, potentially causing issues.</p>
<p>Classes implement <code>-dealloc</code> to perform important actions to deallocate an object. If a category on the class implements <code>-dealloc</code>, it will override the class's implementation and unexpected deallocation behavior may occur.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/dealloc-in-category.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-forbidden-subclassing</key>
    <name>objc-forbidden-subclassing</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-forbidden-subclassing</p>
</div>
<h1 id="objc-forbidden-subclassing">objc-forbidden-subclassing</h1>
<p>Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed.</p>
<p>By default, includes a list of Objective-C classes which are publicly documented as not supporting subclassing.</p>
<div class="note">
<div class="title">
<p>Note</p>
</div>
<p>Instead of using this check, for code under your control, you should add <code>__attribute__((objc_subclassing_restricted))</code> before your <code>@interface</code> declarations to ensure the compiler prevents others from subclassing your Objective-C classes. See <a href="https://clang.llvm.org/docs/AttributeReference.html#objc-subclassing-restricted">https://clang.llvm.org/docs/AttributeReference.html#objc-subclassing-restricted</a></p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>ForbiddenSuperClassNames</p>
<p>Semicolon-separated list of names of Objective-C classes which do not support subclassing.</p>
<p>Defaults to <span class="title-ref">ABNewPersonViewController;ABPeoplePickerNavigationController;ABPersonViewController;ABUnknownPersonViewController;NSHashTable;NSMapTable;NSPointerArray;NSPointerFunctions;NSTimer;UIActionSheet;UIAlertView;UIImagePickerController;UITextInputMode;UIWebView</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/forbidden-subclassing.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    <type>BUG</type>
    </rule>
  <rule>
    <key>objc-missing-hash</key>
    <name>objc-missing-hash</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-missing-hash</p>
</div>
<h1 id="objc-missing-hash">objc-missing-hash</h1>
<p>Finds Objective-C implementations that implement <code>-isEqual:</code> without also appropriately implementing <code>-hash</code>.</p>
<p>Apple documentation highlights that objects that are equal must have the same hash value: <a href="https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418795-isequal?language=objc">https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418795-isequal?language=objc</a></p>
<p>Note that the check only verifies the presence of <code>-hash</code> in scenarios where its omission could result in unexpected behavior. The verification of the implementation of <code>-hash</code> is the responsibility of the developer, e.g., through the addition of unit tests to verify the implementation.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/missing-hash.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-nsdate-formatter</key>
    <name>objc-nsdate-formatter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-nsdate-formatter</p>
</div>
<h1 id="objc-nsdate-formatter">objc-nsdate-formatter</h1>
<p>When <code>NSDateFormatter</code> is used to convert an <code>NSDate</code> type to a <code>String</code> type, the user can specify a custom format string. Certain format specifiers are undesirable despite being legal. See <a href="http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns">http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns</a> for all legal date patterns.</p>
<p>This checker reports as warnings the following string patterns in a date format specifier:</p>
<ol>
<li>yyyy + ww : Calendar year specified with week of a week year (unless YYYY is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">yyyy-ww</span>;<br />
Output string: <span class="title-ref">2014-01</span> (Wrong because it's not the first week of 2014)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">dd-MM-yyyy (ww-YYYY)</span>;<br />
Output string: <span class="title-ref">29-12-2014 (01-2015)</span> (This is correct)</div></li>
</ul></li>
<li>F without ee/EE : Numeric day of week in a month without actual day.
<ul>
<li><div class="line-block"><strong>Example:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">F-MM</span>;<br />
Output string: <span class="title-ref">5-12</span> (Wrong because it reads as <em>5th ___ of Dec</em> in English)</div></li>
</ul></li>
<li>F without MM : Numeric day of week in a month without month.
<ul>
<li><div class="line-block"><strong>Example:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">F-EE</span><br />
Output string: <span class="title-ref">5-Mon</span> (Wrong because it reads as <em>5th Mon of ___</em> in English)</div></li>
</ul></li>
<li>WW without MM : Week of the month without the month.
<ul>
<li><div class="line-block"><strong>Example:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">WW-yyyy</span><br />
Output string: <span class="title-ref">05-2014</span> (Wrong because it reads as <em>5th Week of ___</em> in English)</div></li>
</ul></li>
<li>YYYY + QQ : Week year specified with quarter of normal year (unless yyyy is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">YYYY-QQ</span><br />
Output string: <span class="title-ref">2015-04</span> (Wrong because it's not the 4th quarter of 2015)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">ww-YYYY (QQ-yyyy)</span><br />
Output string: <span class="title-ref">01-2015 (04-2014)</span> (This is correct)</div></li>
</ul></li>
<li>YYYY + MM : Week year specified with Month of a calendar year (unless yyyy is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">YYYY-MM</span><br />
Output string: <span class="title-ref">2015-12</span> (Wrong because it's not the 12th month of 2015)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">ww-YYYY (MM-yyyy)</span><br />
Output string: <span class="title-ref">01-2015 (12-2014)</span> (This is correct)</div></li>
</ul></li>
<li>YYYY + DD : Week year with day of a calendar year (unless yyyy is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">YYYY-DD</span><br />
Output string: <span class="title-ref">2015-363</span> (Wrong because it's not the 363rd day of 2015)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">ww-YYYY (DD-yyyy)</span><br />
Output string: <span class="title-ref">01-2015 (363-2014)</span> (This is correct)</div></li>
</ul></li>
<li>YYYY + WW : Week year with week of a calendar year (unless yyyy is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">YYYY-WW</span><br />
Output string: <span class="title-ref">2015-05</span> (Wrong because it's not the 5th week of 2015)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">ww-YYYY (WW-MM-yyyy)</span><br />
Output string: <span class="title-ref">01-2015 (05-12-2014)</span> (This is correct)</div></li>
</ul></li>
<li>YYYY + F : Week year with day of week in a calendar month (unless yyyy is also specified).
<ul>
<li><div class="line-block"><strong>Example 1:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">YYYY-ww-F-EE</span><br />
Output string: <span class="title-ref">2015-01-5-Mon</span> (Wrong because it's not the 5th Monday of January in 2015)</div></li>
<li><div class="line-block"><strong>Example 2:</strong> Input Date: <span class="title-ref">29 December 2014</span> ; Format String: <span class="title-ref">ww-YYYY (F-EE-MM-yyyy)</span><br />
Output string: <span class="title-ref">01-2015 (5-Mon-12-2014)</span> (This is correct)</div></li>
</ul></li>
</ol>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/nsdate-formatter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-nsinvocation-argument-lifetime</key>
    <name>objc-nsinvocation-argument-lifetime</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-nsinvocation-argument-lifetime</p>
</div>
<h1 id="objc-nsinvocation-argument-lifetime">objc-nsinvocation-argument-lifetime</h1>
<p>Finds calls to <code>NSInvocation</code> methods under ARC that don't have proper argument object lifetimes. When passing Objective-C objects as parameters to the <code>NSInvocation</code> methods <code>getArgument:atIndex:</code> and <code>getReturnValue:</code>, the values are copied by value into the argument pointer, which leads to incorrect releasing behavior if the object pointers are not declared <code>__unsafe_unretained</code>.</p>
<p>For code:</p>
<pre class="objc"><code>id arg;
[invocation getArgument:&amp;arg atIndex:2];

__strong id returnValue;
[invocation getReturnValue:&amp;returnValue];</code></pre>
<p>The fix will be:</p>
<pre class="objc"><code>__unsafe_unretained id arg;
[invocation getArgument:&amp;arg atIndex:2];

__unsafe_unretained id returnValue;
[invocation getReturnValue:&amp;returnValue];</code></pre>
<p>The check will warn on being passed instance variable references that have lifetimes other than <code>__unsafe_unretained</code>, but does not propose a fix:</p>
<pre class="objc"><code>// &quot;id _returnValue&quot; is declaration of instance variable of class.
[invocation getReturnValue:&amp;self-&gt;_returnValue];</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/nsinvocation-argument-lifetime.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-property-declaration</key>
    <name>objc-property-declaration</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-property-declaration</p>
</div>
<h1 id="objc-property-declaration">objc-property-declaration</h1>
<p>Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple's programming guide. The property name should be in the format of Lower Camel Case.</p>
<p>For code:</p>
<pre class="objc"><code>@property(nonatomic, assign) int LowerCamelCase;</code></pre>
<p>The fix will be:</p>
<pre class="objc"><code>@property(nonatomic, assign) int lowerCamelCase;</code></pre>
<p>The check will only fix 'CamelCase' to 'camelCase'. In some other cases we will only provide warning messages since the property name could be complicated. Users will need to come up with a proper name by their own.</p>
<p>This check also accepts special acronyms as prefixes or suffixes. Such prefixes or suffixes will suppress the Lower Camel Case check according to the guide: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-1002931-BBCFHEAB">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-1002931-BBCFHEAB</a></p>
<p>For a full list of well-known acronyms: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE</a></p>
<p>The corresponding style rule: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-1001757">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-1001757</a></p>
<p>The check will also accept property declared in category with a prefix of lowercase letters followed by a '_' to avoid naming conflict. For example:</p>
<pre class="objc"><code>@property(nonatomic, assign) int abc_lowerCamelCase;</code></pre>
<p>The corresponding style rule: <a href="https://developer.apple.com/library/content/qa/qa1908/_index.html">https://developer.apple.com/library/content/qa/qa1908/_index.html</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/property-declaration.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>objc-super-self</key>
    <name>objc-super-self</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - objc-super-self</p>
</div>
<h1 id="objc-super-self">objc-super-self</h1>
<p>Finds invocations of <code>-self</code> on super instances in initializers of subclasses of <code>NSObject</code> and recommends calling a superclass initializer instead.</p>
<p>Invoking <code>-self</code> on super instances in initializers is a common programmer error when the programmer's original intent is to call a superclass initializer. Failing to call a superclass initializer breaks initializer chaining and can result in invalid object initialization.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc/super-self.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>openmp-exception-escape</key>
    <name>openmp-exception-escape</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - openmp-exception-escape</p>
</div>
<h1 id="openmp-exception-escape">openmp-exception-escape</h1>
<p>Analyzes OpenMP Structured Blocks and checks that no exception escapes out of the Structured Block it was thrown in.</p>
<p>As per the OpenMP specification, a structured block is an executable statement, possibly compound, with a single entry at the top and a single exit at the bottom. Which means, <code>throw</code> may not be used to 'exit' out of the structured block. If an exception is not caught in the same structured block it was thrown in, the behavior is undefined.</p>
<p>FIXME: this check does not model SEH, <code>setjmp</code>/<code>longjmp</code>.</p>
<p>WARNING! This check may be expensive on large source files.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredExceptions</p>
<p>Comma-separated list containing type names which are not counted as thrown exceptions in the check. Default value is an empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/openmp/exception-escape.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>openmp-use-default-none</key>
    <name>openmp-use-default-none</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - openmp-use-default-none</p>
</div>
<h1 id="openmp-use-default-none">openmp-use-default-none</h1>
<p>Finds OpenMP directives that are allowed to contain a <code>default</code> clause, but either don't specify it or the clause is specified but with the kind other than <code>none</code>, and suggests to use the <code>default(none)</code> clause.</p>
<p>Using <code>default(none)</code> clause forces developers to explicitly specify data sharing attributes for the variables referenced in the construct, thus making it obvious which variables are referenced, and what is their data sharing attribute, thus increasing readability and possibly making errors easier to spot.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>// ``for`` directive cannot have ``default`` clause, no diagnostics.
void n0(const int a) {
#pragma omp for
  for (int b = 0; b &lt; a; b++)
    ;
}

// ``parallel`` directive.

// ``parallel`` directive can have ``default`` clause, but said clause is not
// specified, diagnosed.
void p0_0() {
#pragma omp parallel
  ;
  // WARNING: OpenMP directive ``parallel`` does not specify ``default``
  //          clause. Consider specifying ``default(none)`` clause.
}

// ``parallel`` directive can have ``default`` clause, and said clause is
// specified, with ``none`` kind, all good.
void p0_1() {
#pragma omp parallel default(none)
  ;
}

// ``parallel`` directive can have ``default`` clause, and said clause is
// specified, but with ``shared`` kind, which is not ``none``, diagnose.
void p0_2() {
#pragma omp parallel default(shared)
  ;
  // WARNING: OpenMP directive ``parallel`` specifies ``default(shared)``
  //          clause. Consider using ``default(none)`` clause instead.
}

// ``parallel`` directive can have ``default`` clause, and said clause is
// specified, but with ``firstprivate`` kind, which is not ``none``, diagnose.
void p0_3() {
#pragma omp parallel default(firstprivate)
  ;
  // WARNING: OpenMP directive ``parallel`` specifies ``default(firstprivate)``
  //          clause. Consider using ``default(none)`` clause instead.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/openmp/use-default-none.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>performance-avoid-endl</key>
    <name>performance-avoid-endl</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-avoid-endl</p>
</div>
<h1 id="performance-avoid-endl">performance-avoid-endl</h1>
<p>Checks for uses of <code>std::endl</code> on streams and suggests using the newline character <code>'\n'</code> instead.</p>
<p>Rationale: Using <code>std::endl</code> on streams can be less efficient than using the newline character <code>'\n'</code> because <code>std::endl</code> performs two operations: it writes a newline character to the output stream and then flushes the stream buffer. Writing a single newline character using <code>'\n'</code> does not trigger a flush, which can improve performance. In addition, flushing the stream buffer can cause additional overhead when working with streams that are buffered.</p>
<p>Example:</p>
<p>Consider the following code:</p>
<pre class="c++"><code>#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; &quot;Hello&quot; &lt;&lt; std::endl;
}</code></pre>
<p>Which gets transformed into:</p>
<pre class="c++"><code>#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; &quot;Hello&quot; &lt;&lt; &#39;\n&#39;;
}</code></pre>
<p>This code writes a single newline character to the <code>std::cout</code> stream without flushing the stream buffer.</p>
<p>Additionally, it is important to note that the standard C++ streams (like <code>std::cerr</code>, <code>std::wcerr</code>, <code>std::clog</code> and <code>std::wclog</code>) always flush after a write operation, unless <code>std::ios_base::sync_with_stdio</code> is set to <code>false</code>. regardless of whether <code>std::endl</code> or <code>'\n'</code> is used. Therefore, using <code>'\n'</code> with these streams will not result in any performance gain, but it is still recommended to use <code>'\n'</code> for consistency and readability.</p>
<p>If you do need to flush the stream buffer, you can use <code>std::flush</code> explicitly like this:</p>
<pre class="c++"><code>#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; &quot;Hello\n&quot; &lt;&lt; std::flush;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/avoid-endl.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>performance-enum-size</key>
    <name>performance-enum-size</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-enum-size</p>
</div>
<h1 id="performance-enum-size">performance-enum-size</h1>
<p>Recommends the smallest possible underlying type for an <code>enum</code> or <code>enum</code> class based on the range of its enumerators. Analyzes the values of the enumerators in an <code>enum</code> or <code>enum</code> class, including signed values, to recommend the smallest possible underlying type that can represent all the values of the <code>enum</code>. The suggested underlying types are the integral types <code>std::uint8_t</code>, <code>std::uint16_t</code>, and <code>std::uint32_t</code> for unsigned types, and <code>std::int8_t</code>, <code>std::int16_t</code>, and <code>std::int32_t</code> for signed types. Using the suggested underlying types can help reduce the memory footprint of the program and improve performance in some cases.</p>
<p>For example:</p>
<pre class="c++"><code>// BEFORE
enum Color {
    RED = -1,
    GREEN = 0,
    BLUE = 1
};

std::optional&lt;Color&gt; color_opt;</code></pre>
<p>The <span class="title-ref">Color</span> <code>enum</code> uses the default underlying type, which is <code>int</code> in this case, and its enumerators have values of -1, 0, and 1. Additionally, the <code>std::optional&lt;Color&gt;</code> object uses 8 bytes due to padding (platform dependent).</p>
<pre class="c++"><code>// AFTER
enum Color : std:int8_t {
    RED = -1,
    GREEN = 0,
    BLUE = 1
}

std::optional&lt;Color&gt; color_opt;</code></pre>
<p>In the revised version of the <span class="title-ref">Color</span> <code>enum</code>, the underlying type has been changed to <code>std::int8_t</code>. The enumerator <span class="title-ref">RED</span> has a value of -1, which can be represented by a signed 8-bit integer.</p>
<p>By using a smaller underlying type, the memory footprint of the <span class="title-ref">Color</span> <code>enum</code> is reduced from 4 bytes to 1 byte. The revised version of the <code>std::optional&lt;Color&gt;</code> object would only require 2 bytes (due to lack of padding), since it contains a single byte for the <span class="title-ref">Color</span> <code>enum</code> and a single byte for the <code>bool</code> flag that indicates whether the optional value is set.</p>
<p>Reducing the memory footprint of an <code>enum</code> can have significant benefits in terms of memory usage and cache performance. However, it's important to consider the trade-offs and potential impact on code readability and maintainability.</p>
<p>Enums without enumerators (empty) are excluded from analysis.</p>
<p>Requires C++11 or above. Does not provide auto-fixes.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>EnumIgnoreList</p>
<p>Option is used to ignore certain enum types. It accepts a semicolon-separated list of (fully qualified) enum type names or regular expressions that match the enum type names. The default value is an empty string, which means no enums will be ignored.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/enum-size.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>performance-faster-string-find</key>
    <name>performance-faster-string-find</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-faster-string-find</p>
</div>
<h1 id="performance-faster-string-find">performance-faster-string-find</h1>
<p>Optimize calls to <code>std::string::find()</code> and friends when the needle passed is a single character string literal. The character literal overload is more efficient.</p>
<p>Examples:</p>
<pre class="c++"><code>str.find(&quot;A&quot;);

// becomes

str.find(&#39;A&#39;);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringLikeClasses</p>
<p>Semicolon-separated list of names of string-like classes. By default only <code>::std::basic_string</code> and <code>::std::basic_string_view</code> are considered. The check will only consider member functions named <code>find</code>, <code>rfind</code>, <code>find_first_of</code>, <code>find_first_not_of</code>, <code>find_last_of</code>, or <code>find_last_not_of</code> within these classes.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/faster-string-find.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-for-range-copy</key>
    <name>performance-for-range-copy</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-for-range-copy</p>
</div>
<h1 id="performance-for-range-copy">performance-for-range-copy</h1>
<p>Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference.</p>
<p>The check is only applied to loop variables of types that are expensive to copy which means they are not trivially copyable or have a non-trivial copy constructor or destructor.</p>
<p>To ensure that it is safe to replace the copy with a const reference the following heuristic is employed:</p>
<ol type="1">
<li>The loop variable is const qualified.</li>
<li>The loop variable is not const, but only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</li>
</ol>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnAllAutoCopies</p>
<p>When <span class="title-ref">true</span>, warns on any use of <span class="title-ref">auto</span> as the type of the range-based for loop variable. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>AllowedTypes</p>
<p>A semicolon-separated list of names of types allowed to be copied in each iteration. Regular expressions are accepted, e.g. <span class="title-ref">[Rr]ef(erence)?$</span> matches every type with suffix <span class="title-ref">Ref</span>, <span class="title-ref">ref</span>, <span class="title-ref">Reference</span> and <span class="title-ref">reference</span>. The default is empty. If a name in the list contains the sequence <span class="title-ref">::</span> it is matched against the qualified typename (i.e. <span class="title-ref">namespace::Type</span>, otherwise it is matched against only the type name (i.e. <span class="title-ref">Type</span>).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/for-range-copy.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-implicit-cast-in-loop</key>
    <name>performance-implicit-cast-in-loop</name>
    <description>
      <![CDATA[<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - performance-implicit-cast-in-loop</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../performance/implicit-conversion-in-loop.html">

</div>
<h1 id="performance-implicit-cast-in-loop">performance-implicit-cast-in-loop</h1>
<p>This check has been renamed to <code class="interpreted-text" role="doc">performance-implicit-conversion-in-loop
&lt;../performance/implicit-conversion-in-loop&gt;</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/implicit-cast-in-loop.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-implicit-conversion-in-loop</key>
    <name>performance-implicit-conversion-in-loop</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-implicit-conversion-in-loop</p>
</div>
<h1 id="performance-implicit-conversion-in-loop">performance-implicit-conversion-in-loop</h1>
<p>This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator. This means that an implicit conversion happens, which can for example result in expensive deep copies.</p>
<p>Example:</p>
<pre class="c++"><code>map&lt;int, vector&lt;string&gt;&gt; my_map;
for (const pair&lt;int, vector&lt;string&gt;&gt;&amp; p : my_map) {}
// The iterator type is in fact pair&lt;const int, vector&lt;string&gt;&gt;, which means
// that the compiler added a conversion, resulting in a copy of the vectors.</code></pre>
<p>The easiest solution is usually to use <code>const auto&amp;</code> instead of writing the type manually.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/implicit-conversion-in-loop.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-inefficient-algorithm</key>
    <name>performance-inefficient-algorithm</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-inefficient-algorithm</p>
</div>
<h1 id="performance-inefficient-algorithm">performance-inefficient-algorithm</h1>
<p>Warns on inefficient use of STL algorithms on associative containers.</p>
<p>Associative containers implement some of the algorithms as methods which should be preferred to the algorithms in the algorithm header. The methods can take advantage of the order of the elements.</p>
<pre class="c++"><code>std::set&lt;int&gt; s;
auto it = std::find(s.begin(), s.end(), 43);

// becomes

auto it = s.find(43);</code></pre>
<pre class="c++"><code>std::set&lt;int&gt; s;
auto c = std::count(s.begin(), s.end(), 43);

// becomes

auto c = s.count(43);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/inefficient-algorithm.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-inefficient-string-concatenation</key>
    <name>performance-inefficient-string-concatenation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-inefficient-string-concatenation</p>
</div>
<h1 id="performance-inefficient-string-concatenation">performance-inefficient-string-concatenation</h1>
<p>This check warns about the performance overhead arising from concatenating strings using the <code>operator+</code>, for instance:</p>
<pre class="c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Bar&quot;);
a = a + b;</code></pre>
<p>Instead of this structure you should use <code>operator+=</code> or <code>std::string</code>'s (<code>std::basic_string</code>) class member function <code>append()</code>. For instance:</p>
<pre class="c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
for (int i = 0; i &lt; 20000; ++i) {
    a = a + &quot;Bar&quot; + b;
}</code></pre>
<p>Could be rewritten in a greatly more efficient way like:</p>
<pre class="c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
for (int i = 0; i &lt; 20000; ++i) {
    a.append(&quot;Bar&quot;).append(b);
}</code></pre>
<p>And this can be rewritten too:</p>
<pre class="c++"><code>void f(const std::string&amp;) {}
std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
void g() {
    f(a + &quot;Bar&quot; + b);
}</code></pre>
<p>In a slightly more efficient way like:</p>
<pre class="c++"><code>void f(const std::string&amp;) {}
std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
void g() {
    f(std::string(a).append(&quot;Bar&quot;).append(b));
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When <span class="title-ref">false</span>, the check will only check the string usage in <code>while</code>, <code>for</code> and <code>for-range</code> statements. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/inefficient-string-concatenation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-inefficient-vector-operation</key>
    <name>performance-inefficient-vector-operation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-inefficient-vector-operation</p>
</div>
<h1 id="performance-inefficient-vector-operation">performance-inefficient-vector-operation</h1>
<p>Finds possible inefficient <code>std::vector</code> operations (e.g. <code>push_back</code>, <code>emplace_back</code>) that may cause unnecessary memory reallocations.</p>
<p>It can also find calls that add element to protobuf repeated field in a loop without calling Reserve() before the loop. Calling Reserve() first can avoid unnecessary memory reallocations.</p>
<p>Currently, the check only detects following kinds of loops with a single statement body:</p>
<ul>
<li>Counter-based for loops start with 0:</li>
</ul>
<pre class="c++"><code>std::vector&lt;int&gt; v;
for (int i = 0; i &lt; n; ++i) {
  v.push_back(n);
  // This will trigger the warning since the push_back may cause multiple
  // memory reallocations in v. This can be avoid by inserting a &#39;reserve(n)&#39;
  // statement before the for statement.
}

SomeProto p;
for (int i = 0; i &lt; n; ++i) {
  p.add_xxx(n);
  // This will trigger the warning since the add_xxx may cause multiple memory
  // reallocations. This can be avoid by inserting a
  // &#39;p.mutable_xxx().Reserve(n)&#39; statement before the for statement.
}</code></pre>
<ul>
<li>For-range loops like <code>for (range-declaration : range_expression)</code>, the type of <code>range_expression</code> can be <code>std::vector</code>, <code>std::array</code>, <code>std::deque</code>, <code>std::set</code>, <code>std::unordered_set</code>, <code>std::map</code>, <code>std::unordered_set</code>:</li>
</ul>
<pre class="c++"><code>std::vector&lt;int&gt; data;
std::vector&lt;int&gt; v;

for (auto element : data) {
  v.push_back(element);
  // This will trigger the warning since the &#39;push_back&#39; may cause multiple
  // memory reallocations in v. This can be avoid by inserting a
  // &#39;reserve(data.size())&#39; statement before the for statement.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>VectorLikeClasses</p>
<p>Semicolon-separated list of names of vector-like classes. By default only <code>::std::vector</code> is considered.</p>
</div>
<div class="option">
<p>EnableProto</p>
<p>When <span class="title-ref">true</span>, the check will also warn on inefficient operations for proto repeated fields. Otherwise, the check only warns on inefficient vector operations. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/inefficient-vector-operation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-move-const-arg</key>
    <name>performance-move-const-arg</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-move-const-arg</p>
</div>
<h1 id="performance-move-const-arg">performance-move-const-arg</h1>
<p>The check warns</p>
<ul>
<li>if <code>std::move()</code> is called with a constant argument,</li>
<li>if <code>std::move()</code> is called with an argument of a trivially-copyable type,</li>
<li>if the result of <code>std::move()</code> is passed as a const reference argument.</li>
</ul>
<p>In all three cases, the check will suggest a fix that removes the <code>std::move()</code>.</p>
<p>Here are examples of each of the three cases:</p>
<pre class="c++"><code>const string s;
return std::move(s);  // Warning: std::move of the const variable has no effect

int x;
return std::move(x);  // Warning: std::move of the variable of a trivially-copyable type has no effect

void f(const string &amp;s);
string s;
f(std::move(s));  // Warning: passing result of std::move as a const reference argument; no move will actually happen</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckTriviallyCopyableMove</p>
<p>If <span class="title-ref">true</span>, enables detection of trivially copyable types that do not have a move constructor. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>CheckMoveToConstRef</p>
<p>If <span class="title-ref">true</span>, enables detection of <span class="title-ref">std::move()</span> passed as a const reference argument. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/move-const-arg.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-move-constructor-init</key>
    <name>performance-move-constructor-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-move-constructor-init</p>
</div>
<h1 id="performance-move-constructor-init">performance-move-constructor-init</h1>
<p>"cert-oop11-cpp" redirects here as an alias for this check.</p>
<p>The check flags user-defined move constructors that have a ctor-initializer initializing a member or base class through a copy constructor instead of a move constructor.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/move-constructor-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-no-automatic-move</key>
    <name>performance-no-automatic-move</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-no-automatic-move</p>
</div>
<h1 id="performance-no-automatic-move">performance-no-automatic-move</h1>
<p>Finds local variables that cannot be automatically moved due to constness.</p>
<p>Under <a href="https://en.cppreference.com/w/cpp/language/return#automatic_move_from_local_variables_and_parameters">certain conditions</a>, local values are automatically moved out when returning from a function. A common mistake is to declare local <code>lvalue</code> variables <code>const</code>, which prevents the move.</p>
<p>Example <a href="https://godbolt.org/z/x7SYYA">[1]</a>:</p>
<pre class="c++"><code>StatusOr&lt;std::vector&lt;int&gt;&gt; Cool() {
  std::vector&lt;int&gt; obj = ...;
  return obj;  // calls StatusOr::StatusOr(std::vector&lt;int&gt;&amp;&amp;)
}

StatusOr&lt;std::vector&lt;int&gt;&gt; NotCool() {
  const std::vector&lt;int&gt; obj = ...;
  return obj;  // calls `StatusOr::StatusOr(const std::vector&lt;int&gt;&amp;)`
}</code></pre>
<p>The former version (<code>Cool</code>) should be preferred over the latter (<code>NotCool</code>) as it will avoid allocations and potentially large memory copies.</p>
<h2 id="semantics">Semantics</h2>
<p>In the example above, <code>StatusOr::StatusOr(T&amp;&amp;)</code> have the same semantics as long as the copy and move constructors for <code>T</code> have the same semantics. Note that there is no guarantee that <code>S::S(T&amp;&amp;)</code> and <code>S::S(const T&amp;)</code> have the same semantics for any single <code>S</code>, so we're not providing automated fixes for this check, and judgement should be exerted when making the suggested changes.</p>
<h2 id="wreturn-std-move">-Wreturn-std-move</h2>
<p>Another case where the move cannot happen is the following:</p>
<pre class="c++"><code>StatusOr&lt;std::vector&lt;int&gt;&gt; Uncool() {
  std::vector&lt;int&gt;&amp;&amp; obj = ...;
  return obj;  // calls `StatusOr::StatusOr(const std::vector&lt;int&gt;&amp;)`
}</code></pre>
<p>In that case the fix is more consensual: just <span class="title-ref">return std::move(obj)</span>. This is handled by the <span class="title-ref">-Wreturn-std-move</span> warning.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/no-automatic-move.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-no-int-to-ptr</key>
    <name>performance-no-int-to-ptr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-no-int-to-ptr</p>
</div>
<h1 id="performance-no-int-to-ptr">performance-no-int-to-ptr</h1>
<p>Diagnoses every integer to pointer cast.</p>
<p>While casting an (integral) pointer to an integer is obvious - you just get the integral value of the pointer, casting an integer to an (integral) pointer is deceivingly different. While you will get a pointer with that integral value, if you got that integral value via a pointer-to-integer cast originally, the new pointer will lack the provenance information from the original pointer.</p>
<p>So while (integral) pointer to integer casts are effectively no-ops, and are transparent to the optimizer, integer to (integral) pointer casts are <em>NOT</em> transparent, and may conceal information from optimizer.</p>
<p>While that may be the intention, it is not always so. For example, let's take a look at a routine to align the pointer up to the multiple of 16: The obvious, naive implementation for that is:</p>
<pre class="c++"><code>char* src(char* maybe_underbiased_ptr) {
  uintptr_t maybe_underbiased_intptr = (uintptr_t)maybe_underbiased_ptr;
  uintptr_t aligned_biased_intptr = maybe_underbiased_intptr + 15;
  uintptr_t aligned_intptr = aligned_biased_intptr &amp; (~15);
  return (char*)aligned_intptr; // warning: avoid integer to pointer casts [performance-no-int-to-ptr]
}</code></pre>
<p>The check will rightfully diagnose that cast.</p>
<p>But when provenance concealment is not the goal of the code, but an accident, this example can be rewritten as follows, without using integer to pointer cast:</p>
<pre class="c++"><code>char*
tgt(char* maybe_underbiased_ptr) {
    uintptr_t maybe_underbiased_intptr = (uintptr_t)maybe_underbiased_ptr;
    uintptr_t aligned_biased_intptr = maybe_underbiased_intptr + 15;
    uintptr_t aligned_intptr = aligned_biased_intptr &amp; (~15);
    uintptr_t bias = aligned_intptr - maybe_underbiased_intptr;
    return maybe_underbiased_ptr + bias;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/no-int-to-ptr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-noexcept-destructor</key>
    <name>performance-noexcept-destructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-noexcept-destructor</p>
</div>
<h1 id="performance-noexcept-destructor">performance-noexcept-destructor</h1>
<p>The check flags user-defined destructors marked with <code>noexcept(expr)</code> where <code>expr</code> evaluates to <code>false</code> (but is not a <code>false</code> literal itself).</p>
<p>When a destructor is marked as <code>noexcept</code>, it assures the compiler that no exceptions will be thrown during the destruction of an object, which allows the compiler to perform certain optimizations such as omitting exception handling code.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/noexcept-destructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>performance-noexcept-move-constructor</key>
    <name>performance-noexcept-move-constructor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-noexcept-move-constructor</p>
</div>
<h1 id="performance-noexcept-move-constructor">performance-noexcept-move-constructor</h1>
<p>The check flags user-defined move constructors and assignment operators not marked with <code>noexcept</code> or marked with <code>noexcept(expr)</code> where <code>expr</code> evaluates to <code>false</code> (but is not a <code>false</code> literal itself).</p>
<p>Move constructors of all the types used with STL containers, for example, need to be declared <code>noexcept</code>. Otherwise STL will choose copy constructors instead. The same is valid for move assignment operations.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/noexcept-move-constructor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-noexcept-swap</key>
    <name>performance-noexcept-swap</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-noexcept-swap</p>
</div>
<h1 id="performance-noexcept-swap">performance-noexcept-swap</h1>
<p>The check flags user-defined swap and iter_swap functions not marked with <code>noexcept</code> or marked with <code>noexcept(expr)</code> where <code>expr</code> evaluates to <code>false</code> (but is not a <code>false</code> literal itself).</p>
<p>When a swap or iter_swap function is marked as <code>noexcept</code>, it assures the compiler that no exceptions will be thrown during the swapping of two objects, which allows the compiler to perform certain optimizations such as omitting exception handling code.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/noexcept-swap.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>performance-trivially-destructible</key>
    <name>performance-trivially-destructible</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-trivially-destructible</p>
</div>
<h1 id="performance-trivially-destructible">performance-trivially-destructible</h1>
<p>Finds types that could be made trivially-destructible by removing out-of-line defaulted destructor declarations.</p>
<pre class="c++"><code>struct A: TrivialType {
  ~A(); // Makes A non-trivially-destructible.
  TrivialType trivial_fields;
};
A::~A() = default;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/trivially-destructible.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-type-promotion-in-math-fn</key>
    <name>performance-type-promotion-in-math-fn</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-type-promotion-in-math-fn</p>
</div>
<h1 id="performance-type-promotion-in-math-fn">performance-type-promotion-in-math-fn</h1>
<p>Finds calls to C math library functions (from <code>math.h</code> or, in C++, <code>cmath</code>) with implicit <code>float</code> to <code>double</code> promotions.</p>
<p>For example, warns on <code>::sin(0.f)</code>, because this function's parameter is a double. You probably meant to call <code>std::sin(0.f)</code> (in C++), or <code>sinf(0.f)</code> (in C).</p>
<pre class="c++"><code>float a;
asin(a);

// becomes

float a;
std::asin(a);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/type-promotion-in-math-fn.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-unnecessary-copy-initialization</key>
    <name>performance-unnecessary-copy-initialization</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-unnecessary-copy-initialization</p>
</div>
<h1 id="performance-unnecessary-copy-initialization">performance-unnecessary-copy-initialization</h1>
<p>Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference.</p>
<p>The check is only applied if it is safe to replace the copy by a const reference. This is the case when the variable is const qualified or when it is only used as a const, i.e. only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</p>
<p>Example:</p>
<pre class="c++"><code>const string&amp; constReference();
void Function() {
  // The warning will suggest making this a const reference.
  const string UnnecessaryCopy = constReference();
}

struct Foo {
  const string&amp; name() const;
};
void Function(const Foo&amp; foo) {
  // The warning will suggest making this a const reference.
  string UnnecessaryCopy1 = foo.name();
  UnnecessaryCopy1.find(&quot;bar&quot;);

  // The warning will suggest making this a const reference.
  string UnnecessaryCopy2 = UnnecessaryCopy1;
  UnnecessaryCopy2.find(&quot;bar&quot;);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowedTypes</p>
<p>A semicolon-separated list of names of types allowed to be initialized by copying. Regular expressions are accepted, e.g. <span class="title-ref">[Rr]ef(erence)?$</span> matches every type with suffix <span class="title-ref">Ref</span>, <span class="title-ref">ref</span>, <span class="title-ref">Reference</span> and <span class="title-ref">reference</span>. The default is empty. If a name in the list contains the sequence <span class="title-ref">::</span> it is matched against the qualified typename (i.e. <span class="title-ref">namespace::Type</span>, otherwise it is matched against only the type name (i.e. <span class="title-ref">Type</span>).</p>
</div>
<div class="option">
<p>ExcludedContainerTypes</p>
<p>A semicolon-separated list of names of types whose methods are allowed to return the const reference the variable is copied from. When an expensive to copy variable is copy initialized by the return value from a type on this list the check does not trigger. This can be used to exclude types known to be const incorrect or where the lifetime or immutability of returned references is not tied to mutations of the container. An example are view types that don't own the underlying data. Like for <span class="title-ref">AllowedTypes</span> above, regular expressions are accepted and the inclusion of <span class="title-ref">::</span> determines whether the qualified typename is matched or not.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/unnecessary-copy-initialization.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>performance-unnecessary-value-param</key>
    <name>performance-unnecessary-value-param</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - performance-unnecessary-value-param</p>
</div>
<h1 id="performance-unnecessary-value-param">performance-unnecessary-value-param</h1>
<p>Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference.</p>
<p>The check is only applied to parameters of types that are expensive to copy which means they are not trivially copyable or have a non-trivial copy constructor or destructor.</p>
<p>To ensure that it is safe to replace the value parameter with a const reference the following heuristic is employed:</p>
<ol type="1">
<li>the parameter is const qualified;</li>
<li>the parameter is not const, but only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</li>
</ol>
<p>Example:</p>
<pre class="c++"><code>void f(const string Value) {
  // The warning will suggest making Value a reference.
}

void g(ExpensiveToCopy Value) {
  // The warning will suggest making Value a const reference.
  Value.ConstMethd();
  ExpensiveToCopy Copy(Value);
}</code></pre>
<p>If the parameter is not const, only copied or assigned once and has a non-trivial move-constructor or move-assignment operator respectively the check will suggest to move it.</p>
<p>Example:</p>
<pre class="c++"><code>void setValue(string Value) {
  Field = Value;
}</code></pre>
<p>Will become:</p>
<pre class="c++"><code>#include &lt;utility&gt;

void setValue(string Value) {
  Field = std::move(Value);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>AllowedTypes</p>
<p>A semicolon-separated list of names of types allowed to be passed by value. Regular expressions are accepted, e.g. <span class="title-ref">[Rr]ef(erence)?$</span> matches every type with suffix <span class="title-ref">Ref</span>, <span class="title-ref">ref</span>, <span class="title-ref">Reference</span> and <span class="title-ref">reference</span>. The default is empty. If a name in the list contains the sequence <span class="title-ref">::</span> it is matched against the qualified typename (i.e. <span class="title-ref">namespace::Type</span>, otherwise it is matched against only the type name (i.e. <span class="title-ref">Type</span>).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance/unnecessary-value-param.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>portability-restrict-system-includes</key>
    <name>portability-restrict-system-includes</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - portability-restrict-system-includes</p>
</div>
<h1 id="portability-restrict-system-includes">portability-restrict-system-includes</h1>
<p>Checks to selectively allow or disallow a configurable list of system headers.</p>
<p>For example:</p>
<p>In order to <strong>only</strong> allow <span class="title-ref">zlib.h</span> from the system you would set the options to <span class="title-ref">-*,zlib.h</span>.</p>
<pre class="c++"><code>#include &lt;curses.h&gt;       // Bad: disallowed system header.
#include &lt;openssl/ssl.h&gt;  // Bad: disallowed system header.
#include &lt;zlib.h&gt;         // Good: allowed system header.
#include &quot;src/myfile.h&quot;   // Good: non-system header always allowed.</code></pre>
<p>In order to allow everything <strong>except</strong> <span class="title-ref">zlib.h</span> from the system you would set the options to <span class="title-ref">*,-zlib.h</span>.</p>
<pre class="c++"><code>#include &lt;curses.h&gt;       // Good: allowed system header.
#include &lt;openssl/ssl.h&gt;  // Good: allowed system header.
#include &lt;zlib.h&gt;         // Bad: disallowed system header.
#include &quot;src/myfile.h&quot;   // Good: non-system header always allowed.</code></pre>
<p>Since the options support globbing you can use wildcarding to allow groups of headers.</p>
<p><span class="title-ref">-*,openssl/*.h</span> will allow all openssl headers but disallow any others.</p>
<pre class="c++"><code>#include &lt;curses.h&gt;       // Bad: disallowed system header.
#include &lt;openssl/ssl.h&gt;  // Good: allowed system header.
#include &lt;openssl/rsa.h&gt;  // Good: allowed system header.
#include &lt;zlib.h&gt;         // Bad: disallowed system header.
#include &quot;src/myfile.h&quot;   // Good: non-system header always allowed.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Includes</p>
<p>A string containing a comma separated glob list of allowed include filenames. Similar to the -checks glob list for running clang-tidy itself, the two wildcard characters are <span class="title-ref">*</span> and <span class="title-ref">-</span>, to include and exclude globs, respectively. The default is <span class="title-ref">*</span>, which allows all includes.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/portability/restrict-system-includes.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>portability-simd-intrinsics</key>
    <name>portability-simd-intrinsics</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - portability-simd-intrinsics</p>
</div>
<h1 id="portability-simd-intrinsics">portability-simd-intrinsics</h1>
<p>Finds SIMD intrinsics calls and suggests <code>std::experimental::simd</code> (<a href="https://wg21.link/p0214">P0214</a>) alternatives.</p>
<p>If the option <code class="interpreted-text" role="option">Suggest</code> is set to <span class="title-ref">true</span>, for</p>
<pre class="c++"><code>_mm_add_epi32(a, b); // x86
vec_add(a, b);       // Power</code></pre>
<p>the check suggests an alternative: <code>operator+</code> on <code>std::experimental::simd</code> objects.</p>
<p>Otherwise, it just complains the intrinsics are non-portable (and there are <a href="https://wg21.link/p0214">P0214</a> alternatives).</p>
<p>Many architectures provide SIMD operations (e.g. x86 SSE/AVX, Power AltiVec/VSX, ARM NEON). It is common that SIMD code implementing the same algorithm, is written in multiple target-dispatching pieces to optimize for different architectures or micro-architectures.</p>
<p>The C++ standard proposal <a href="https://wg21.link/p0214">P0214</a> and its extensions cover many common SIMD operations. By migrating from target-dependent intrinsics to <a href="https://wg21.link/p0214">P0214</a> operations, the SIMD code can be simplified and pieces for different targets can be unified.</p>
<p>Refer to <a href="https://wg21.link/p0214">P0214</a> for introduction and motivation for the data-parallel standard library.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Suggest</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), the check will suggest <a href="https://wg21.link/p0214">P0214</a> alternatives, otherwise it only points out the intrinsic function is non-portable.</p>
</div>
<div class="option">
<p>Std</p>
<p>The namespace used to suggest <a href="https://wg21.link/p0214">P0214</a> alternatives. If not specified, <span class="title-ref">std::</span> for <span class="title-ref">-std=c++20</span> and <span class="title-ref">std::experimental::</span> for <span class="title-ref">-std=c++11</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/portability/simd-intrinsics.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>portability-std-allocator-const</key>
    <name>portability-std-allocator-const</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - portability-std-allocator-const</p>
</div>
<h1 id="portability-std-allocator-const">portability-std-allocator-const</h1>
<p>Report use of <code>std::vector&lt;const T&gt;</code> (and similar containers of const elements). These are not allowed in standard C++, and should usually be <code>std::vector&lt;T&gt;</code> instead."</p>
<p>Per C++ <code>[allocator.requirements.general]</code>: "T is any cv-unqualified object type", <code>std::allocator&lt;const T&gt;</code> is undefined. Many standard containers use <code>std::allocator</code> by default and therefore their <code>const T</code> instantiations are undefined.</p>
<p>libc++ defines <code>std::allocator&lt;const T&gt;</code> as an extension which will be removed in the future.</p>
<p>libstdc++ and MSVC do not support <code>std::allocator&lt;const T&gt;</code>:</p>
<pre class="c++"><code>// libstdc++ has a better diagnostic since https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48101
std::deque&lt;const int&gt; deque; // error: static assertion failed: std::deque must have a non-const, non-volatile value_type
std::set&lt;const int&gt; set; // error: static assertion failed: std::set must have a non-const, non-volatile value_type
std::vector&lt;int* const&gt; vector; // error: static assertion failed: std::vector must have a non-const, non-volatile value_type

// MSVC
// error C2338: static_assert failed: &#39;The C++ Standard forbids containers of const elements because allocator&lt;const T&gt; is ill-formed.&#39;</code></pre>
<p>Code bases only compiled with libc++ may accrue such undefined usage. This check finds such code and prevents backsliding while clean-up is ongoing.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/portability/std-allocator-const.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-avoid-const-params-in-decls</key>
    <name>readability-avoid-const-params-in-decls</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-avoid-const-params-in-decls</p>
</div>
<h1 id="readability-avoid-const-params-in-decls">readability-avoid-const-params-in-decls</h1>
<p>Checks whether a function declaration has parameters that are top level <code>const</code>.</p>
<p><code>const</code> values in declarations do not affect the signature of a function, so they should not be put there.</p>
<p>Examples:</p>
<pre class="c++"><code>void f(const string);   // Bad: const is top level.
void f(const string&amp;);  // Good: const is not top level.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/avoid-const-params-in-decls.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-avoid-nested-conditional-operator</key>
    <name>readability-avoid-nested-conditional-operator</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-avoid-nested-conditional-operator</p>
</div>
<h1 id="readability-avoid-nested-conditional-operator">readability-avoid-nested-conditional-operator</h1>
<p>Identifies instances of nested conditional operators in the code.</p>
<p>Nested conditional operators, also known as ternary operators, can contribute to reduced code readability and comprehension. So they should be split as several statements and stored the intermediate results in temporary variable.</p>
<p>Examples:</p>
<pre class="c++"><code>int NestInConditional = (condition1 ? true1 : false1) ? true2 : false2;
int NestInTrue = condition1 ? (condition2 ? true1 : false1) : false2;
int NestInFalse = condition1 ? true1 : condition2 ? true2 : false1;</code></pre>
<p>This check implements part of <a href="https://www.autosar.org/fileadmin/standards/R22-11/AP/AUTOSAR_RS_CPP14Guidelines.pdf">AUTOSAR C++14 Rule A5-16-1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/avoid-nested-conditional-operator.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-avoid-return-with-void-value</key>
    <name>readability-avoid-return-with-void-value</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-avoid-return-with-void-value</p>
</div>
<h1 id="readability-avoid-return-with-void-value">readability-avoid-return-with-void-value</h1>
<p>Finds return statements with <code>void</code> values used within functions with <code>void</code> result types.</p>
<p>A function with a <code>void</code> return type is intended to perform a task without producing a return value. Return statements with expressions could lead to confusion and may miscommunicate the function's intended behavior.</p>
<p>Example:</p>
<pre class=""><code>void g();
void f() {
    // ...
    return g();
}</code></pre>
<p>In a long function body, the <code>return</code> statement suggests that the function returns a value. However, <code>return g();</code> is a combination of two statements that should be written as</p>
<pre class=""><code>g();
return;</code></pre>
<p>to make clear that <code>g()</code> is called and immediately afterwards the function returns (nothing).</p>
<p>In C, the same issue is detected by the compiler if the <code>-Wpedantic</code> mode is enabled.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>The value <span class="title-ref">false</span> specifies that return statements expanded from macros are not checked. The default value is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>StrictMode</p>
<p>The value <span class="title-ref">false</span> specifies that a direct return statement shall be excluded from the analysis if it is the only statement not contained in a block like <code>if (cond) return g();</code>. The default value is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/avoid-return-with-void-value.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-avoid-unconditional-preprocessor-if</key>
    <name>readability-avoid-unconditional-preprocessor-if</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-avoid-unconditional-preprocessor-if</p>
</div>
<h1 id="readability-avoid-unconditional-preprocessor-if">readability-avoid-unconditional-preprocessor-if</h1>
<p>Finds code blocks that are constantly enabled or disabled in preprocessor directives by analyzing <code>#if</code> conditions, such as <code>#if 0</code> and <code>#if 1</code>, etc.</p>
<pre class="c++"><code>#if 0
    // some disabled code
#endif

#if 1
   // some enabled code that can be disabled manually
#endif</code></pre>
<p>Unconditional preprocessor directives, such as <code>#if 0</code> for disabled code and <code>#if 1</code> for enabled code, can lead to dead code and always enabled code, respectively. Dead code can make understanding the codebase more difficult, hinder readability, and may be a sign of unfinished functionality or abandoned features. This can cause maintenance issues, confusion for future developers, and potential compilation problems.</p>
<p>As a solution for both cases, consider using preprocessor macros or defines, like <code>#ifdef DEBUGGING_ENABLED</code>, to control code enabling or disabling. This approach provides better coordination and flexibility when working with different parts of the codebase. Alternatively, you can comment out the entire code using <code>/* */</code> block comments and add a hint, such as <code>@todo</code>, to indicate future actions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/avoid-unconditional-preprocessor-if.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-braces-around-statements</key>
    <name>readability-braces-around-statements</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-braces-around-statements</p>
</div>
<h1 id="readability-braces-around-statements">readability-braces-around-statements</h1>
<p><span class="title-ref">google-readability-braces-around-statements</span> redirects here as an alias for this check.</p>
<p>Checks that bodies of <code>if</code> statements and loops (<code>for</code>, <code>do while</code>, and <code>while</code>) are inside braces.</p>
<p>Before:</p>
<pre class="c++"><code>if (condition)
  statement;</code></pre>
<p>After:</p>
<pre class="c++"><code>if (condition) {
  statement;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ShortStatementLines</p>
<p>Defines the minimal number of lines that the statement should have in order to trigger this check.</p>
<p>The number of lines is counted from the end of condition or initial keyword (<code>do</code>/<code>else</code>) until the last line of the inner statement. Default value <span class="title-ref">0</span> means that braces will be added to all statements (not having them already).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/braces-around-statements.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-const-return-type</key>
    <name>readability-const-return-type</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-const-return-type</p>
</div>
<h1 id="readability-const-return-type">readability-const-return-type</h1>
<p>Checks for functions with a <code>const</code>-qualified return type and recommends removal of the <code>const</code> keyword. Such use of <span class="title-ref">const</span> is usually superfluous, and can prevent valuable compiler optimizations. Does not (yet) fix trailing return types.</p>
<p>Examples:</p>
<pre class="c++"><code>const int foo();
const Clazz foo();
Clazz *const foo();</code></pre>
<p>Note that this applies strictly to top-level qualification, which excludes pointers or references to const values. For example, these are fine:</p>
<pre class="c++"><code>const int* foo();
const int&amp; foo();
const Clazz* foo();</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/const-return-type.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-container-contains</key>
    <name>readability-container-contains</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-container-contains</p>
</div>
<h1 id="readability-container-contains">readability-container-contains</h1>
<p>Finds usages of <code>container.count()</code> and <code>container.find() == container.end()</code> which should be replaced by a call to the <code>container.contains()</code> method introduced in C++ 20.</p>
<p>Whether an element is contained inside a container should be checked with <code>contains</code> instead of <code>count</code>/<code>find</code> because <code>contains</code> conveys the intent more clearly. Furthermore, for containers which permit multiple entries per key (<code>multimap</code>, <code>multiset</code>, ...), <code>contains</code> is more efficient than <code>count</code> because <code>count</code> has to do unnecessary additional work.</p>
<p>Examples:</p>
<table>
<thead>
<tr class="header">
<th>Initial expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>myMap.find(x) == myMap.end()</code></td>
<td><code>!myMap.contains(x)</code></td>
</tr>
<tr class="even">
<td><code>myMap.find(x) != myMap.end()</code></td>
<td><code>myMap.contains(x)</code></td>
</tr>
<tr class="odd">
<td><code>if (myMap.count(x))</code></td>
<td><code>if (myMap.contains(x))</code></td>
</tr>
<tr class="even">
<td><code>bool exists = myMap.count(x)</code></td>
<td><code>bool exists = myMap.contains(x)</code></td>
</tr>
<tr class="odd">
<td><code>bool exists = myMap.count(x) &gt; 0</code></td>
<td><code>bool exists = myMap.contains(x)</code></td>
</tr>
<tr class="even">
<td><code>bool exists = myMap.count(x) &gt;= 1</code></td>
<td><code>bool exists = myMap.contains(x)</code></td>
</tr>
<tr class="odd">
<td><code>bool missing = myMap.count(x) == 0</code></td>
<td><code>bool missing = !myMap.contains(x)</code></td>
</tr>
</tbody>
</table>
<p>This check applies to <code>std::set</code>, <code>std::unordered_set</code>, <code>std::map</code>, <code>std::unordered_map</code> and the corresponding multi-key variants. It is only active for C++20 and later, as the <code>contains</code> method was only added in C++20.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/container-contains.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-container-data-pointer</key>
    <name>readability-container-data-pointer</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-container-data-pointer</p>
</div>
<h1 id="readability-container-data-pointer">readability-container-data-pointer</h1>
<p>Finds cases where code could use <code>data()</code> rather than the address of the element at index 0 in a container. This pattern is commonly used to materialize a pointer to the backing data of a container. <code>std::vector</code> and <code>std::string</code> provide a <code>data()</code> accessor to retrieve the data pointer which should be preferred.</p>
<p>This also ensures that in the case that the container is empty, the data pointer access does not perform an errant memory access.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredContainers</p>
<p>Semicolon-separated list of containers regexp for which this check won't be enforced. Default is <span class="title-ref">empty</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/container-data-pointer.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-container-size-empty</key>
    <name>readability-container-size-empty</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-container-size-empty</p>
</div>
<h1 id="readability-container-size-empty">readability-container-size-empty</h1>
<p>Checks whether a call to the <code>size()</code>/<code>length()</code> method can be replaced with a call to <code>empty()</code>.</p>
<p>The emptiness of a container should be checked using the <code>empty()</code> method instead of the <code>size()</code>/<code>length()</code> method. It is not guaranteed that <code>size()</code>/<code>length()</code> is a constant-time function, and it is generally more efficient and also shows clearer intent to use <code>empty()</code>. Furthermore some containers may implement the <code>empty()</code> method but not implement the <code>size()</code> or <code>length()</code> method. Using <code>empty()</code> whenever possible makes it easier to switch to another container in the future.</p>
<p>The check issues warning if a container has <code>empty()</code> and <code>size()</code> or <code>length()</code> methods matching following signatures:</p>
<pre class="c++"><code>size_type size() const;
size_type length() const;
bool empty() const;</code></pre>
<p><span class="title-ref">size_type</span> can be any kind of integer type.</p>
<div class="option">
<p>ExcludedComparisonTypes</p>
<p>A semicolon-separated list of class names for which the check will ignore comparisons of objects with default-constructed objects of the same type. If a class is listed here, the check will not suggest using <code>empty()</code> instead of such comparisons for objects of that class. Default value is: <span class="title-ref">::std::array</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/container-size-empty.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-convert-member-functions-to-static</key>
    <name>readability-convert-member-functions-to-static</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-convert-member-functions-to-static</p>
</div>
<h1 id="readability-convert-member-functions-to-static">readability-convert-member-functions-to-static</h1>
<p>Finds non-static member functions that can be made <code>static</code> because the functions don't use <code>this</code>.</p>
<p>After applying modifications as suggested by the check, running the check again might find more opportunities to mark member functions <code>static</code>.</p>
<p>After making a member function <code>static</code>, you might want to run the check <code class="interpreted-text" role="doc">readability-static-accessed-through-instance &lt;../readability/static-accessed-through-instance&gt;</code> to replace calls like <code>Instance.method()</code> by <code>Class::method()</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/convert-member-functions-to-static.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-delete-null-pointer</key>
    <name>readability-delete-null-pointer</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-delete-null-pointer</p>
</div>
<h1 id="readability-delete-null-pointer">readability-delete-null-pointer</h1>
<p>Checks the <code>if</code> statements where a pointer's existence is checked and then deletes the pointer. The check is unnecessary as deleting a null pointer has no effect.</p>
<pre class="c++"><code>int *p;
if (p)
  delete p;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/delete-null-pointer.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-duplicate-include</key>
    <name>readability-duplicate-include</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-duplicate-include</p>
</div>
<h1 id="readability-duplicate-include">readability-duplicate-include</h1>
<p>Looks for duplicate includes and removes them. The check maintains a list of included files and looks for duplicates. If a macro is defined or undefined then the list of included files is cleared.</p>
<p>Examples:</p>
<pre class="c++"><code>#include &lt;memory&gt;
#include &lt;vector&gt;
#include &lt;memory&gt;</code></pre>
<p>becomes</p>
<pre class="c++"><code>#include &lt;memory&gt;
#include &lt;vector&gt;</code></pre>
<p>Because of the intervening macro definitions, this code remains unchanged:</p>
<pre class="c++"><code>#undef NDEBUG
#include &quot;assertion.h&quot;
// ...code with assertions enabled

#define NDEBUG
#include &quot;assertion.h&quot;
// ...code with assertions disabled</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/duplicate-include.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-else-after-return</key>
    <name>readability-else-after-return</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-else-after-return</p>
</div>
<h1 id="readability-else-after-return">readability-else-after-return</h1>
<p><a href="https://llvm.org/docs/CodingStandards.html">LLVM Coding Standards</a> advises to reduce indentation where possible and where it makes understanding code easier. Early exit is one of the suggested enforcements of that. Please do not use <code>else</code> or <code>else if</code> after something that interrupts control flow - like <code>return</code>, <code>break</code>, <code>continue</code>, <code>throw</code>.</p>
<p>The following piece of code illustrates how the check works. This piece of code:</p>
<pre class="c++"><code>void foo(int Value) {
  int Local = 0;
  for (int i = 0; i &lt; 42; i++) {
    if (Value == 1) {
      return;
    } else {
      Local++;
    }

    if (Value == 2)
      continue;
    else
      Local++;

    if (Value == 3) {
      throw 42;
    } else {
      Local++;
    }
  }
}</code></pre>
<p>Would be transformed into:</p>
<pre class="c++"><code>void foo(int Value) {
  int Local = 0;
  for (int i = 0; i &lt; 42; i++) {
    if (Value == 1) {
      return;
    }
    Local++;

    if (Value == 2)
      continue;
    Local++;

    if (Value == 3) {
      throw 42;
    }
    Local++;
  }
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnUnfixable</p>
<p>When <span class="title-ref">true</span>, emit a warning for cases where the check can't output a Fix-It. These can occur with declarations inside the <code>else</code> branch that would have an extended lifetime if the <code>else</code> branch was removed. Default value is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>WarnOnConditionVariables</p>
<p>When <span class="title-ref">true</span>, the check will attempt to refactor a variable defined inside the condition of the <code>if</code> statement that is used in the <code>else</code> branch defining them just before the <code>if</code> statement. This can only be done if the <code>if</code> statement is the last statement in its parent's scope. Default value is <span class="title-ref">true</span>.</p>
</div>
<h2 id="llvm-alias">LLVM alias</h2>
<p>There is an alias of this check called llvm-else-after-return. In that version the options <code class="interpreted-text" role="option">WarnOnUnfixable</code> and <code class="interpreted-text" role="option">WarnOnConditionVariables</code> are both set to <span class="title-ref">false</span> by default.</p>
<p>This check helps to enforce this <a href="https://llvm.org/docs/CodingStandards.html#don-t-use-else-after-a-return">LLVM Coding Standards recommendation</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/else-after-return.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-function-cognitive-complexity</key>
    <name>readability-function-cognitive-complexity</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-function-cognitive-complexity</p>
</div>
<h1 id="readability-function-cognitive-complexity">readability-function-cognitive-complexity</h1>
<p>Checks function Cognitive Complexity metric.</p>
<p>The metric is implemented as per the <a href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf">COGNITIVE COMPLEXITY by SonarSource</a> specification version 1.2 (19 April 2017).</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Threshold</p>
<p>Flag functions with Cognitive Complexity exceeding this number. The default is <span class="title-ref">25</span>.</p>
</div>
<div class="option">
<p>DescribeBasicIncrements</p>
<p>If set to <span class="title-ref">true</span>, then for each function exceeding the complexity threshold the check will issue additional diagnostics on every piece of code (loop, <span class="title-ref">if</span> statement, etc.) which contributes to that complexity. See also the examples below. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will ignore code inside macros. Note, that also any macro arguments are ignored, even if they should count to the complexity. As this might change in the future, this option isn't guaranteed to be forward-compatible. Default is <span class="title-ref">false</span>.</p>
</div>
<h2 id="building-blocks">Building blocks</h2>
<p>There are three basic building blocks of a Cognitive Complexity metric:</p>
<h3 id="increment">Increment</h3>
<p>The following structures increase the function's Cognitive Complexity metric (by <span class="title-ref">1</span>):</p>
<ul>
<li><p>Conditional operators:</p>
<blockquote>
<ul>
<li><code>if()</code></li>
<li><code>else if()</code></li>
<li><code>else</code></li>
<li><code>cond ? true : false</code></li>
</ul>
</blockquote></li>
<li><p><code>switch()</code></p></li>
<li><p>Loops:</p>
<blockquote>
<ul>
<li><code>for()</code></li>
<li>C++11 range-based <code>for()</code></li>
<li><code>while()</code></li>
<li><code>do while()</code></li>
</ul>
</blockquote></li>
<li><p><code>catch ()</code></p></li>
<li><p><code>goto LABEL</code>, <code>goto *(&amp;&amp;LABEL))</code>,</p></li>
<li><p>sequences of binary logical operators:</p>
<blockquote>
<ul>
<li><code>boolean1 || boolean2</code></li>
<li><code>boolean1 &amp;&amp; boolean2</code></li>
</ul>
</blockquote></li>
</ul>
<h3 id="nesting-level">Nesting level</h3>
<p>While by itself the nesting level does not change the function's Cognitive Complexity metric, it is tracked, and is used by the next, third building block. The following structures increase the nesting level (by <span class="title-ref">1</span>):</p>
<ul>
<li><p>Conditional operators:</p>
<blockquote>
<ul>
<li><code>if()</code></li>
<li><code>else if()</code></li>
<li><code>else</code></li>
<li><code>cond ? true : false</code></li>
</ul>
</blockquote></li>
<li><p><code>switch()</code></p></li>
<li><p>Loops:</p>
<blockquote>
<ul>
<li><code>for()</code></li>
<li>C++11 range-based <code>for()</code></li>
<li><code>while()</code></li>
<li><code>do while()</code></li>
</ul>
</blockquote></li>
<li><p><code>catch ()</code></p></li>
<li><p>Nested functions:</p>
<blockquote>
<ul>
<li>C++11 Lambda</li>
<li>Nested <code>class</code></li>
<li>Nested <code>struct</code></li>
</ul>
</blockquote></li>
<li><p>GNU statement expression</p></li>
<li><p>Apple Block Declaration</p></li>
</ul>
<h3 id="nesting-increment">Nesting increment</h3>
<p>This is where the previous basic building block, <a href="#nesting-level">Nesting level</a>, matters. The following structures increase the function's Cognitive Complexity metric by the current <a href="#nesting-level">Nesting level</a>:</p>
<ul>
<li><p>Conditional operators:</p>
<blockquote>
<ul>
<li><code>if()</code></li>
<li><code>cond ? true : false</code></li>
</ul>
</blockquote></li>
<li><p><code>switch()</code></p></li>
<li><p>Loops:</p>
<blockquote>
<ul>
<li><code>for()</code></li>
<li>C++11 range-based <code>for()</code></li>
<li><code>while()</code></li>
<li><code>do while()</code></li>
</ul>
</blockquote></li>
<li><p><code>catch ()</code></p></li>
</ul>
<h2 id="examples">Examples</h2>
<p>The simplest case. This function has Cognitive Complexity of <span class="title-ref">0</span>.</p>
<pre class="c++"><code>void function0() {}</code></pre>
<p>Slightly better example. This function has Cognitive Complexity of <span class="title-ref">1</span>.</p>
<pre class="c++"><code>int function1(bool var) {
  if(var) // +1, nesting level +1
    return 42;
  return 0;
}</code></pre>
<p>Full example. This function has Cognitive Complexity of <span class="title-ref">3</span>.</p>
<pre class="c++"><code>int function3(bool var1, bool var2) {
  if(var1) { // +1, nesting level +1
    if(var2)  // +2 (1 + current nesting level of 1), nesting level +1
      return 42;
  }

  return 0;
}</code></pre>
<p>In the last example, the check will flag <span class="title-ref">function3</span> if the option Threshold is set to <span class="title-ref">2</span> or smaller. If the option DescribeBasicIncrements is set to <span class="title-ref">true</span>, it will additionally flag the two <span class="title-ref">if</span> statements with the amounts by which they increase to the complexity of the function and the current nesting level.</p>
<h2 id="limitations">Limitations</h2>
<dl>
<dt>The metric is implemented with two notable exceptions:</dt>
<dd><ul>
<li><span class="title-ref">preprocessor conditionals</span> (<code>#ifdef</code>, <code>#if</code>, <code>#elif</code>, <code>#else</code>, <code>#endif</code>) are not accounted for.</li>
<li><span class="title-ref">each method in a recursion cycle</span> is not accounted for. It can't be fully implemented, because cross-translational-unit analysis would be needed, which is currently not possible in clang-tidy.</li>
</ul>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/function-cognitive-complexity.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-function-size</key>
    <name>readability-function-size</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-function-size</p>
</div>
<h1 id="readability-function-size">readability-function-size</h1>
<p><span class="title-ref">google-readability-function-size</span> redirects here as an alias for this check.</p>
<p>Checks for large functions based on various metrics.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>LineThreshold</p>
<p>Flag functions exceeding this number of lines. The default is <span class="title-ref">none</span> (ignore the number of lines).</p>
</div>
<div class="option">
<p>StatementThreshold</p>
<p>Flag functions exceeding this number of statements. This may differ significantly from the number of lines for macro-heavy code. The default is <span class="title-ref">800</span>.</p>
</div>
<div class="option">
<p>BranchThreshold</p>
<p>Flag functions exceeding this number of control statements. The default is <span class="title-ref">none</span> (ignore the number of branches).</p>
</div>
<div class="option">
<p>ParameterThreshold</p>
<p>Flag functions that exceed a specified number of parameters. The default is <span class="title-ref">none</span> (ignore the number of parameters).</p>
</div>
<div class="option">
<p>NestingThreshold</p>
<p>Flag compound statements which create next nesting level after <span class="title-ref">NestingThreshold</span>. This may differ significantly from the expected value for macro-heavy code. The default is <span class="title-ref">none</span> (ignore the nesting level).</p>
</div>
<div class="option">
<p>VariableThreshold</p>
<p>Flag functions exceeding this number of variables declared in the body. The default is <span class="title-ref">none</span> (ignore the number of variables). Please note that function parameters and variables declared in lambdas, GNU Statement Expressions, and nested class inline functions are not counted.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/function-size.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-identifier-length</key>
    <name>readability-identifier-length</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-identifier-length</p>
</div>
<h1 id="readability-identifier-length">readability-identifier-length</h1>
<p>This check finds variables and function parameters whose length are too short. The desired name length is configurable.</p>
<p>Special cases are supported for loop counters and for exception variable names.</p>
<h2 id="options">Options</h2>
<p>The following options are described below:</p>
<blockquote>
<ul>
<li><code class="interpreted-text" role="option">MinimumVariableNameLength</code>, <code class="interpreted-text" role="option">IgnoredVariableNames</code></li>
<li><code class="interpreted-text" role="option">MinimumParameterNameLength</code>, <code class="interpreted-text" role="option">IgnoredParameterNames</code></li>
<li><code class="interpreted-text" role="option">MinimumLoopCounterNameLength</code>, <code class="interpreted-text" role="option">IgnoredLoopCounterNames</code></li>
<li><code class="interpreted-text" role="option">MinimumExceptionNameLength</code>, <code class="interpreted-text" role="option">IgnoredExceptionVariableNames</code></li>
</ul>
</blockquote>
<div class="option">
<p>MinimumVariableNameLength</p>
<p>All variables (other than loop counter, exception names and function parameters) are expected to have at least a length of <span class="title-ref">MinimumVariableNameLength</span> (default is <span class="title-ref">3</span>). Setting it to <span class="title-ref">0</span> or <span class="title-ref">1</span> disables the check entirely.</p>
<pre class="c++"><code>int doubler(int x)   // warns that x is too short
{
   return 2 * x;
}</code></pre>
<p>This check does not have any fix suggestions in the general case since variable names have semantic value.</p>
</div>
<div class="option">
<p>IgnoredVariableNames</p>
<p>Specifies a regular expression for variable names that are to be ignored. The default value is empty, thus no names are ignored.</p>
</div>
<div class="option">
<p>MinimumParameterNameLength</p>
<p>All function parameter names are expected to have a length of at least <span class="title-ref">MinimumParameterNameLength</span> (default is <span class="title-ref">3</span>). Setting it to <span class="title-ref">0</span> or <span class="title-ref">1</span> disables the check entirely.</p>
<pre class="c++"><code>int i = 42;    // warns that &#39;i&#39; is too short</code></pre>
<p>This check does not have any fix suggestions in the general case since variable names have semantic value.</p>
</div>
<div class="option">
<p>IgnoredParameterNames</p>
<p>Specifies a regular expression for parameters that are to be ignored. The default value is <span class="title-ref">^[n]$</span> for historical reasons.</p>
</div>
<div class="option">
<p>MinimumLoopCounterNameLength</p>
<p>Loop counter variables are expected to have a length of at least <span class="title-ref">MinimumLoopCounterNameLength</span> characters (default is <span class="title-ref">2</span>). Setting it to <span class="title-ref">0</span> or <span class="title-ref">1</span> disables the check entirely.</p>
<pre class="c++"><code>// This warns that &#39;q&#39; is too short.
for (int q = 0; q &lt; size; ++ q) {
   // ...
}</code></pre>
</div>
<div class="option">
<p>IgnoredLoopCounterNames</p>
<p>Specifies a regular expression for counter names that are to be ignored. The default value is <span class="title-ref">^[ijk_]$</span>; the first three symbols for historical reasons and the last one since it is frequently used as a "don't care" value, specifically in tools such as Google Benchmark.</p>
<pre class="c++"><code>// This does not warn by default, for historical reasons.
for (int i = 0; i &lt; size; ++ i) {
    // ...
}</code></pre>
</div>
<div class="option">
<p>MinimumExceptionNameLength</p>
<p>Exception clause variables are expected to have a length of at least <span class="title-ref">MinimumExceptionNameLength</span> (default is <span class="title-ref">2</span>). Setting it to <span class="title-ref">0</span> or <span class="title-ref">1</span> disables the check entirely.</p>
<pre class="c++"><code>try {
    // ...
}
// This warns that &#39;e&#39; is too short.
catch (const std::exception&amp; x) {
    // ...
}</code></pre>
</div>
<div class="option">
<p>IgnoredExceptionVariableNames</p>
<p>Specifies a regular expression for exception variable names that are to be ignored. The default value is <span class="title-ref">^[e]$</span> mainly for historical reasons.</p>
<pre class="c++"><code>try {
    // ...
}
// This does not warn by default, for historical reasons.
catch (const std::exception&amp; e) {
    // ...
}</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-length.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-identifier-naming</key>
    <name>readability-identifier-naming</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-identifier-naming</p>
</div>
<h1 id="readability-identifier-naming">readability-identifier-naming</h1>
<p>Checks for identifiers naming style mismatch.</p>
<p>This check will try to enforce coding guidelines on the identifiers naming. It supports one of the following casing types and tries to convert from one to another if a mismatch is detected</p>
<p>Casing types include:</p>
<blockquote>
<ul>
<li><code>lower_case</code>,</li>
<li><code>UPPER_CASE</code>,</li>
<li><code>camelBack</code>,</li>
<li><code>CamelCase</code>,</li>
<li><code>camel_Snake_Back</code>,</li>
<li><code>Camel_Snake_Case</code>,</li>
<li><code>aNy_CasE</code>,</li>
<li><code>Leading_upper_snake_case</code>.</li>
</ul>
</blockquote>
<p>It also supports a fixed prefix and suffix that will be prepended or appended to the identifiers, regardless of the casing.</p>
<p>Many configuration options are available, in order to be able to create different rules for different kinds of identifiers. In general, the rules are falling back to a more generic rule if the specific case is not configured.</p>
<p>The naming of virtual methods is reported where they occur in the base class, but not where they are overridden, as it can't be fixed locally there. This also applies for pseudo-override patterns like CRTP.</p>
<p><code>Leading_upper_snake_case</code> is a naming convention where the first word is capitalized followed by lower case word(s) seperated by underscore(s) '_'. Examples include: Cap_snake_case, Cobra_case, Foo_bar_baz, and Master_copy_8gb.</p>
<h2 id="options">Options</h2>
<p>The following options are described below:</p>
<blockquote>
<ul>
<li><code class="interpreted-text" role="option">AbstractClassCase</code>, <code class="interpreted-text" role="option">AbstractClassPrefix</code>, <code class="interpreted-text" role="option">AbstractClassSuffix</code>, <code class="interpreted-text" role="option">AbstractClassIgnoredRegexp</code>, <code class="interpreted-text" role="option">AbstractClassHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">AggressiveDependentMemberLookup</code></li>
<li><code class="interpreted-text" role="option">CheckAnonFieldInParent</code></li>
<li><code class="interpreted-text" role="option">ClassCase</code>, <code class="interpreted-text" role="option">ClassPrefix</code>, <code class="interpreted-text" role="option">ClassSuffix</code>, <code class="interpreted-text" role="option">ClassIgnoredRegexp</code>, <code class="interpreted-text" role="option">ClassHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ClassConstantCase</code>, <code class="interpreted-text" role="option">ClassConstantPrefix</code>, <code class="interpreted-text" role="option">ClassConstantSuffix</code>, <code class="interpreted-text" role="option">ClassConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">ClassConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ClassMemberCase</code>, <code class="interpreted-text" role="option">ClassMemberPrefix</code>, <code class="interpreted-text" role="option">ClassMemberSuffix</code>, <code class="interpreted-text" role="option">ClassMemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">ClassMemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ClassMethodCase</code>, <code class="interpreted-text" role="option">ClassMethodPrefix</code>, <code class="interpreted-text" role="option">ClassMethodSuffix</code>, <code class="interpreted-text" role="option">ClassMethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ConceptCase</code>, <code class="interpreted-text" role="option">ConceptPrefix</code>, <code class="interpreted-text" role="option">ConceptSuffix</code>, <code class="interpreted-text" role="option">ConceptIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ConstantCase</code>, <code class="interpreted-text" role="option">ConstantPrefix</code>, <code class="interpreted-text" role="option">ConstantSuffix</code>, <code class="interpreted-text" role="option">ConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">ConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ConstantMemberCase</code>, <code class="interpreted-text" role="option">ConstantMemberPrefix</code>, <code class="interpreted-text" role="option">ConstantMemberSuffix</code>, <code class="interpreted-text" role="option">ConstantMemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">ConstantMemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ConstantParameterCase</code>, <code class="interpreted-text" role="option">ConstantParameterPrefix</code>, <code class="interpreted-text" role="option">ConstantParameterSuffix</code>, <code class="interpreted-text" role="option">ConstantParameterIgnoredRegexp</code>, <code class="interpreted-text" role="option">ConstantParameterHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ConstantPointerParameterCase</code>, <code class="interpreted-text" role="option">ConstantPointerParameterPrefix</code>, <code class="interpreted-text" role="option">ConstantPointerParameterSuffix</code>, <code class="interpreted-text" role="option">ConstantPointerParameterIgnoredRegexp</code>, <code class="interpreted-text" role="option">ConstantPointerParameterHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ConstexprFunctionCase</code>, <code class="interpreted-text" role="option">ConstexprFunctionPrefix</code>, <code class="interpreted-text" role="option">ConstexprFunctionSuffix</code>, <code class="interpreted-text" role="option">ConstexprFunctionIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ConstexprMethodCase</code>, <code class="interpreted-text" role="option">ConstexprMethodPrefix</code>, <code class="interpreted-text" role="option">ConstexprMethodSuffix</code>, <code class="interpreted-text" role="option">ConstexprMethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ConstexprVariableCase</code>, <code class="interpreted-text" role="option">ConstexprVariablePrefix</code>, <code class="interpreted-text" role="option">ConstexprVariableSuffix</code>, <code class="interpreted-text" role="option">ConstexprVariableIgnoredRegexp</code>, <code class="interpreted-text" role="option">ConstexprVariableHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">EnumCase</code>, <code class="interpreted-text" role="option">EnumPrefix</code>, <code class="interpreted-text" role="option">EnumSuffix</code>, <code class="interpreted-text" role="option">EnumIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">EnumConstantCase</code>, <code class="interpreted-text" role="option">EnumConstantPrefix</code>, <code class="interpreted-text" role="option">EnumConstantSuffix</code>, <code class="interpreted-text" role="option">EnumConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">EnumConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">FunctionCase</code>, <code class="interpreted-text" role="option">FunctionPrefix</code>, <code class="interpreted-text" role="option">FunctionSuffix</code>, <code class="interpreted-text" role="option">FunctionIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">GetConfigPerFile</code></li>
<li><code class="interpreted-text" role="option">GlobalConstantCase</code>, <code class="interpreted-text" role="option">GlobalConstantPrefix</code>, <code class="interpreted-text" role="option">GlobalConstantSuffix</code>, <code class="interpreted-text" role="option">GlobalConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">GlobalConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">GlobalConstantPointerCase</code>, <code class="interpreted-text" role="option">GlobalConstantPointerPrefix</code>, <code class="interpreted-text" role="option">GlobalConstantPointerSuffix</code>, <code class="interpreted-text" role="option">GlobalConstantPointerIgnoredRegexp</code>, <code class="interpreted-text" role="option">GlobalConstantPointerHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">GlobalFunctionCase</code>, <code class="interpreted-text" role="option">GlobalFunctionPrefix</code>, <code class="interpreted-text" role="option">GlobalFunctionSuffix</code>, <code class="interpreted-text" role="option">GlobalFunctionIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">GlobalPointerCase</code>, <code class="interpreted-text" role="option">GlobalPointerPrefix</code>, <code class="interpreted-text" role="option">GlobalPointerSuffix</code>, <code class="interpreted-text" role="option">GlobalPointerIgnoredRegexp</code>, <code class="interpreted-text" role="option">GlobalPointerHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">GlobalVariableCase</code>, <code class="interpreted-text" role="option">GlobalVariablePrefix</code>, <code class="interpreted-text" role="option">GlobalVariableSuffix</code>, <code class="interpreted-text" role="option">GlobalVariableIgnoredRegexp</code>, <code class="interpreted-text" role="option">GlobalVariableHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">IgnoreMainLikeFunctions</code></li>
<li><code class="interpreted-text" role="option">InlineNamespaceCase</code>, <code class="interpreted-text" role="option">InlineNamespacePrefix</code>, <code class="interpreted-text" role="option">InlineNamespaceSuffix</code>, <code class="interpreted-text" role="option">InlineNamespaceIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">LocalConstantCase</code>, <code class="interpreted-text" role="option">LocalConstantPrefix</code>, <code class="interpreted-text" role="option">LocalConstantSuffix</code>, <code class="interpreted-text" role="option">LocalConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">LocalConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">LocalConstantPointerCase</code>, <code class="interpreted-text" role="option">LocalConstantPointerPrefix</code>, <code class="interpreted-text" role="option">LocalConstantPointerSuffix</code>, <code class="interpreted-text" role="option">LocalConstantPointerIgnoredRegexp</code>, <code class="interpreted-text" role="option">LocalConstantPointerHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">LocalPointerCase</code>, <code class="interpreted-text" role="option">LocalPointerPrefix</code>, <code class="interpreted-text" role="option">LocalPointerSuffix</code>, <code class="interpreted-text" role="option">LocalPointerIgnoredRegexp</code>, <code class="interpreted-text" role="option">LocalPointerHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">LocalVariableCase</code>, <code class="interpreted-text" role="option">LocalVariablePrefix</code>, <code class="interpreted-text" role="option">LocalVariableSuffix</code>, <code class="interpreted-text" role="option">LocalVariableIgnoredRegexp</code>, <code class="interpreted-text" role="option">LocalVariableHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">MacroDefinitionCase</code>, <code class="interpreted-text" role="option">MacroDefinitionPrefix</code>, <code class="interpreted-text" role="option">MacroDefinitionSuffix</code>, <code class="interpreted-text" role="option">MacroDefinitionIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">MemberCase</code>, <code class="interpreted-text" role="option">MemberPrefix</code>, <code class="interpreted-text" role="option">MemberSuffix</code>, <code class="interpreted-text" role="option">MemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">MemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">MethodCase</code>, <code class="interpreted-text" role="option">MethodPrefix</code>, <code class="interpreted-text" role="option">MethodSuffix</code>, <code class="interpreted-text" role="option">MethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">NamespaceCase</code>, <code class="interpreted-text" role="option">NamespacePrefix</code>, <code class="interpreted-text" role="option">NamespaceSuffix</code>, <code class="interpreted-text" role="option">NamespaceIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ParameterCase</code>, <code class="interpreted-text" role="option">ParameterPrefix</code>, <code class="interpreted-text" role="option">ParameterSuffix</code>, <code class="interpreted-text" role="option">ParameterIgnoredRegexp</code>, <code class="interpreted-text" role="option">ParameterHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ParameterPackCase</code>, <code class="interpreted-text" role="option">ParameterPackPrefix</code>, <code class="interpreted-text" role="option">ParameterPackSuffix</code>, <code class="interpreted-text" role="option">ParameterPackIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">PointerParameterCase</code>, <code class="interpreted-text" role="option">PointerParameterPrefix</code>, <code class="interpreted-text" role="option">PointerParameterSuffix</code>, <code class="interpreted-text" role="option">PointerParameterIgnoredRegexp</code>, <code class="interpreted-text" role="option">PointerParameterHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">PrivateMemberCase</code>, <code class="interpreted-text" role="option">PrivateMemberPrefix</code>, <code class="interpreted-text" role="option">PrivateMemberSuffix</code>, <code class="interpreted-text" role="option">PrivateMemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">PrivateMemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">PrivateMethodCase</code>, <code class="interpreted-text" role="option">PrivateMethodPrefix</code>, <code class="interpreted-text" role="option">PrivateMethodSuffix</code>, <code class="interpreted-text" role="option">PrivateMethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ProtectedMemberCase</code>, <code class="interpreted-text" role="option">ProtectedMemberPrefix</code>, <code class="interpreted-text" role="option">ProtectedMemberSuffix</code>, <code class="interpreted-text" role="option">ProtectedMemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">ProtectedMemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">ProtectedMethodCase</code>, <code class="interpreted-text" role="option">ProtectedMethodPrefix</code>, <code class="interpreted-text" role="option">ProtectedMethodSuffix</code>, <code class="interpreted-text" role="option">ProtectedMethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">PublicMemberCase</code>, <code class="interpreted-text" role="option">PublicMemberPrefix</code>, <code class="interpreted-text" role="option">PublicMemberSuffix</code>, <code class="interpreted-text" role="option">PublicMemberIgnoredRegexp</code>, <code class="interpreted-text" role="option">PublicMemberHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">PublicMethodCase</code>, <code class="interpreted-text" role="option">PublicMethodPrefix</code>, <code class="interpreted-text" role="option">PublicMethodSuffix</code>, <code class="interpreted-text" role="option">PublicMethodIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ScopedEnumConstantCase</code>, <code class="interpreted-text" role="option">ScopedEnumConstantPrefix</code>, <code class="interpreted-text" role="option">ScopedEnumConstantSuffix</code>, <code class="interpreted-text" role="option">ScopedEnumConstantIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">StaticConstantCase</code>, <code class="interpreted-text" role="option">StaticConstantPrefix</code>, <code class="interpreted-text" role="option">StaticConstantSuffix</code>, <code class="interpreted-text" role="option">StaticConstantIgnoredRegexp</code>, <code class="interpreted-text" role="option">StaticConstantHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">StaticVariableCase</code>, <code class="interpreted-text" role="option">StaticVariablePrefix</code>, <code class="interpreted-text" role="option">StaticVariableSuffix</code>, <code class="interpreted-text" role="option">StaticVariableIgnoredRegexp</code>, <code class="interpreted-text" role="option">StaticVariableHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">StructCase</code>, <code class="interpreted-text" role="option">StructPrefix</code>, <code class="interpreted-text" role="option">StructSuffix</code>, <code class="interpreted-text" role="option">StructIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">TemplateParameterCase</code>, <code class="interpreted-text" role="option">TemplateParameterPrefix</code>, <code class="interpreted-text" role="option">TemplateParameterSuffix</code>, <code class="interpreted-text" role="option">TemplateParameterIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">TemplateTemplateParameterCase</code>, <code class="interpreted-text" role="option">TemplateTemplateParameterPrefix</code>, <code class="interpreted-text" role="option">TemplateTemplateParameterSuffix</code>, <code class="interpreted-text" role="option">TemplateTemplateParameterIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">TypeAliasCase</code>, <code class="interpreted-text" role="option">TypeAliasPrefix</code>, <code class="interpreted-text" role="option">TypeAliasSuffix</code>, <code class="interpreted-text" role="option">TypeAliasIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">TypedefCase</code>, <code class="interpreted-text" role="option">TypedefPrefix</code>, <code class="interpreted-text" role="option">TypedefSuffix</code>, <code class="interpreted-text" role="option">TypedefIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">TypeTemplateParameterCase</code>, <code class="interpreted-text" role="option">TypeTemplateParameterPrefix</code>, <code class="interpreted-text" role="option">TypeTemplateParameterSuffix</code>, <code class="interpreted-text" role="option">TypeTemplateParameterIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">UnionCase</code>, <code class="interpreted-text" role="option">UnionPrefix</code>, <code class="interpreted-text" role="option">UnionSuffix</code>, <code class="interpreted-text" role="option">UnionIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">ValueTemplateParameterCase</code>, <code class="interpreted-text" role="option">ValueTemplateParameterPrefix</code>, <code class="interpreted-text" role="option">ValueTemplateParameterSuffix</code>, <code class="interpreted-text" role="option">ValueTemplateParameterIgnoredRegexp</code></li>
<li><code class="interpreted-text" role="option">VariableCase</code>, <code class="interpreted-text" role="option">VariablePrefix</code>, <code class="interpreted-text" role="option">VariableSuffix</code>, <code class="interpreted-text" role="option">VariableIgnoredRegexp</code>, <code class="interpreted-text" role="option">VariableHungarianPrefix</code></li>
<li><code class="interpreted-text" role="option">VirtualMethodCase</code>, <code class="interpreted-text" role="option">VirtualMethodPrefix</code>, <code class="interpreted-text" role="option">VirtualMethodSuffix</code>, <code class="interpreted-text" role="option">VirtualMethodIgnoredRegexp</code></li>
</ul>
</blockquote>
<div class="option">
<p>AbstractClassCase</p>
<p>When defined, the check will ensure abstract class names conform to the selected casing.</p>
</div>
<div class="option">
<p>AbstractClassPrefix</p>
<p>When defined, the check will ensure abstract class names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>AbstractClassIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for abstract class names matching this regular expression.</p>
</div>
<div class="option">
<p>AbstractClassSuffix</p>
<p>When defined, the check will ensure abstract class names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>AbstractClassHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>AbstractClassCase of <code>lower_case</code></li>
<li>AbstractClassPrefix of <code>pre_</code></li>
<li>AbstractClassSuffix of <code>_post</code></li>
<li>AbstractClassHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms abstract class names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class ABSTRACT_CLASS {
public:
  ABSTRACT_CLASS();
};</code></pre>
<p>After:</p>
<pre class="c++"><code>class pre_abstract_class_post {
public:
  pre_abstract_class_post();
};</code></pre>
<div class="option">
<p>AggressiveDependentMemberLookup</p>
<p>When set to <span class="title-ref">true</span> the check will look in dependent base classes for dependent member references that need changing. This can lead to errors with template specializations so the default value is <span class="title-ref">false</span>.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ClassMemberCase of <code>lower_case</code></li>
</ul>
</blockquote>
<p>Before:</p>
<pre class="c++"><code>template &lt;typename T&gt;
struct Base {
  T BadNamedMember;
};

template &lt;typename T&gt;
struct Derived : Base&lt;T&gt; {
  void reset() {
    this-&gt;BadNamedMember = 0;
  }
};</code></pre>
<p>After if AggressiveDependentMemberLookup is `false`:</p>
<pre class="c++"><code>template &lt;typename T&gt;
struct Base {
  T bad_named_member;
};

template &lt;typename T&gt;
struct Derived : Base&lt;T&gt; {
  void reset() {
    this-&gt;BadNamedMember = 0;
  }
};</code></pre>
<p>After if AggressiveDependentMemberLookup is `true`:</p>
<pre class="c++"><code>template &lt;typename T&gt;
struct Base {
  T bad_named_member;
};

template &lt;typename T&gt;
struct Derived : Base&lt;T&gt; {
  void reset() {
    this-&gt;bad_named_member = 0;
  }
};</code></pre>
<div class="option">
<p>CheckAnonFieldInParent</p>
<p>When set to <span class="title-ref">true</span>, fields in anonymous records (i.e. anonymous unions and structs) will be treated as names in the enclosing scope rather than public members of the anonymous record for the purpose of name checking.</p>
</div>
<p>For example:</p>
<pre class="c++"><code>class Foo {
private:
  union {
    int iv_;
    float fv_;
  };
};</code></pre>
<p>If <code class="interpreted-text" role="option">CheckAnonFieldInParent</code> is <span class="title-ref">false</span>, you may get warnings that <code>iv_</code> and <code>fv_</code> are not coherent to public member names, because <code>iv_</code> and <code>fv_</code> are public members of the anonymous union. When <code class="interpreted-text" role="option">CheckAnonFieldInParent</code> is <span class="title-ref">true</span>, <code>iv_</code> and <code>fv_</code> will be treated as private data members of <code>Foo</code> for the purpose of name checking and thus no warnings will be emitted.</p>
<div class="option">
<p>ClassCase</p>
<p>When defined, the check will ensure class names conform to the selected casing.</p>
</div>
<div class="option">
<p>ClassPrefix</p>
<p>When defined, the check will ensure class names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for class names matching this regular expression.</p>
</div>
<div class="option">
<p>ClassSuffix</p>
<p>When defined, the check will ensure class names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ClassCase of <code>lower_case</code></li>
<li>ClassPrefix of <code>pre_</code></li>
<li>ClassSuffix of <code>_post</code></li>
<li>ClassHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms class names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class FOO {
public:
  FOO();
  ~FOO();
};</code></pre>
<p>After:</p>
<pre class="c++"><code>class pre_foo_post {
public:
  pre_foo_post();
  ~pre_foo_post();
};</code></pre>
<div class="option">
<p>ClassConstantCase</p>
<p>When defined, the check will ensure class constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>ClassConstantPrefix</p>
<p>When defined, the check will ensure class constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for class constant names matching this regular expression.</p>
</div>
<div class="option">
<p>ClassConstantSuffix</p>
<p>When defined, the check will ensure class constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ClassConstantCase of <code>lower_case</code></li>
<li>ClassConstantPrefix of <code>pre_</code></li>
<li>ClassConstantSuffix of <code>_post</code></li>
<li>ClassConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms class constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class FOO {
public:
  static const int CLASS_CONSTANT;
};</code></pre>
<p>After:</p>
<pre class="c++"><code>class FOO {
public:
  static const int pre_class_constant_post;
};</code></pre>
<div class="option">
<p>ClassMemberCase</p>
<p>When defined, the check will ensure class member names conform to the selected casing.</p>
</div>
<div class="option">
<p>ClassMemberPrefix</p>
<p>When defined, the check will ensure class member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassMemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for class member names matching this regular expression.</p>
</div>
<div class="option">
<p>ClassMemberSuffix</p>
<p>When defined, the check will ensure class member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassMemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ClassMemberCase of <code>lower_case</code></li>
<li>ClassMemberPrefix of <code>pre_</code></li>
<li>ClassMemberSuffix of <code>_post</code></li>
<li>ClassMemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms class member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class FOO {
public:
  static int CLASS_CONSTANT;
};</code></pre>
<p>After:</p>
<pre class="c++"><code>class FOO {
public:
  static int pre_class_constant_post;
};</code></pre>
<div class="option">
<p>ClassMethodCase</p>
<p>When defined, the check will ensure class method names conform to the selected casing.</p>
</div>
<div class="option">
<p>ClassMethodPrefix</p>
<p>When defined, the check will ensure class method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ClassMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for class method names matching this regular expression.</p>
</div>
<div class="option">
<p>ClassMethodSuffix</p>
<p>When defined, the check will ensure class method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ClassMethodCase of <code>lower_case</code></li>
<li>ClassMethodPrefix of <code>pre_</code></li>
<li>ClassMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms class method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class FOO {
public:
  int CLASS_MEMBER();
};</code></pre>
<p>After:</p>
<pre class="c++"><code>class FOO {
public:
  int pre_class_member_post();
};</code></pre>
<div class="option">
<p>ConceptCase</p>
<p>When defined, the check will ensure concept names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConceptPrefix</p>
<p>When defined, the check will ensure concept names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConceptIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for concept names matching this regular expression.</p>
</div>
<div class="option">
<p>ConceptSuffix</p>
<p>When defined, the check will ensure concept names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConceptCase of <code>CamelCase</code></li>
<li>ConceptPrefix of <code>Pre</code></li>
<li>ConceptSuffix of <code>Post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms concept names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template&lt;typename T&gt; concept my_concept = requires (T t) { {t++}; };</code></pre>
<p>After:</p>
<pre class="c++"><code>template&lt;typename T&gt; concept PreMyConceptPost = requires (T t) { {t++}; };</code></pre>
<div class="option">
<p>ConstantCase</p>
<p>When defined, the check will ensure constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstantPrefix</p>
<p>When defined, the check will ensure constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constant names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstantSuffix</p>
<p>When defined, the check will ensure constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstantCase of <code>lower_case</code></li>
<li>ConstantPrefix of <code>pre_</code></li>
<li>ConstantSuffix of <code>_post</code></li>
<li>ConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void function() { unsigned const MyConst_array[] = {1, 2, 3}; }</code></pre>
<p>After:</p>
<pre class="c++"><code>void function() { unsigned const pre_myconst_array_post[] = {1, 2, 3}; }</code></pre>
<div class="option">
<p>ConstantMemberCase</p>
<p>When defined, the check will ensure constant member names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstantMemberPrefix</p>
<p>When defined, the check will ensure constant member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantMemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constant member names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstantMemberSuffix</p>
<p>When defined, the check will ensure constant member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantMemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstantMemberCase of <code>lower_case</code></li>
<li>ConstantMemberPrefix of <code>pre_</code></li>
<li>ConstantMemberSuffix of <code>_post</code></li>
<li>ConstantMemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constant member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
  char const MY_ConstMember_string[4] = &quot;123&quot;;
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
  char const pre_my_constmember_string_post[4] = &quot;123&quot;;
}</code></pre>
<div class="option">
<p>ConstantParameterCase</p>
<p>When defined, the check will ensure constant parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstantParameterPrefix</p>
<p>When defined, the check will ensure constant parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constant parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstantParameterSuffix</p>
<p>When defined, the check will ensure constant parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantParameterHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstantParameterCase of <code>lower_case</code></li>
<li>ConstantParameterPrefix of <code>pre_</code></li>
<li>ConstantParameterSuffix of <code>_post</code></li>
<li>ConstantParameterHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constant parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int PARAMETER_1, int const CONST_parameter);</code></pre>
<p>After:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int PARAMETER_1, int const pre_const_parameter_post);</code></pre>
<div class="option">
<p>ConstantPointerParameterCase</p>
<p>When defined, the check will ensure constant pointer parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstantPointerParameterPrefix</p>
<p>When defined, the check will ensure constant pointer parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantPointerParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constant pointer parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstantPointerParameterSuffix</p>
<p>When defined, the check will ensure constant pointer parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstantPointerParameterHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstantPointerParameterCase of <code>lower_case</code></li>
<li>ConstantPointerParameterPrefix of <code>pre_</code></li>
<li>ConstantPointerParameterSuffix of <code>_post</code></li>
<li>ConstantPointerParameterHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constant pointer parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int const *CONST_parameter);</code></pre>
<p>After:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int const *pre_const_parameter_post);</code></pre>
<div class="option">
<p>ConstexprFunctionCase</p>
<p>When defined, the check will ensure constexpr function names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstexprFunctionPrefix</p>
<p>When defined, the check will ensure constexpr function names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstexprFunctionIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constexpr function names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstexprFunctionSuffix</p>
<p>When defined, the check will ensure constexpr function names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstexprFunctionCase of <code>lower_case</code></li>
<li>ConstexprFunctionPrefix of <code>pre_</code></li>
<li>ConstexprFunctionSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constexpr function names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>constexpr int CE_function() { return 3; }</code></pre>
<p>After:</p>
<pre class="c++"><code>constexpr int pre_ce_function_post() { return 3; }</code></pre>
<div class="option">
<p>ConstexprMethodCase</p>
<p>When defined, the check will ensure constexpr method names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstexprMethodPrefix</p>
<p>When defined, the check will ensure constexpr method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstexprMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constexpr method names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstexprMethodSuffix</p>
<p>When defined, the check will ensure constexpr method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstexprMethodCase of <code>lower_case</code></li>
<li>ConstexprMethodPrefix of <code>pre_</code></li>
<li>ConstexprMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constexpr method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
public:
  constexpr int CST_expr_Method() { return 2; }
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
public:
  constexpr int pre_cst_expr_method_post() { return 2; }
}</code></pre>
<div class="option">
<p>ConstexprVariableCase</p>
<p>When defined, the check will ensure constexpr variable names conform to the selected casing.</p>
</div>
<div class="option">
<p>ConstexprVariablePrefix</p>
<p>When defined, the check will ensure constexpr variable names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstexprVariableIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for constexpr variable names matching this regular expression.</p>
</div>
<div class="option">
<p>ConstexprVariableSuffix</p>
<p>When defined, the check will ensure constexpr variable names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ConstexprVariableHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ConstexprVariableCase of <code>lower_case</code></li>
<li>ConstexprVariablePrefix of <code>pre_</code></li>
<li>ConstexprVariableSuffix of <code>_post</code></li>
<li>ConstexprVariableHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms constexpr variable names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>constexpr int ConstExpr_variable = MyConstant;</code></pre>
<p>After:</p>
<pre class="c++"><code>constexpr int pre_constexpr_variable_post = MyConstant;</code></pre>
<div class="option">
<p>EnumCase</p>
<p>When defined, the check will ensure enumeration names conform to the selected casing.</p>
</div>
<div class="option">
<p>EnumPrefix</p>
<p>When defined, the check will ensure enumeration names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>EnumIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for enumeration names matching this regular expression.</p>
</div>
<div class="option">
<p>EnumSuffix</p>
<p>When defined, the check will ensure enumeration names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>EnumCase of <code>lower_case</code></li>
<li>EnumPrefix of <code>pre_</code></li>
<li>EnumSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms enumeration names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>enum FOO { One, Two, Three };</code></pre>
<p>After:</p>
<pre class="c++"><code>enum pre_foo_post { One, Two, Three };</code></pre>
<div class="option">
<p>EnumConstantCase</p>
<p>When defined, the check will ensure enumeration constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>EnumConstantPrefix</p>
<p>When defined, the check will ensure enumeration constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>EnumConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for enumeration constant names matching this regular expression.</p>
</div>
<div class="option">
<p>EnumConstantSuffix</p>
<p>When defined, the check will ensure enumeration constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>EnumConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>EnumConstantCase of <code>lower_case</code></li>
<li>EnumConstantPrefix of <code>pre_</code></li>
<li>EnumConstantSuffix of <code>_post</code></li>
<li>EnumConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms enumeration constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>enum FOO { One, Two, Three };</code></pre>
<p>After:</p>
<pre class="c++"><code>enum FOO { pre_One_post, pre_Two_post, pre_Three_post };</code></pre>
<div class="option">
<p>FunctionCase</p>
<p>When defined, the check will ensure function names conform to the selected casing.</p>
</div>
<div class="option">
<p>FunctionPrefix</p>
<p>When defined, the check will ensure function names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>FunctionIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for function names matching this regular expression.</p>
</div>
<div class="option">
<p>FunctionSuffix</p>
<p>When defined, the check will ensure function names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>FunctionCase of <code>lower_case</code></li>
<li>FunctionPrefix of <code>pre_</code></li>
<li>FunctionSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms function names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>char MY_Function_string();</code></pre>
<p>After:</p>
<pre class="c++"><code>char pre_my_function_string_post();</code></pre>
<div class="option">
<p>GetConfigPerFile</p>
<p>When <span class="title-ref">true</span> the check will look for the configuration for where an identifier is declared. Useful for when included header files use a different style. Default value is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>GlobalConstantCase</p>
<p>When defined, the check will ensure global constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>GlobalConstantPrefix</p>
<p>When defined, the check will ensure global constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for global constant names matching this regular expression.</p>
</div>
<div class="option">
<p>GlobalConstantSuffix</p>
<p>When defined, the check will ensure global constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>GlobalConstantCase of <code>lower_case</code></li>
<li>GlobalConstantPrefix of <code>pre_</code></li>
<li>GlobalConstantSuffix of <code>_post</code></li>
<li>GlobalConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms global constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>unsigned const MyConstGlobal_array[] = {1, 2, 3};</code></pre>
<p>After:</p>
<pre class="c++"><code>unsigned const pre_myconstglobal_array_post[] = {1, 2, 3};</code></pre>
<div class="option">
<p>GlobalConstantPointerCase</p>
<p>When defined, the check will ensure global constant pointer names conform to the selected casing.</p>
</div>
<div class="option">
<p>GlobalConstantPointerPrefix</p>
<p>When defined, the check will ensure global constant pointer names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalConstantPointerIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for global constant pointer names matching this regular expression.</p>
</div>
<div class="option">
<p>GlobalConstantPointerSuffix</p>
<p>When defined, the check will ensure global constant pointer names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalConstantPointerHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>GlobalConstantPointerCase of <code>lower_case</code></li>
<li>GlobalConstantPointerPrefix of <code>pre_</code></li>
<li>GlobalConstantPointerSuffix of <code>_post</code></li>
<li>GlobalConstantPointerHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms global constant pointer names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>int *const MyConstantGlobalPointer = nullptr;</code></pre>
<p>After:</p>
<pre class="c++"><code>int *const pre_myconstantglobalpointer_post = nullptr;</code></pre>
<div class="option">
<p>GlobalFunctionCase</p>
<p>When defined, the check will ensure global function names conform to the selected casing.</p>
</div>
<div class="option">
<p>GlobalFunctionPrefix</p>
<p>When defined, the check will ensure global function names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalFunctionIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for global function names matching this regular expression.</p>
</div>
<div class="option">
<p>GlobalFunctionSuffix</p>
<p>When defined, the check will ensure global function names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>GlobalFunctionCase of <code>lower_case</code></li>
<li>GlobalFunctionPrefix of <code>pre_</code></li>
<li>GlobalFunctionSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms global function names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int PARAMETER_1, int const CONST_parameter);</code></pre>
<p>After:</p>
<pre class="c++"><code>void pre_global_function_post(int PARAMETER_1, int const CONST_parameter);</code></pre>
<div class="option">
<p>GlobalPointerCase</p>
<p>When defined, the check will ensure global pointer names conform to the selected casing.</p>
</div>
<div class="option">
<p>GlobalPointerPrefix</p>
<p>When defined, the check will ensure global pointer names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalPointerIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for global pointer names matching this regular expression.</p>
</div>
<div class="option">
<p>GlobalPointerSuffix</p>
<p>When defined, the check will ensure global pointer names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalPointerHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>GlobalPointerCase of <code>lower_case</code></li>
<li>GlobalPointerPrefix of <code>pre_</code></li>
<li>GlobalPointerSuffix of <code>_post</code></li>
<li>GlobalPointerHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms global pointer names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>int *GLOBAL3;</code></pre>
<p>After:</p>
<pre class="c++"><code>int *pre_global3_post;</code></pre>
<div class="option">
<p>GlobalVariableCase</p>
<p>When defined, the check will ensure global variable names conform to the selected casing.</p>
</div>
<div class="option">
<p>GlobalVariablePrefix</p>
<p>When defined, the check will ensure global variable names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalVariableIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for global variable names matching this regular expression.</p>
</div>
<div class="option">
<p>GlobalVariableSuffix</p>
<p>When defined, the check will ensure global variable names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>GlobalVariableHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>GlobalVariableCase of <code>lower_case</code></li>
<li>GlobalVariablePrefix of <code>pre_</code></li>
<li>GlobalVariableSuffix of <code>_post</code></li>
<li>GlobalVariableHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms global variable names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>int GLOBAL3;</code></pre>
<p>After:</p>
<pre class="c++"><code>int pre_global3_post;</code></pre>
<div class="option">
<p>IgnoreMainLikeFunctions</p>
<p>When set to <span class="title-ref">true</span> functions that have a similar signature to <code>main</code> or <code>wmain</code> won't enforce checks on the names of their parameters. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>InlineNamespaceCase</p>
<p>When defined, the check will ensure inline namespaces names conform to the selected casing.</p>
</div>
<div class="option">
<p>InlineNamespacePrefix</p>
<p>When defined, the check will ensure inline namespaces names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>InlineNamespaceIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for inline namespaces names matching this regular expression.</p>
</div>
<div class="option">
<p>InlineNamespaceSuffix</p>
<p>When defined, the check will ensure inline namespaces names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>InlineNamespaceCase of <code>lower_case</code></li>
<li>InlineNamespacePrefix of <code>pre_</code></li>
<li>InlineNamespaceSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms inline namespaces names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>namespace FOO_NS {
inline namespace InlineNamespace {
...
}
} // namespace FOO_NS</code></pre>
<p>After:</p>
<pre class="c++"><code>namespace FOO_NS {
inline namespace pre_inlinenamespace_post {
...
}
} // namespace FOO_NS</code></pre>
<div class="option">
<p>LocalConstantCase</p>
<p>When defined, the check will ensure local constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>LocalConstantPrefix</p>
<p>When defined, the check will ensure local constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for local constant names matching this regular expression.</p>
</div>
<div class="option">
<p>LocalConstantSuffix</p>
<p>When defined, the check will ensure local constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>LocalConstantCase of <code>lower_case</code></li>
<li>LocalConstantPrefix of <code>pre_</code></li>
<li>LocalConstantSuffix of <code>_post</code></li>
<li>LocalConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms local constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void foo() { int const local_Constant = 3; }</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo() { int const pre_local_constant_post = 3; }</code></pre>
<div class="option">
<p>LocalConstantPointerCase</p>
<p>When defined, the check will ensure local constant pointer names conform to the selected casing.</p>
</div>
<div class="option">
<p>LocalConstantPointerPrefix</p>
<p>When defined, the check will ensure local constant pointer names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalConstantPointerIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for local constant pointer names matching this regular expression.</p>
</div>
<div class="option">
<p>LocalConstantPointerSuffix</p>
<p>When defined, the check will ensure local constant pointer names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalConstantPointerHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>LocalConstantPointerCase of <code>lower_case</code></li>
<li>LocalConstantPointerPrefix of <code>pre_</code></li>
<li>LocalConstantPointerSuffix of <code>_post</code></li>
<li>LocalConstantPointerHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms local constant pointer names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void foo() { int const *local_Constant = 3; }</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo() { int const *pre_local_constant_post = 3; }</code></pre>
<div class="option">
<p>LocalPointerCase</p>
<p>When defined, the check will ensure local pointer names conform to the selected casing.</p>
</div>
<div class="option">
<p>LocalPointerPrefix</p>
<p>When defined, the check will ensure local pointer names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalPointerIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for local pointer names matching this regular expression.</p>
</div>
<div class="option">
<p>LocalPointerSuffix</p>
<p>When defined, the check will ensure local pointer names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalPointerHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>LocalPointerCase of <code>lower_case</code></li>
<li>LocalPointerPrefix of <code>pre_</code></li>
<li>LocalPointerSuffix of <code>_post</code></li>
<li>LocalPointerHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms local pointer names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void foo() { int *local_Constant; }</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo() { int *pre_local_constant_post; }</code></pre>
<div class="option">
<p>LocalVariableCase</p>
<p>When defined, the check will ensure local variable names conform to the selected casing.</p>
</div>
<div class="option">
<p>LocalVariablePrefix</p>
<p>When defined, the check will ensure local variable names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalVariableIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for local variable names matching this regular expression.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>LocalVariableCase of <code>CamelCase</code></li>
<li>LocalVariableIgnoredRegexp of <code>\w{1,2}</code></li>
</ul>
</blockquote>
<p>Will exclude variables with a length less than or equal to 2 from the camel case check applied to other variables.</p>
<div class="option">
<p>LocalVariableSuffix</p>
<p>When defined, the check will ensure local variable names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>LocalVariableHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>LocalVariableCase of <code>lower_case</code></li>
<li>LocalVariablePrefix of <code>pre_</code></li>
<li>LocalVariableSuffix of <code>_post</code></li>
<li>LocalVariableHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms local variable names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void foo() { int local_Constant; }</code></pre>
<p>After:</p>
<pre class="c++"><code>void foo() { int pre_local_constant_post; }</code></pre>
<div class="option">
<p>MacroDefinitionCase</p>
<p>When defined, the check will ensure macro definitions conform to the selected casing.</p>
</div>
<div class="option">
<p>MacroDefinitionPrefix</p>
<p>When defined, the check will ensure macro definitions will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>MacroDefinitionIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for macro definitions matching this regular expression.</p>
</div>
<div class="option">
<p>MacroDefinitionSuffix</p>
<p>When defined, the check will ensure macro definitions will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>MacroDefinitionCase of <code>lower_case</code></li>
<li>MacroDefinitionPrefix of <code>pre_</code></li>
<li>MacroDefinitionSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms macro definitions as follows:</p>
<p>Before:</p>
<pre class="c"><code>#define MY_MacroDefinition</code></pre>
<p>After:</p>
<pre class="c"><code>#define pre_my_macro_definition_post</code></pre>
<p>Note: This will not warn on builtin macros or macros defined on the command line using the <code>-D</code> flag.</p>
<div class="option">
<p>MemberCase</p>
<p>When defined, the check will ensure member names conform to the selected casing.</p>
</div>
<div class="option">
<p>MemberPrefix</p>
<p>When defined, the check will ensure member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>MemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for member names matching this regular expression.</p>
</div>
<div class="option">
<p>MemberSuffix</p>
<p>When defined, the check will ensure member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>MemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>MemberCase of <code>lower_case</code></li>
<li>MemberPrefix of <code>pre_</code></li>
<li>MemberSuffix of <code>_post</code></li>
<li>MemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
  char MY_ConstMember_string[4];
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
  char pre_my_constmember_string_post[4];
}</code></pre>
<div class="option">
<p>MethodCase</p>
<p>When defined, the check will ensure method names conform to the selected casing.</p>
</div>
<div class="option">
<p>MethodPrefix</p>
<p>When defined, the check will ensure method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>MethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for method names matching this regular expression.</p>
</div>
<div class="option">
<p>MethodSuffix</p>
<p>When defined, the check will ensure method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>MethodCase of <code>lower_case</code></li>
<li>MethodPrefix of <code>pre_</code></li>
<li>MethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
  char MY_Method_string();
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
  char pre_my_method_string_post();
}</code></pre>
<div class="option">
<p>NamespaceCase</p>
<p>When defined, the check will ensure namespace names conform to the selected casing.</p>
</div>
<div class="option">
<p>NamespacePrefix</p>
<p>When defined, the check will ensure namespace names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>NamespaceIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for namespace names matching this regular expression.</p>
</div>
<div class="option">
<p>NamespaceSuffix</p>
<p>When defined, the check will ensure namespace names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>NamespaceCase of <code>lower_case</code></li>
<li>NamespacePrefix of <code>pre_</code></li>
<li>NamespaceSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms namespace names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>namespace FOO_NS {
...
}</code></pre>
<p>After:</p>
<pre class="c++"><code>namespace pre_foo_ns_post {
...
}</code></pre>
<div class="option">
<p>ParameterCase</p>
<p>When defined, the check will ensure parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>ParameterPrefix</p>
<p>When defined, the check will ensure parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>ParameterSuffix</p>
<p>When defined, the check will ensure parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ParameterHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ParameterCase of <code>lower_case</code></li>
<li>ParameterPrefix of <code>pre_</code></li>
<li>ParameterSuffix of <code>_post</code></li>
<li>ParameterHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int PARAMETER_1, int const CONST_parameter);</code></pre>
<p>After:</p>
<pre class="c++"><code>void GLOBAL_FUNCTION(int pre_parameter_post, int const CONST_parameter);</code></pre>
<div class="option">
<p>ParameterPackCase</p>
<p>When defined, the check will ensure parameter pack names conform to the selected casing.</p>
</div>
<div class="option">
<p>ParameterPackPrefix</p>
<p>When defined, the check will ensure parameter pack names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ParameterPackIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for parameter pack names matching this regular expression.</p>
</div>
<div class="option">
<p>ParameterPackSuffix</p>
<p>When defined, the check will ensure parameter pack names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ParameterPackCase of <code>lower_case</code></li>
<li>ParameterPackPrefix of <code>pre_</code></li>
<li>ParameterPackSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms parameter pack names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template &lt;typename... TYPE_parameters&gt; {
  void FUNCTION(int... TYPE_parameters);
}</code></pre>
<p>After:</p>
<pre class="c++"><code>template &lt;typename... TYPE_parameters&gt; {
  void FUNCTION(int... pre_type_parameters_post);
}</code></pre>
<div class="option">
<p>PointerParameterCase</p>
<p>When defined, the check will ensure pointer parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>PointerParameterPrefix</p>
<p>When defined, the check will ensure pointer parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PointerParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for pointer parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>PointerParameterSuffix</p>
<p>When defined, the check will ensure pointer parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PointerParameterHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>PointerParameterCase of <code>lower_case</code></li>
<li>PointerParameterPrefix of <code>pre_</code></li>
<li>PointerParameterSuffix of <code>_post</code></li>
<li>PointerParameterHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms pointer parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>void FUNCTION(int *PARAMETER);</code></pre>
<p>After:</p>
<pre class="c++"><code>void FUNCTION(int *pre_parameter_post);</code></pre>
<div class="option">
<p>PrivateMemberCase</p>
<p>When defined, the check will ensure private member names conform to the selected casing.</p>
</div>
<div class="option">
<p>PrivateMemberPrefix</p>
<p>When defined, the check will ensure private member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PrivateMemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for private member names matching this regular expression.</p>
</div>
<div class="option">
<p>PrivateMemberSuffix</p>
<p>When defined, the check will ensure private member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PrivateMemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>PrivateMemberCase of <code>lower_case</code></li>
<li>PrivateMemberPrefix of <code>pre_</code></li>
<li>PrivateMemberSuffix of <code>_post</code></li>
<li>PrivateMemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms private member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
private:
  int Member_Variable;
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
private:
  int pre_member_variable_post;
}</code></pre>
<div class="option">
<p>PrivateMethodCase</p>
<p>When defined, the check will ensure private method names conform to the selected casing.</p>
</div>
<div class="option">
<p>PrivateMethodPrefix</p>
<p>When defined, the check will ensure private method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PrivateMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for private method names matching this regular expression.</p>
</div>
<div class="option">
<p>PrivateMethodSuffix</p>
<p>When defined, the check will ensure private method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>PrivateMethodCase of <code>lower_case</code></li>
<li>PrivateMethodPrefix of <code>pre_</code></li>
<li>PrivateMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms private method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
private:
  int Member_Method();
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
private:
  int pre_member_method_post();
}</code></pre>
<div class="option">
<p>ProtectedMemberCase</p>
<p>When defined, the check will ensure protected member names conform to the selected casing.</p>
</div>
<div class="option">
<p>ProtectedMemberPrefix</p>
<p>When defined, the check will ensure protected member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ProtectedMemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for protected member names matching this regular expression.</p>
</div>
<div class="option">
<p>ProtectedMemberSuffix</p>
<p>When defined, the check will ensure protected member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ProtectedMemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ProtectedMemberCase of <code>lower_case</code></li>
<li>ProtectedMemberPrefix of <code>pre_</code></li>
<li>ProtectedMemberSuffix of <code>_post</code></li>
<li>ProtectedMemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms protected member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
protected:
  int Member_Variable;
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
protected:
  int pre_member_variable_post;
}</code></pre>
<div class="option">
<p>ProtectedMethodCase</p>
<p>When defined, the check will ensure protected method names conform to the selected casing.</p>
</div>
<div class="option">
<p>ProtectedMethodPrefix</p>
<p>When defined, the check will ensure protected method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ProtectedMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for protected method names matching this regular expression.</p>
</div>
<div class="option">
<p>ProtectedMethodSuffix</p>
<p>When defined, the check will ensure protected method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ProtectedMethodCase of <code>lower_case</code></li>
<li>ProtectedMethodPrefix of <code>pre_</code></li>
<li>ProtectedMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms protect method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
protected:
  int Member_Method();
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
protected:
  int pre_member_method_post();
}</code></pre>
<div class="option">
<p>PublicMemberCase</p>
<p>When defined, the check will ensure public member names conform to the selected casing.</p>
</div>
<div class="option">
<p>PublicMemberPrefix</p>
<p>When defined, the check will ensure public member names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PublicMemberIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for public member names matching this regular expression.</p>
</div>
<div class="option">
<p>PublicMemberSuffix</p>
<p>When defined, the check will ensure public member names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PublicMemberHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>PublicMemberCase of <code>lower_case</code></li>
<li>PublicMemberPrefix of <code>pre_</code></li>
<li>PublicMemberSuffix of <code>_post</code></li>
<li>PublicMemberHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms public member names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
public:
  int Member_Variable;
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
public:
  int pre_member_variable_post;
}</code></pre>
<div class="option">
<p>PublicMethodCase</p>
<p>When defined, the check will ensure public method names conform to the selected casing.</p>
</div>
<div class="option">
<p>PublicMethodPrefix</p>
<p>When defined, the check will ensure public method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>PublicMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for public method names matching this regular expression.</p>
</div>
<div class="option">
<p>PublicMethodSuffix</p>
<p>When defined, the check will ensure public method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>PublicMethodCase of <code>lower_case</code></li>
<li>PublicMethodPrefix of <code>pre_</code></li>
<li>PublicMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms public method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
public:
  int Member_Method();
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
public:
  int pre_member_method_post();
}</code></pre>
<div class="option">
<p>ScopedEnumConstantCase</p>
<p>When defined, the check will ensure scoped enum constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>ScopedEnumConstantPrefix</p>
<p>When defined, the check will ensure scoped enum constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ScopedEnumConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for scoped enum constant names matching this regular expression.</p>
</div>
<div class="option">
<p>ScopedEnumConstantSuffix</p>
<p>When defined, the check will ensure scoped enum constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ScopedEnumConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ScopedEnumConstantCase of <code>lower_case</code></li>
<li>ScopedEnumConstantPrefix of <code>pre_</code></li>
<li>ScopedEnumConstantSuffix of <code>_post</code></li>
<li>ScopedEnumConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms enumeration constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>enum class FOO { One, Two, Three };</code></pre>
<p>After:</p>
<pre class="c++"><code>enum class FOO { pre_One_post, pre_Two_post, pre_Three_post };</code></pre>
<div class="option">
<p>StaticConstantCase</p>
<p>When defined, the check will ensure static constant names conform to the selected casing.</p>
</div>
<div class="option">
<p>StaticConstantPrefix</p>
<p>When defined, the check will ensure static constant names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>StaticConstantIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for static constant names matching this regular expression.</p>
</div>
<div class="option">
<p>StaticConstantSuffix</p>
<p>When defined, the check will ensure static constant names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>StaticConstantHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>StaticConstantCase of <code>lower_case</code></li>
<li>StaticConstantPrefix of <code>pre_</code></li>
<li>StaticConstantSuffix of <code>_post</code></li>
<li>StaticConstantHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms static constant names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>static unsigned const MyConstStatic_array[] = {1, 2, 3};</code></pre>
<p>After:</p>
<pre class="c++"><code>static unsigned const pre_myconststatic_array_post[] = {1, 2, 3};</code></pre>
<div class="option">
<p>StaticVariableCase</p>
<p>When defined, the check will ensure static variable names conform to the selected casing.</p>
</div>
<div class="option">
<p>StaticVariablePrefix</p>
<p>When defined, the check will ensure static variable names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>StaticVariableIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for static variable names matching this regular expression.</p>
</div>
<div class="option">
<p>StaticVariableSuffix</p>
<p>When defined, the check will ensure static variable names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>StaticVariableHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>StaticVariableCase of <code>lower_case</code></li>
<li>StaticVariablePrefix of <code>pre_</code></li>
<li>StaticVariableSuffix of <code>_post</code></li>
<li>StaticVariableHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms static variable names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>static unsigned MyStatic_array[] = {1, 2, 3};</code></pre>
<p>After:</p>
<pre class="c++"><code>static unsigned pre_mystatic_array_post[] = {1, 2, 3};</code></pre>
<div class="option">
<p>StructCase</p>
<p>When defined, the check will ensure struct names conform to the selected casing.</p>
</div>
<div class="option">
<p>StructPrefix</p>
<p>When defined, the check will ensure struct names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>StructIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for struct names matching this regular expression.</p>
</div>
<div class="option">
<p>StructSuffix</p>
<p>When defined, the check will ensure struct names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>StructCase of <code>lower_case</code></li>
<li>StructPrefix of <code>pre_</code></li>
<li>StructSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms struct names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>struct FOO {
  FOO();
  ~FOO();
};</code></pre>
<p>After:</p>
<pre class="c++"><code>struct pre_foo_post {
  pre_foo_post();
  ~pre_foo_post();
};</code></pre>
<div class="option">
<p>TemplateParameterCase</p>
<p>When defined, the check will ensure template parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>TemplateParameterPrefix</p>
<p>When defined, the check will ensure template parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>TemplateParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for template parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>TemplateParameterSuffix</p>
<p>When defined, the check will ensure template parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>TemplateParameterCase of <code>lower_case</code></li>
<li>TemplateParameterPrefix of <code>pre_</code></li>
<li>TemplateParameterSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms template parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template &lt;typename T&gt; class Foo {};</code></pre>
<p>After:</p>
<pre class="c++"><code>template &lt;typename pre_t_post&gt; class Foo {};</code></pre>
<div class="option">
<p>TemplateTemplateParameterCase</p>
<p>When defined, the check will ensure template template parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>TemplateTemplateParameterPrefix</p>
<p>When defined, the check will ensure template template parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>TemplateTemplateParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for template template parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>TemplateTemplateParameterSuffix</p>
<p>When defined, the check will ensure template template parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>TemplateTemplateParameterCase of <code>lower_case</code></li>
<li>TemplateTemplateParameterPrefix of <code>pre_</code></li>
<li>TemplateTemplateParameterSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms template template parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class TPL_parameter, int COUNT_params,
          typename... TYPE_parameters&gt;</code></pre>
<p>After:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class pre_tpl_parameter_post, int COUNT_params,
          typename... TYPE_parameters&gt;</code></pre>
<div class="option">
<p>TypeAliasCase</p>
<p>When defined, the check will ensure type alias names conform to the selected casing.</p>
</div>
<div class="option">
<p>TypeAliasPrefix</p>
<p>When defined, the check will ensure type alias names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>TypeAliasIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for type alias names matching this regular expression.</p>
</div>
<div class="option">
<p>TypeAliasSuffix</p>
<p>When defined, the check will ensure type alias names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>TypeAliasCase of <code>lower_case</code></li>
<li>TypeAliasPrefix of <code>pre_</code></li>
<li>TypeAliasSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms type alias names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>using MY_STRUCT_TYPE = my_structure;</code></pre>
<p>After:</p>
<pre class="c++"><code>using pre_my_struct_type_post = my_structure;</code></pre>
<div class="option">
<p>TypedefCase</p>
<p>When defined, the check will ensure typedef names conform to the selected casing.</p>
</div>
<div class="option">
<p>TypedefPrefix</p>
<p>When defined, the check will ensure typedef names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>TypedefIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for typedef names matching this regular expression.</p>
</div>
<div class="option">
<p>TypedefSuffix</p>
<p>When defined, the check will ensure typedef names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>TypedefCase of <code>lower_case</code></li>
<li>TypedefPrefix of <code>pre_</code></li>
<li>TypedefSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms typedef names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>typedef int MYINT;</code></pre>
<p>After:</p>
<pre class="c++"><code>typedef int pre_myint_post;</code></pre>
<div class="option">
<p>TypeTemplateParameterCase</p>
<p>When defined, the check will ensure type template parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>TypeTemplateParameterPrefix</p>
<p>When defined, the check will ensure type template parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>TypeTemplateParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for type template names matching this regular expression.</p>
</div>
<div class="option">
<p>TypeTemplateParameterSuffix</p>
<p>When defined, the check will ensure type template parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>TypeTemplateParameterCase of <code>lower_case</code></li>
<li>TypeTemplateParameterPrefix of <code>pre_</code></li>
<li>TypeTemplateParameterSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms type template parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class TPL_parameter, int COUNT_params,
          typename... TYPE_parameters&gt;</code></pre>
<p>After:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class TPL_parameter, int COUNT_params,
          typename... pre_type_parameters_post&gt;</code></pre>
<div class="option">
<p>UnionCase</p>
<p>When defined, the check will ensure union names conform to the selected casing.</p>
</div>
<div class="option">
<p>UnionPrefix</p>
<p>When defined, the check will ensure union names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>UnionIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for union names matching this regular expression.</p>
</div>
<div class="option">
<p>UnionSuffix</p>
<p>When defined, the check will ensure union names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>UnionCase of <code>lower_case</code></li>
<li>UnionPrefix of <code>pre_</code></li>
<li>UnionSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms union names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>union FOO {
  int a;
  char b;
};</code></pre>
<p>After:</p>
<pre class="c++"><code>union pre_foo_post {
  int a;
  char b;
};</code></pre>
<div class="option">
<p>ValueTemplateParameterCase</p>
<p>When defined, the check will ensure value template parameter names conform to the selected casing.</p>
</div>
<div class="option">
<p>ValueTemplateParameterPrefix</p>
<p>When defined, the check will ensure value template parameter names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>ValueTemplateParameterIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for value template parameter names matching this regular expression.</p>
</div>
<div class="option">
<p>ValueTemplateParameterSuffix</p>
<p>When defined, the check will ensure value template parameter names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>ValueTemplateParameterCase of <code>lower_case</code></li>
<li>ValueTemplateParameterPrefix of <code>pre_</code></li>
<li>ValueTemplateParameterSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms value template parameter names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class TPL_parameter, int COUNT_params,
          typename... TYPE_parameters&gt;</code></pre>
<p>After:</p>
<pre class="c++"><code>template &lt;template &lt;typename&gt; class TPL_parameter, int pre_count_params_post,
          typename... TYPE_parameters&gt;</code></pre>
<div class="option">
<p>VariableCase</p>
<p>When defined, the check will ensure variable names conform to the selected casing.</p>
</div>
<div class="option">
<p>VariablePrefix</p>
<p>When defined, the check will ensure variable names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>VariableIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for variable names matching this regular expression.</p>
</div>
<div class="option">
<p>VariableSuffix</p>
<p>When defined, the check will ensure variable names will add the suffix with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>VariableHungarianPrefix</p>
<p>When enabled, the check ensures that the declared identifier will have a Hungarian notation prefix based on the declared type.</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>VariableCase of <code>lower_case</code></li>
<li>VariablePrefix of <code>pre_</code></li>
<li>VariableSuffix of <code>_post</code></li>
<li>VariableHungarianPrefix of <code>On</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms variable names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>unsigned MyVariable;</code></pre>
<p>After:</p>
<pre class="c++"><code>unsigned pre_myvariable_post;</code></pre>
<div class="option">
<p>VirtualMethodCase</p>
<p>When defined, the check will ensure virtual method names conform to the selected casing.</p>
</div>
<div class="option">
<p>VirtualMethodPrefix</p>
<p>When defined, the check will ensure virtual method names will add the prefixed with the given value (regardless of casing).</p>
</div>
<div class="option">
<p>VirtualMethodIgnoredRegexp</p>
<p>Identifier naming checks won't be enforced for virtual method names matching this regular expression.</p>
</div>
<div class="option">
<p>VirtualMethodSuffix</p>
<p>When defined, the check will ensure virtual method names will add the suffix with the given value (regardless of casing).</p>
</div>
<p>For example using values of:</p>
<blockquote>
<ul>
<li>VirtualMethodCase of <code>lower_case</code></li>
<li>VirtualMethodPrefix of <code>pre_</code></li>
<li>VirtualMethodSuffix of <code>_post</code></li>
</ul>
</blockquote>
<p>Identifies and/or transforms virtual method names as follows:</p>
<p>Before:</p>
<pre class="c++"><code>class Foo {
public:
  virtual int MemberFunction();
}</code></pre>
<p>After:</p>
<pre class="c++"><code>class Foo {
public:
  virtual int pre_member_function_post();
}</code></pre>
<h2 id="the-default-mapping-table-of-hungarian-notation">The default mapping table of Hungarian Notation</h2>
<p>In Hungarian notation, a variable name starts with a group of lower-case letters which are mnemonics for the type or purpose of that variable, followed by whatever name the programmer has chosen; this last part is sometimes distinguished as the given name. The first character of the given name can be capitalized to separate it from the type indicators (see also CamelCase). Otherwise the case of this character denotes scope.</p>
<p>The following table is the default mapping table of Hungarian Notation which maps Decl to its prefix string. You can also have your own style in config file.</p>
<table>
<thead>
<tr class="header">
<th>Primitive Type</th>
<th></th>
<th></th>
<th></th>
<th>Microsoft Type</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><blockquote>
<p>Type</p>
</blockquote></td>
<td>Prefix</td>
<td>Type</td>
<td>Prefix</td>
<td>Type</td>
<td>Prefix</td>
</tr>
<tr class="even">
<td>=================</td>
<td>==============</td>
<td>======================</td>
<td>==============</td>
<td>==============</td>
<td>==============</td>
</tr>
<tr class="odd">
<td>int8_t</td>
<td>i8</td>
<td>signed int</td>
<td>si</td>
<td>BOOL</td>
<td>b</td>
</tr>
<tr class="even">
<td>int16_t</td>
<td>i16</td>
<td>signed short</td>
<td>ss</td>
<td>BOOLEAN</td>
<td>b</td>
</tr>
<tr class="odd">
<td>int32_t</td>
<td>i32</td>
<td>signed short int</td>
<td>ssi</td>
<td>BYTE</td>
<td>by</td>
</tr>
<tr class="even">
<td>int64_t</td>
<td>i64</td>
<td>signed long long int</td>
<td>slli</td>
<td>CHAR</td>
<td>c</td>
</tr>
<tr class="odd">
<td>uint8_t</td>
<td>u8</td>
<td>signed long long</td>
<td>sll</td>
<td>UCHAR</td>
<td>uc</td>
</tr>
<tr class="even">
<td>uint16_t</td>
<td>u16</td>
<td>signed long int</td>
<td>sli</td>
<td>SHORT</td>
<td>s</td>
</tr>
<tr class="odd">
<td>uint32_t</td>
<td>u32</td>
<td>signed long</td>
<td>sl</td>
<td>USHORT</td>
<td>us</td>
</tr>
<tr class="even">
<td>uint64_t</td>
<td>u64</td>
<td>signed</td>
<td>s</td>
<td>WORD</td>
<td>w</td>
</tr>
<tr class="odd">
<td>char8_t</td>
<td>c8</td>
<td>unsigned long long int</td>
<td>ulli</td>
<td>DWORD</td>
<td>dw</td>
</tr>
<tr class="even">
<td>char16_t</td>
<td>c16</td>
<td>unsigned long long</td>
<td>ull</td>
<td>DWORD32</td>
<td>dw32</td>
</tr>
<tr class="odd">
<td>char32_t</td>
<td>c32</td>
<td>unsigned long int</td>
<td>uli</td>
<td>DWORD64</td>
<td>dw64</td>
</tr>
<tr class="even">
<td>float</td>
<td>f</td>
<td>unsigned long</td>
<td>ul</td>
<td>LONG</td>
<td>l</td>
</tr>
<tr class="odd">
<td>double</td>
<td>d</td>
<td>unsigned short int</td>
<td>usi</td>
<td>ULONG</td>
<td>ul</td>
</tr>
<tr class="even">
<td>char</td>
<td>c</td>
<td>unsigned short</td>
<td>us</td>
<td>ULONG32</td>
<td>ul32</td>
</tr>
<tr class="odd">
<td>bool</td>
<td>b</td>
<td>unsigned int</td>
<td>ui</td>
<td>ULONG64</td>
<td>ul64</td>
</tr>
<tr class="even">
<td>_Bool</td>
<td>b</td>
<td>unsigned char</td>
<td>uc</td>
<td>ULONGLONG</td>
<td>ull</td>
</tr>
<tr class="odd">
<td>int</td>
<td>i</td>
<td>unsigned</td>
<td>u</td>
<td>HANDLE</td>
<td>h</td>
</tr>
<tr class="even">
<td>size_t</td>
<td>n</td>
<td>long long int</td>
<td>lli</td>
<td>INT</td>
<td>i</td>
</tr>
<tr class="odd">
<td>short</td>
<td>s</td>
<td>long double</td>
<td>ld</td>
<td>INT8</td>
<td>i8</td>
</tr>
<tr class="even">
<td>signed</td>
<td>i</td>
<td>long long</td>
<td>ll</td>
<td>INT16</td>
<td>i16</td>
</tr>
<tr class="odd">
<td>unsigned</td>
<td>u</td>
<td>long int</td>
<td>li</td>
<td>INT32</td>
<td>i32</td>
</tr>
<tr class="even">
<td>long</td>
<td>l</td>
<td>long</td>
<td>l</td>
<td>INT64</td>
<td>i64</td>
</tr>
<tr class="odd">
<td>long long</td>
<td>ll</td>
<td>ptrdiff_t</td>
<td>p</td>
<td>UINT</td>
<td>ui</td>
</tr>
<tr class="even">
<td><p>unsigned long long double ptrdiff_t wchar_t short int short</p></td>
<td><p>ul ld p wc si s</p></td>
<td><p>void</p></td>
<td><p><em>none</em></p></td>
<td><p>UINT8 UINT16 UINT32 UINT64 PVOID</p></td>
<td><p>u8 u16 u32 u64 p</p></td>
</tr>
</tbody>
</table>
<p><strong>There are more trivial options for Hungarian Notation:</strong></p>
<dl>
<dt><strong>HungarianNotation.General.</strong>*</dt>
<dd><p>Options are not belonging to any specific Decl.</p>
</dd>
<dt><strong>HungarianNotation.CString.</strong>*</dt>
<dd><p>Options for NULL-terminated string.</p>
</dd>
<dt><strong>HungarianNotation.DerivedType.</strong>*</dt>
<dd><p>Options for derived types.</p>
</dd>
<dt><strong>HungarianNotation.PrimitiveType.</strong>*</dt>
<dd><p>Options for primitive types.</p>
</dd>
<dt><strong>HungarianNotation.UserDefinedType.</strong>*</dt>
<dd><p>Options for user-defined types.</p>
</dd>
</dl>
<h2 id="options-for-hungarian-notation">Options for Hungarian Notation</h2>
<ul>
<li><code class="interpreted-text" role="option">HungarianNotation.General.TreatStructAsClass</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.DerivedType.Array</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.DerivedType.Pointer</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.DerivedType.FunctionPointer</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.CString.CharPointer</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.CString.CharArray</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.CString.WideCharPointer</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.CString.WideCharArray</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.PrimitiveType.*</code></li>
<li><code class="interpreted-text" role="option">HungarianNotation.UserDefinedType.*</code></li>
</ul>
<div class="option">
<p>HungarianNotation.General.TreatStructAsClass</p>
<p>When defined, the check will treat naming of struct as a class. The default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.DerivedType.Array</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">a</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.DerivedType.Pointer</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">p</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.DerivedType.FunctionPointer</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">fn</span>.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>// Array
int DataArray[2] = {0};
// Pointer
void *DataBuffer = NULL;
// FunctionPointer
typedef void (*FUNC_PTR)();
FUNC_PTR FuncPtr = NULL;</code></pre>
<p>After:</p>
<pre class="c++"><code>// Array
int aDataArray[2] = {0};
// Pointer
void *pDataBuffer = NULL;
// FunctionPointer
typedef void (*FUNC_PTR)();
FUNC_PTR fnFuncPtr = NULL;</code></pre>
<div class="option">
<p>HungarianNotation.CString.CharPointer</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">sz</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.CString.CharArray</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">sz</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.CString.WideCharPointer</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">wsz</span>.</p>
</div>
<div class="option">
<p>HungarianNotation.CString.WideCharArray</p>
<p>When defined, the check will ensure variable name will add the prefix with the given string. The default prefix is <span class="title-ref">wsz</span>.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>// CharPointer
const char *NamePtr = &quot;Name&quot;;
// CharArray
const char NameArray[] = &quot;Name&quot;;

// WideCharPointer
const wchar_t *WideNamePtr = L&quot;Name&quot;;
// WideCharArray
const wchar_t WideNameArray[] = L&quot;Name&quot;;</code></pre>
<p>After:</p>
<pre class="c++"><code>// CharPointer
const char *szNamePtr = &quot;Name&quot;;
// CharArray
const char szNameArray[] = &quot;Name&quot;;

// WideCharPointer
const wchar_t *wszWideNamePtr = L&quot;Name&quot;;
// WideCharArray
const wchar_t wszWideNameArray[] = L&quot;Name&quot;;</code></pre>
<div class="option">
<p>HungarianNotation.PrimitiveType.*</p>
<p>When defined, the check will ensure variable name of involved primitive types will add the prefix with the given string. The default prefixes are defined in the default mapping table.</p>
</div>
<div class="option">
<p>HungarianNotation.UserDefinedType.*</p>
<p>When defined, the check will ensure variable name of involved primitive types will add the prefix with the given string. The default prefixes are defined in the default mapping table.</p>
</div>
<p>Before:</p>
<pre class="c++"><code>int8_t   ValueI8      = 0;
int16_t  ValueI16     = 0;
int32_t  ValueI32     = 0;
int64_t  ValueI64     = 0;
uint8_t  ValueU8      = 0;
uint16_t ValueU16     = 0;
uint32_t ValueU32     = 0;
uint64_t ValueU64     = 0;
float    ValueFloat   = 0.0;
double   ValueDouble  = 0.0;
ULONG    ValueUlong   = 0;
DWORD    ValueDword   = 0;</code></pre>
<p>After:</p>
<pre class="c++"><code>int8_t   i8ValueI8    = 0;
int16_t  i16ValueI16  = 0;
int32_t  i32ValueI32  = 0;
int64_t  i64ValueI64  = 0;
uint8_t  u8ValueU8    = 0;
uint16_t u16ValueU16  = 0;
uint32_t u32ValueU32  = 0;
uint64_t u64ValueU64  = 0;
float    fValueFloat  = 0.0;
double   dValueDouble = 0.0;
ULONG    ulValueUlong = 0;
DWORD    dwValueDword = 0;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-naming.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-implicit-bool-cast</key>
    <name>readability-implicit-bool-cast</name>
    <description>
      <![CDATA[<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - readability-implicit-bool-cast</p>
</div>
<div class="meta" data-http-equiv=refresh="5;URL=../readability/implicit-bool-conversion.html">

</div>
<h1 id="readability-implicit-bool-cast">readability-implicit-bool-cast</h1>
<p>This check has been renamed to <code class="interpreted-text" role="doc">readability-implicit-bool-conversion
&lt;../readability/implicit-bool-conversion&gt;</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/implicit-bool-cast.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-implicit-bool-conversion</key>
    <name>readability-implicit-bool-conversion</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-implicit-bool-conversion</p>
</div>
<h1 id="readability-implicit-bool-conversion">readability-implicit-bool-conversion</h1>
<p>This check can be used to find implicit conversions between built-in types and booleans. Depending on use case, it may simply help with readability of the code, or in some cases, point to potential bugs which remain unnoticed due to implicit conversions.</p>
<p>The following is a real-world example of bug which was hiding behind implicit <code>bool</code> conversion:</p>
<pre class="c++"><code>class Foo {
  int m_foo;

public:
  void setFoo(bool foo) { m_foo = foo; } // warning: implicit conversion bool -&gt; int
  int getFoo() { return m_foo; }
};

void use(Foo&amp; foo) {
  bool value = foo.getFoo(); // warning: implicit conversion int -&gt; bool
}</code></pre>
<p>This code is the result of unsuccessful refactoring, where type of <code>m_foo</code> changed from <code>bool</code> to <code>int</code>. The programmer forgot to change all occurrences of <code>bool</code>, and the remaining code is no longer correct, yet it still compiles without any visible warnings.</p>
<p>In addition to issuing warnings, fix-it hints are provided to help solve the reported issues. This can be used for improving readability of code, for example:</p>
<pre class="c++"><code>void conversionsToBool() {
  float floating;
  bool boolean = floating;
  // ^ propose replacement: bool boolean = floating != 0.0f;

  int integer;
  if (integer) {}
  // ^ propose replacement: if (integer != 0) {}

  int* pointer;
  if (!pointer) {}
  // ^ propose replacement: if (pointer == nullptr) {}

  while (1) {}
  // ^ propose replacement: while (true) {}
}

void functionTakingInt(int param);

void conversionsFromBool() {
  bool boolean;
  functionTakingInt(boolean);
  // ^ propose replacement: functionTakingInt(static_cast&lt;int&gt;(boolean));

  functionTakingInt(true);
  // ^ propose replacement: functionTakingInt(1);
}</code></pre>
<p>In general, the following conversion types are checked:</p>
<ul>
<li>integer expression/literal to boolean (conversion from a single bit bitfield to boolean is explicitly allowed, since there's no ambiguity / information loss in this case),</li>
<li>floating expression/literal to boolean,</li>
<li>pointer/pointer to member/<code>nullptr</code>/<code>NULL</code> to boolean,</li>
<li>boolean expression/literal to integer (conversion from boolean to a single bit bitfield is explicitly allowed),</li>
<li>boolean expression/literal to floating.</li>
</ul>
<p>The rules for generating fix-it hints are:</p>
<ul>
<li>in case of conversions from other built-in type to bool, an explicit comparison is proposed to make it clear what exactly is being compared:
<ul>
<li><code>bool boolean = floating;</code> is changed to <code>bool boolean = floating == 0.0f;</code>,</li>
<li>for other types, appropriate literals are used (<code>0</code>, <code>0u</code>, <code>0.0f</code>, <code>0.0</code>, <code>nullptr</code>),</li>
</ul></li>
<li>in case of negated expressions conversion to bool, the proposed replacement with comparison is simplified:
<ul>
<li><code>if (!pointer)</code> is changed to <code>if (pointer == nullptr)</code>,</li>
</ul></li>
<li>in case of conversions from bool to other built-in types, an explicit <code>static_cast</code> is proposed to make it clear that a conversion is taking place:
<ul>
<li><code>int integer = boolean;</code> is changed to <code>int integer = static_cast&lt;int&gt;(boolean);</code>,</li>
</ul></li>
<li>if the conversion is performed on type literals, an equivalent literal is proposed, according to what type is actually expected, for example:
<ul>
<li><code>functionTakingBool(0);</code> is changed to <code>functionTakingBool(false);</code>,</li>
<li><code>functionTakingInt(true);</code> is changed to <code>functionTakingInt(1);</code>,</li>
<li>for other types, appropriate literals are used (<code>false</code>, <code>true</code>, <code>0</code>, <code>1</code>, <code>0u</code>, <code>1u</code>, <code>0.0f</code>, <code>1.0f</code>, <code>0.0</code>, <code>1.0f</code>).</li>
</ul></li>
</ul>
<p>Some additional accommodations are made for pre-C++11 dialects:</p>
<ul>
<li><code>false</code> literal conversion to pointer is detected,</li>
<li>instead of <code>nullptr</code> literal, <code>0</code> is proposed as replacement.</li>
</ul>
<p>Occurrences of implicit conversions inside macros and template instantiations are deliberately ignored, as it is not clear how to deal with such cases.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowIntegerConditions</p>
<p>When <span class="title-ref">true</span>, the check will allow conditional integer conversions. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>AllowPointerConditions</p>
<p>When <span class="title-ref">true</span>, the check will allow conditional pointer conversions. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/implicit-bool-conversion.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-inconsistent-declaration-parameter-name</key>
    <name>readability-inconsistent-declaration-parameter-name</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-inconsistent-declaration-parameter-name</p>
</div>
<h1 id="readability-inconsistent-declaration-parameter-name">readability-inconsistent-declaration-parameter-name</h1>
<p>Find function declarations which differ in parameter names.</p>
<p>Example:</p>
<pre class="c++"><code>// in foo.hpp:
void foo(int a, int b, int c);

// in foo.cpp:
void foo(int d, int e, int f); // warning</code></pre>
<p>This check should help to enforce consistency in large projects, where it often happens that a definition of function is refactored, changing the parameter names, but its declaration in header file is not updated. With this check, we can easily find and correct such inconsistencies, keeping declaration and definition always in sync.</p>
<p>Unnamed parameters are allowed and are not taken into account when comparing function declarations, for example:</p>
<pre class="c++"><code>void foo(int a);
void foo(int); // no warning</code></pre>
<p>One name is also allowed to be a case-insensitive prefix/suffix of the other:</p>
<pre class="c++"><code>void foo(int count);
void foo(int count_input) { // no warning
  int count = adjustCount(count_input);
}</code></pre>
<p>To help with refactoring, in some cases fix-it hints are generated to align parameter names to a single naming convention. This works with the assumption that the function definition is the most up-to-date version, as it directly references parameter names in its body. Example:</p>
<pre class="c++"><code>void foo(int a); // warning and fix-it hint (replace &quot;a&quot; to &quot;b&quot;)
int foo(int b) { return b + 2; } // definition with use of &quot;b&quot;</code></pre>
<p>In the case of multiple redeclarations or function template specializations, a warning is issued for every redeclaration or specialization inconsistent with the definition or the first declaration seen in a translation unit.</p>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">true</span>), the check will not warn about names declared inside macros.</p>
</div>
<div class="option">
<p>Strict</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">false</span>), then names must match exactly (or be absent).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/inconsistent-declaration-parameter-name.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-isolate-declaration</key>
    <name>readability-isolate-declaration</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-isolate-declaration</p>
</div>
<h1 id="readability-isolate-declaration">readability-isolate-declaration</h1>
<p>Detects local variable declarations declaring more than one variable and tries to refactor the code to one statement per declaration.</p>
<p>The automatic code-transformation will use the same indentation as the original for every created statement and add a line break after each statement. It keeps the order of the variable declarations consistent, too.</p>
<pre class="c++"><code>void f() {
  int * pointer = nullptr, value = 42, * const const_ptr = &amp;value;
  // This declaration will be diagnosed and transformed into:
  // int * pointer = nullptr;
  // int value = 42;
  // int * const const_ptr = &amp;value;
}</code></pre>
<p>The check excludes places where it is necessary or common to declare multiple variables in one statement and there is no other way supported in the language. Please note that structured bindings are not considered.</p>
<pre class="c++"><code>// It is not possible to transform this declaration and doing the declaration
// before the loop will increase the scope of the variable &#39;Begin&#39; and &#39;End&#39;
// which is undesirable.
for (int Begin = 0, End = 100; Begin &lt; End; ++Begin);
if (int Begin = 42, Result = some_function(Begin); Begin == Result);

// It is not possible to transform this declaration because the result is
// not functionality preserving as &#39;j&#39; and &#39;k&#39; would not be part of the
// &#39;if&#39; statement anymore.
if (SomeCondition())
  int i = 42, j = 43, k = function(i,j);</code></pre>
<h2 id="limitations">Limitations</h2>
<p>Global variables and member variables are excluded.</p>
<p>The check currently does not support the automatic transformation of member-pointer-types.</p>
<pre class="c++"><code>struct S {
  int a;
  const int b;
  void f() {}
};

void f() {
  // Only a diagnostic message is emitted
  int S::*p = &amp;S::a, S::*const q = &amp;S::a;
}</code></pre>
<p>Furthermore, the transformation is very cautious when it detects various kinds of macros or preprocessor directives in the range of the statement. In this case the transformation will not happen to avoid unexpected side-effects due to macros.</p>
<pre class="c++"><code>#define NULL 0
#define MY_NICE_TYPE int **
#define VAR_NAME(name) name##__LINE__
#define A_BUNCH_OF_VARIABLES int m1 = 42, m2 = 43, m3 = 44;

void macros() {
  int *p1 = NULL, *p2 = NULL;
  // Will be transformed to
  // int *p1 = NULL;
  // int *p2 = NULL;

  MY_NICE_TYPE p3, v1, v2;
  // Won&#39;t be transformed, but a diagnostic is emitted.

  int VAR_NAME(v3),
      VAR_NAME(v4),
      VAR_NAME(v5);
  // Won&#39;t be transformed, but a diagnostic is emitted.

  A_BUNCH_OF_VARIABLES
  // Won&#39;t be transformed, but a diagnostic is emitted.

  int Unconditional,
#if CONFIGURATION
      IfConfigured = 42,
#else
      IfConfigured = 0;
#endif
  // Won&#39;t be transformed, but a diagnostic is emitted.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/isolate-declaration.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-magic-numbers</key>
    <name>readability-magic-numbers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-magic-numbers</p>
</div>
<h1 id="readability-magic-numbers">readability-magic-numbers</h1>
<p>Detects magic numbers, integer or floating point literals that are embedded in code and not introduced via constants or symbols.</p>
<p>Many coding guidelines advise replacing the magic values with symbolic constants to improve readability. Here are a few references:</p>
<blockquote>
<ul>
<li><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-magic">Rule ES.45: Avoid "magic constants"; use symbolic constants in C++ Core Guidelines</a></li>
<li><a href="https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard-expressions">Rule 5.1.1 Use symbolic names instead of literal values in code in High Integrity C++</a></li>
<li>Item 17 in "C++ Coding Standards: 101 Rules, Guidelines and Best Practices" by Herb Sutter and Andrei Alexandrescu</li>
<li>Chapter 17 in "Clean Code - A handbook of agile software craftsmanship." by Robert C. Martin</li>
<li>Rule 20701 in "TRAIN REAL TIME DATA PROTOCOL Coding Rules" by Armin-Hagen Weiss, Bombardier</li>
<li><a href="http://wiki.c2.com/?MagicNumber">http://wiki.c2.com/?MagicNumber</a></li>
</ul>
</blockquote>
<p>Examples of magic values:</p>
<pre class="c++"><code>template&lt;typename T, size_t N&gt;
struct CustomType {
   T arr[N];
};

struct OtherType {
   CustomType&lt;int, 30&gt; container;
}
CustomType&lt;int, 30&gt; values;

double circleArea = 3.1415926535 * radius * radius;

double totalCharge = 1.08 * itemPrice;

int getAnswer() {
   return -3; // FILENOTFOUND
}

for (int mm = 1; mm &lt;= 12; ++mm) {
   std::cout &lt;&lt; month[mm] &lt;&lt; &#39;\n&#39;;
}</code></pre>
<p>Example with magic values refactored:</p>
<pre class="c++"><code>template&lt;typename T, size_t N&gt;
struct CustomType {
   T arr[N];
};

const size_t NUMBER_OF_ELEMENTS = 30;
using containerType = CustomType&lt;int, NUMBER_OF_ELEMENTS&gt;;

struct OtherType {
   containerType container;
}
containerType values;

double circleArea = M_PI * radius * radius;

const double TAX_RATE = 0.08;  // or make it variable and read from a file

double totalCharge = (1.0 + TAX_RATE) * itemPrice;

int getAnswer() {
   return E_FILE_NOT_FOUND;
}

for (int mm = 1; mm &lt;= MONTHS_IN_A_YEAR; ++mm) {
   std::cout &lt;&lt; month[mm] &lt;&lt; &#39;\n&#39;;
}</code></pre>
<p>For integral literals by default only <span class="title-ref">0</span> and <span class="title-ref">1</span> (and <span class="title-ref">-1</span>) integer values are accepted without a warning. This can be overridden with the <code class="interpreted-text" role="option">IgnoredIntegerValues</code> option. Negative values are accepted if their absolute value is present in the <code class="interpreted-text" role="option">IgnoredIntegerValues</code> list.</p>
<p>As a special case for integral values, all powers of two can be accepted without warning by enabling the <code class="interpreted-text" role="option">IgnorePowersOf2IntegerValues</code> option.</p>
<p>For floating point literals by default the <span class="title-ref">0.0</span> floating point value is accepted without a warning. The set of ignored floating point literals can be configured using the <code class="interpreted-text" role="option">IgnoredFloatingPointValues</code> option. For each value in that set, the given string value is converted to a floating-point value representation used by the target architecture. If a floating-point literal value compares equal to one of the converted values, then that literal is not diagnosed by this check. Because floating-point equality is used to determine whether to diagnose or not, the user needs to be aware of the details of floating-point representations for any values that cannot be precisely represented for their target architecture.</p>
<p>For each value in the <code class="interpreted-text" role="option">IgnoredFloatingPointValues</code> set, both the single-precision form and double-precision form are accepted (for example, if 3.14 is in the set, neither 3.14f nor 3.14 will produce a warning).</p>
<p>Scientific notation is supported for both source code input and option. Alternatively, the check for the floating point numbers can be disabled for all floating point values by enabling the <code class="interpreted-text" role="option">IgnoreAllFloatingPointValues</code> option.</p>
<p>Since values <span class="title-ref">0</span> and <span class="title-ref">0.0</span> are so common as the base counter of loops, or initialization values for sums, they are always accepted without warning, even if not present in the respective ignored values list.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredIntegerValues</p>
<p>Semicolon-separated list of magic positive integers that will be accepted without a warning. Default values are <span class="title-ref">{1, 2, 3, 4}</span>, and <span class="title-ref">0</span> is accepted unconditionally.</p>
</div>
<div class="option">
<p>IgnorePowersOf2IntegerValues</p>
<p>Boolean value indicating whether to accept all powers-of-two integer values without warning. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoredFloatingPointValues</p>
<p>Semicolon-separated list of magic positive floating point values that will be accepted without a warning. Default values are <span class="title-ref">{1.0, 100.0}</span> and <span class="title-ref">0.0</span> is accepted unconditionally.</p>
</div>
<div class="option">
<p>IgnoreAllFloatingPointValues</p>
<p>Boolean value indicating whether to accept all floating point values without warning. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoreBitFieldsWidths</p>
<p>Boolean value indicating whether to accept magic numbers as bit field widths without warning. This is useful for example for register definitions which are generated from hardware specifications. Default value is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreTypeAliases</p>
<p>Boolean value indicating whether to accept magic numbers in <code>typedef</code> or <code>using</code> declarations. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoreUserDefinedLiterals</p>
<p>Boolean value indicating whether to accept magic numbers in user-defined literals. Default value is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/magic-numbers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-make-member-function-const</key>
    <name>readability-make-member-function-const</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-make-member-function-const</p>
</div>
<h1 id="readability-make-member-function-const">readability-make-member-function-const</h1>
<p>Finds non-static member functions that can be made <code>const</code> because the functions don't use <code>this</code> in a non-const way.</p>
<p>This check tries to annotate methods according to <a href="https://isocpp.org/wiki/faq/const-correctness#logical-vs-physical-state">logical constness</a> (not physical constness). Therefore, it will suggest to add a <code>const</code> qualifier to a non-const method only if this method does something that is already possible though the public interface on a <code>const</code> pointer to the object:</p>
<ul>
<li>reading a public member variable</li>
<li>calling a public const-qualified member function</li>
<li>returning const-qualified <code>this</code></li>
<li>passing const-qualified <code>this</code> as a parameter.</li>
</ul>
<p>This check will also suggest to add a <code>const</code> qualifier to a non-const method if this method uses private data and functions in a limited number of ways where logical constness and physical constness coincide:</p>
<ul>
<li>reading a member variable of builtin type</li>
</ul>
<p>Specifically, this check will not suggest to add a <code>const</code> to a non-const method if the method reads a private member variable of pointer type because that allows to modify the pointee which might not preserve logical constness. For the same reason, it does not allow to call private member functions or member functions on private member variables.</p>
<p>In addition, this check ignores functions that</p>
<ul>
<li>are declared <code>virtual</code></li>
<li>contain a <code>const_cast</code></li>
<li>are templated or part of a class template</li>
<li>have an empty body</li>
<li>do not (implicitly) use <code>this</code> at all (see <code class="interpreted-text" role="doc">readability-convert-member-functions-to-static &lt;../readability/convert-member-functions-to-static&gt;</code>).</li>
</ul>
<p>The following real-world examples will be preserved by the check:</p>
<pre class="c++"><code>class E1 {
  Pimpl &amp;getPimpl() const;
public:
  int &amp;get() {
    // Calling a private member function disables this check.
    return getPimpl()-&gt;i;
  }
  ...
};

class E2 {
public:
  const int *get() const;
  // const_cast disables this check.
  S *get() {
    return const_cast&lt;int*&gt;(const_cast&lt;const C*&gt;(this)-&gt;get());
  }
  ...
};</code></pre>
<p>After applying modifications as suggested by the check, running the check again might find more opportunities to mark member functions <code>const</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/make-member-function-const.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-misleading-indentation</key>
    <name>readability-misleading-indentation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-misleading-indentation</p>
</div>
<h1 id="readability-misleading-indentation">readability-misleading-indentation</h1>
<p>Correct indentation helps to understand code. Mismatch of the syntactical structure and the indentation of the code may hide serious problems. Missing braces can also make it significantly harder to read the code, therefore it is important to use braces.</p>
<p>The way to avoid dangling else is to always check that an <code>else</code> belongs to the <code>if</code> that begins in the same column.</p>
<p>You can omit braces when your inner part of e.g. an <code>if</code> statement has only one statement in it. Although in that case you should begin the next statement in the same column with the <code>if</code>.</p>
<p>Examples:</p>
<pre class="c++"><code>// Dangling else:
if (cond1)
  if (cond2)
    foo1();
else
  foo2();  // Wrong indentation: else belongs to if(cond2) statement.

// Missing braces:
if (cond1)
  foo1();
  foo2();  // Not guarded by if(cond1).</code></pre>
<h2 id="limitations">Limitations</h2>
<p>Note that this check only works as expected when the tabs or spaces are used consistently and not mixed.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/misleading-indentation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-misplaced-array-index</key>
    <name>readability-misplaced-array-index</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-misplaced-array-index</p>
</div>
<h1 id="readability-misplaced-array-index">readability-misplaced-array-index</h1>
<p>This check warns for unusual array index syntax.</p>
<p>The following code has unusual array index syntax:</p>
<pre class="c++"><code>void f(int *X, int Y) {
  Y[X] = 0;
}</code></pre>
<p>becomes</p>
<pre class="c++"><code>void f(int *X, int Y) {
  X[Y] = 0;
}</code></pre>
<dl>
<dt>The check warns about such unusual syntax for readability reasons:</dt>
<dd><ul>
<li>There are programmers that are not familiar with this unusual syntax.</li>
<li>It is possible that variables are mixed up.</li>
</ul>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/misplaced-array-index.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-named-parameter</key>
    <name>readability-named-parameter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-named-parameter</p>
</div>
<h1 id="readability-named-parameter">readability-named-parameter</h1>
<p>Find functions with unnamed arguments.</p>
<p>The check implements the following rule originating in the Google C++ Style Guide:</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Function_Declarations_and_Definitions">https://google.github.io/styleguide/cppguide.html#Function_Declarations_and_Definitions</a></p>
<p>All parameters should have the same name in both the function declaration and definition. If a parameter is not utilized, its name can be commented out in a function definition.</p>
<pre class="c++"><code>int doingSomething(int a, int b, int c);

int doingSomething(int a, int b, int /*c*/) {
    // Ok: the third param is not used
    return a + b;
}</code></pre>
<p>Corresponding cpplint.py check name: <span class="title-ref">readability/function</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/named-parameter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-non-const-parameter</key>
    <name>readability-non-const-parameter</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-non-const-parameter</p>
</div>
<h1 id="readability-non-const-parameter">readability-non-const-parameter</h1>
<p>The check finds function parameters of a pointer type that could be changed to point to a constant type instead.</p>
<p>When <code>const</code> is used properly, many mistakes can be avoided. Advantages when using <code>const</code> properly:</p>
<ul>
<li>prevent unintentional modification of data;</li>
<li>get additional warnings such as using uninitialized data;</li>
<li>make it easier for developers to see possible side effects.</li>
</ul>
<p>This check is not strict about constness, it only warns when the constness will make the function interface safer.</p>
<pre class="c++"><code>// warning here; the declaration &quot;const char *p&quot; would make the function
// interface safer.
char f1(char *p) {
  return *p;
}

// no warning; the declaration could be more const &quot;const int * const p&quot; but
// that does not make the function interface safer.
int f2(const int *p) {
  return *p;
}

// no warning; making x const does not make the function interface safer
int f3(int x) {
  return x;
}

// no warning; Technically, *p can be const (&quot;const struct S *p&quot;). But making
// *p const could be misleading. People might think that it&#39;s safe to pass
// const data to this function.
struct S { int *a; int *b; };
int f3(struct S *p) {
  *(p-&gt;a) = 0;
}

// no warning; p is referenced by an lvalue.
void f4(int *p) {
  int &amp;x = *p;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/non-const-parameter.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-operators-representation</key>
    <name>readability-operators-representation</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-operators-representation</p>
</div>
<h1 id="readability-operators-representation">readability-operators-representation</h1>
<p>Enforces consistent token representation for invoked binary, unary and overloaded operators in C++ code. The check supports both traditional and alternative representations of operators, such as <code>&amp;&amp;</code> and <code>and</code>, <code>||</code> and <code>or</code>, and so on.</p>
<p>In the realm of C++ programming, developers have the option to choose between two distinct representations for operators: traditional token representation and alternative token representation. Traditional tokens utilize symbols, such as <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code>, while alternative tokens employ more descriptive words like <code>and</code>, <code>or</code>, and <code>not</code>.</p>
<p>In the following mapping table, a comprehensive list of traditional and alternative tokens, along with their corresponding representations, is presented:</p>
<table>
<caption>Token Representation Mapping Table</caption>
<thead>
<tr class="header">
<th>Traditional</th>
<th>Alternative</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>&amp;&amp;</code></td>
<td><code>and</code></td>
</tr>
<tr class="even">
<td><code>&amp;=</code></td>
<td><code>and_eq</code></td>
</tr>
<tr class="odd">
<td><code>&amp;</code></td>
<td><code>bitand</code></td>
</tr>
<tr class="even">
<td><code>|</code></td>
<td><code>bitor</code></td>
</tr>
<tr class="odd">
<td><code>~</code></td>
<td><code>compl</code></td>
</tr>
<tr class="even">
<td><code>!</code></td>
<td><code>not</code></td>
</tr>
<tr class="odd">
<td><code>!=</code></td>
<td><code>not_eq</code></td>
</tr>
<tr class="even">
<td><code>||</code></td>
<td><code>or</code></td>
</tr>
<tr class="odd">
<td><code>|=</code></td>
<td><code>or_eq</code></td>
</tr>
<tr class="even">
<td><code>^</code></td>
<td><code>xor</code></td>
</tr>
<tr class="odd">
<td><code>^=</code></td>
<td><code>xor_eq</code></td>
</tr>
</tbody>
</table>
<h2 id="example">Example</h2>
<pre class="c++"><code>// Traditional Token Representation:

if (!a||!b)
{
    // do something
}

// Alternative Token Representation:

if (not a or not b)
{
    // do something
}</code></pre>
<h2 id="options">Options</h2>
<p>Due to the distinct benefits and drawbacks of each representation, the default configuration doesn't enforce either. Explicit configuration is needed.</p>
<p>To configure check to enforce Traditional Token Representation for all operators set options to <span class="title-ref">&amp;&amp;;&amp;=;&amp;;|;~;!;!=;||;|=;^;^=</span>.</p>
<p>To configure check to enforce Alternative Token Representation for all operators set options to <span class="title-ref">and;and_eq;bitand;bitor;compl;not;not_eq;or;or_eq;xor;xor_eq</span>.</p>
<p>Developers do not need to enforce all operators, and can mix the representations as desired by specifying a semicolon-separated list of both traditional and alternative tokens in the configuration, such as <span class="title-ref">and;||;not</span>.</p>
<div class="option">
<p>BinaryOperators</p>
<p>This option allows you to specify a semicolon-separated list of binary operators for which you want to enforce specific token representation. The default value is empty string.</p>
</div>
<div class="option">
<p>OverloadedOperators</p>
<p>This option allows you to specify a semicolon-separated list of overloaded operators for which you want to enforce specific token representation. The default value is empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/operators-representation.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-qualified-auto</key>
    <name>readability-qualified-auto</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-qualified-auto</p>
</div>
<h1 id="readability-qualified-auto">readability-qualified-auto</h1>
<p>Adds pointer qualifications to <code>auto</code>-typed variables that are deduced to pointers.</p>
<p><a href="https://llvm.org/docs/CodingStandards.html#beware-unnecessary-copies-with-auto">LLVM Coding Standards</a> advises to make it obvious if a <code>auto</code> typed variable is a pointer. This check will transform <code>auto</code> to <code>auto *</code> when the type is deduced to be a pointer.</p>
<pre class="c++"><code>for (auto Data : MutatablePtrContainer) {
  change(*Data);
}
for (auto Data : ConstantPtrContainer) {
  observe(*Data);
}</code></pre>
<p>Would be transformed into:</p>
<pre class="c++"><code>for (auto *Data : MutatablePtrContainer) {
  change(*Data);
}
for (const auto *Data : ConstantPtrContainer) {
  observe(*Data);
}</code></pre>
<p>Note <code>const</code> <code>volatile</code> qualified types will retain their <code>const</code> and <code>volatile</code> qualifiers. Pointers to pointers will not be fully qualified.</p>
<pre class="c++"><code>const auto Foo = cast&lt;int *&gt;(Baz1);
const auto Bar = cast&lt;const int *&gt;(Baz2);
volatile auto FooBar = cast&lt;int *&gt;(Baz3);
auto BarFoo = cast&lt;int **&gt;(Baz4);</code></pre>
<p>Would be transformed into:</p>
<pre class="c++"><code>auto *const Foo = cast&lt;int *&gt;(Baz1);
const auto *const Bar = cast&lt;const int *&gt;(Baz2);
auto *volatile FooBar = cast&lt;int *&gt;(Baz3);
auto *BarFoo = cast&lt;int **&gt;(Baz4);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>AddConstToQualified</p>
<p>When set to <span class="title-ref">true</span> the check will add const qualifiers variables defined as <code>auto *</code> or <code>auto &amp;</code> when applicable. Default value is <span class="title-ref">true</span>.</p>
</div>
<pre class="c++"><code>auto Foo1 = cast&lt;const int *&gt;(Bar1);
auto *Foo2 = cast&lt;const int *&gt;(Bar2);
auto &amp;Foo3 = cast&lt;const int &amp;&gt;(Bar3);</code></pre>
<p>If AddConstToQualified is set to <span class="title-ref">false</span>, it will be transformed into:</p>
<pre class="c++"><code>const auto *Foo1 = cast&lt;const int *&gt;(Bar1);
auto *Foo2 = cast&lt;const int *&gt;(Bar2);
auto &amp;Foo3 = cast&lt;const int &amp;&gt;(Bar3);</code></pre>
<p>Otherwise it will be transformed into:</p>
<pre class="c++"><code>const auto *Foo1 = cast&lt;const int *&gt;(Bar1);
const auto *Foo2 = cast&lt;const int *&gt;(Bar2);
const auto &amp;Foo3 = cast&lt;const int &amp;&gt;(Bar3);</code></pre>
<p>Note in the LLVM alias, the default value is <span class="title-ref">false</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/qualified-auto.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-access-specifiers</key>
    <name>readability-redundant-access-specifiers</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-access-specifiers</p>
</div>
<h1 id="readability-redundant-access-specifiers">readability-redundant-access-specifiers</h1>
<p>Finds classes, structs, and unions containing redundant member (field and method) access specifiers.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>class Foo {
public:
  int x;
  int y;
public:
  int z;
protected:
  int a;
public:
  int c;
}</code></pre>
<p>In the example above, the second <code>public</code> declaration can be removed without any changes of behavior.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckFirstDeclaration</p>
<p>If set to <span class="title-ref">true</span>, the check will also diagnose if the first access specifier declaration is redundant (e.g. <code>private</code> inside <code>class</code>, or <code>public</code> inside <code>struct</code> or <code>union</code>). Default is <span class="title-ref">false</span>.</p>
</div>
<h3 id="example-1">Example</h3>
<pre class="c++"><code>struct Bar {
public:
  int x;
}</code></pre>
<p>If <span class="title-ref">CheckFirstDeclaration</span> option is enabled, a warning about redundant access specifier will be emitted, because <code>public</code> is the default member access for structs.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-access-specifiers.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-casting</key>
    <name>readability-redundant-casting</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-casting</p>
</div>
<h1 id="readability-redundant-casting">readability-redundant-casting</h1>
<p>Detects explicit type casting operations that involve the same source and destination types, and subsequently recommend their removal. Covers a range of explicit casting operations, including <code>static_cast</code>, <code>const_cast</code>, C-style casts, and <code>reinterpret_cast</code>. Its primary objective is to enhance code readability and maintainability by eliminating unnecessary type casting.</p>
<pre class="c++"><code>int value = 42;
int result = static_cast&lt;int&gt;(value);</code></pre>
<p>In this example, the <code>static_cast&lt;int&gt;(value)</code> is redundant, as it performs a cast from an <code>int</code> to another <code>int</code>.</p>
<p>Casting operations involving constructor conversions, user-defined conversions, functional casts, type-dependent casts, casts between distinct type aliases that refer to the same underlying type, as well as bitfield-related casts and casts directly from lvalue to rvalue, are all disregarded by the check.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>IgnoreTypeAliases</p>
<p>When set to <span class="title-ref">false</span>, the check will consider type aliases, and when set to <span class="title-ref">true</span>, it will resolve all type aliases and operate on the underlying types. Default is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-casting.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-control-flow</key>
    <name>readability-redundant-control-flow</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-control-flow</p>
</div>
<h1 id="readability-redundant-control-flow">readability-redundant-control-flow</h1>
<p>This check looks for procedures (functions returning no value) with <code>return</code> statements at the end of the function. Such <code>return</code> statements are redundant.</p>
<p>Loop statements (<code>for</code>, <code>while</code>, <code>do while</code>) are checked for redundant <code>continue</code> statements at the end of the loop body.</p>
<p>Examples:</p>
<p>The following function <span class="title-ref">f</span> contains a redundant <code>return</code> statement:</p>
<pre class="c++"><code>extern void g();
void f() {
  g();
  return;
}</code></pre>
<p>becomes</p>
<pre class="c++"><code>extern void g();
void f() {
  g();
}</code></pre>
<p>The following function <span class="title-ref">k</span> contains a redundant <code>continue</code> statement:</p>
<pre class="c++"><code>void k() {
  for (int i = 0; i &lt; 10; ++i) {
    continue;
  }
}</code></pre>
<p>becomes</p>
<pre class="c++"><code>void k() {
  for (int i = 0; i &lt; 10; ++i) {
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-control-flow.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-declaration</key>
    <name>readability-redundant-declaration</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-declaration</p>
</div>
<h1 id="readability-redundant-declaration">readability-redundant-declaration</h1>
<p>Finds redundant variable and function declarations.</p>
<pre class="c++"><code>extern int X;
extern int X;</code></pre>
<p>becomes</p>
<pre class="c++"><code>extern int X;</code></pre>
<p>Such redundant declarations can be removed without changing program behavior. They can for instance be unintentional left overs from previous refactorings when code has been moved around. Having redundant declarations could in worst case mean that there are typos in the code that cause bugs.</p>
<p>Normally the code can be automatically fixed, <code class="interpreted-text" role="program">clang-tidy</code> can remove the second declaration. However there are 2 cases when you need to fix the code manually:</p>
<ul>
<li>When the declarations are in different header files;</li>
<li>When multiple variables are declared together.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to <span class="title-ref">true</span>, the check will not give warnings inside macros. Default is <span class="title-ref">true</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-declaration.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-function-ptr-dereference</key>
    <name>readability-redundant-function-ptr-dereference</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-function-ptr-dereference</p>
</div>
<h1 id="readability-redundant-function-ptr-dereference">readability-redundant-function-ptr-dereference</h1>
<p>Finds redundant dereferences of a function pointer.</p>
<p>Before:</p>
<pre class="c++"><code>int f(int,int);
int (*p)(int, int) = &amp;f;

int i = (**p)(10, 50);</code></pre>
<p>After:</p>
<pre class="c++"><code>int f(int,int);
int (*p)(int, int) = &amp;f;

int i = (*p)(10, 50);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-function-ptr-dereference.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-inline-specifier</key>
    <name>readability-redundant-inline-specifier</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-inline-specifier</p>
</div>
<h1 id="readability-redundant-inline-specifier">readability-redundant-inline-specifier</h1>
<p>Detects redundant <code>inline</code> specifiers on function and variable declarations.</p>
<p>Examples:</p>
<pre class="c++"><code>constexpr inline void f() {}</code></pre>
<p>In the example above the keyword <code>inline</code> is redundant since constexpr functions are implicitly inlined</p>
<pre class="c++"><code>class MyClass {
    inline void myMethod() {}
};</code></pre>
<p>In the example above the keyword <code>inline</code> is redundant since member functions defined entirely inside a class/struct/union definition are implicitly inlined.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>If set to <span class="title-ref">true</span>, the check will also flag functions and variables that already have internal linkage as redundant.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-inline-specifier.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-member-init</key>
    <name>readability-redundant-member-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-member-init</p>
</div>
<h1 id="readability-redundant-member-init">readability-redundant-member-init</h1>
<p>Finds member initializations that are unnecessary because the same default constructor would be called if they were not present.</p>
<h2 id="example">Example</h2>
<pre class="c++"><code>// Explicitly initializing the member s and v is unnecessary.
class Foo {
public:
  Foo() : s() {}

private:
  std::string s;
  std::vector&lt;int&gt; v {};
};</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreBaseInCopyConstructors</p>
<p>Default is <span class="title-ref">false</span>.</p>
<p>When <span class="title-ref">true</span>, the check will ignore unnecessary base class initializations within copy constructors, since some compilers issue warnings/errors when base classes are not explicitly initialized in copy constructors. For example, <code>gcc</code> with <code>-Wextra</code> or <code>-Werror=extra</code> issues warning or error <code>base class 'Bar' should be explicitly initialized in the copy constructor</code> if <code>Bar()</code> were removed in the following example:</p>
</div>
<pre class="c++"><code>// Explicitly initializing member s and base class Bar is unnecessary.
struct Foo : public Bar {
  // Remove s() below. If IgnoreBaseInCopyConstructors!=0, keep Bar().
  Foo(const Foo&amp; foo) : Bar(), s() {}
  std::string s;
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-member-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-preprocessor</key>
    <name>readability-redundant-preprocessor</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-preprocessor</p>
</div>
<h1 id="readability-redundant-preprocessor">readability-redundant-preprocessor</h1>
<p>Finds potentially redundant preprocessor directives. At the moment the following cases are detected:</p>
<ul>
<li><span class="title-ref">#ifdef</span> .. <span class="title-ref">#endif</span> pairs which are nested inside an outer pair with the same condition. For example:</li>
</ul>
<pre class="c++"><code>#ifdef FOO
#ifdef FOO // inner ifdef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li>Same for <span class="title-ref">#ifndef</span> .. <span class="title-ref">#endif</span> pairs. For example:</li>
</ul>
<pre class="c++"><code>#ifndef FOO
#ifndef FOO // inner ifndef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li><span class="title-ref">#ifndef</span> inside an <span class="title-ref">#ifdef</span> with the same condition:</li>
</ul>
<pre class="c++"><code>#ifdef FOO
#ifndef FOO // inner ifndef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li><span class="title-ref">#ifdef</span> inside an <span class="title-ref">#ifndef</span> with the same condition:</li>
</ul>
<pre class="c++"><code>#ifndef FOO
#ifdef FOO // inner ifdef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li><span class="title-ref">#if</span> .. <span class="title-ref">#endif</span> pairs which are nested inside an outer pair with the same condition. For example:</li>
</ul>
<pre class="c++"><code>#define FOO 4
#if FOO == 4
#if FOO == 4 // inner if is considered redundant
void f();
#endif
#endif</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-preprocessor.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-redundant-smartptr-get</key>
    <name>readability-redundant-smartptr-get</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-smartptr-get</p>
</div>
<h1 id="readability-redundant-smartptr-get">readability-redundant-smartptr-get</h1>
<p>Find and remove redundant calls to smart pointer's <code>.get()</code> method.</p>
<p>Examples:</p>
<pre class="c++"><code>ptr.get()-&gt;Foo()  ==&gt;  ptr-&gt;Foo()
*ptr.get()  ==&gt;  *ptr
*ptr-&gt;get()  ==&gt;  **ptr
if (ptr.get() == nullptr) ... =&gt; if (ptr == nullptr) ...</code></pre>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">true</span>), the check will not warn about calls inside macros.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-smartptr-get.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-redundant-string-cstr</key>
    <name>readability-redundant-string-cstr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-string-cstr</p>
</div>
<h1 id="readability-redundant-string-cstr">readability-redundant-string-cstr</h1>
<p>Finds unnecessary calls to <code>std::string::c_str()</code> and <code>std::string::data()</code>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StringParameterFunctions</p>
<p>A semicolon-separated list of (fully qualified) function/method/operator names, with the requirement that any parameter currently accepting a <code>const char*</code> input should also be able to accept <code>std::string</code> inputs, or proper overload candidates that can do so should exist. This can be used to configure functions such as <code>fmt::format</code>, <code>spdlog::logger::info</code>, or wrappers around these and similar functions. The default value is the empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-string-cstr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>MINOR</severity>
    </rule>
  <rule>
    <key>readability-redundant-string-init</key>
    <name>readability-redundant-string-init</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-redundant-string-init</p>
</div>
<h1 id="readability-redundant-string-init">readability-redundant-string-init</h1>
<p>Finds unnecessary string initializations.</p>
<h2 id="examples">Examples</h2>
<pre class="c++"><code>// Initializing string with empty string literal is unnecessary.
std::string a = &quot;&quot;;
std::string b(&quot;&quot;);

// becomes

std::string a;
std::string b;

// Initializing a string_view with an empty string literal produces an
// instance that compares equal to string_view().
std::string_view a = &quot;&quot;;
std::string_view b(&quot;&quot;);

// becomes
std::string_view a;
std::string_view b;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringNames</p>
<p>Default is <span class="title-ref">::std::basic_string;::std::basic_string_view</span>.</p>
<p>Semicolon-delimited list of class names to apply this check to. By default <span class="title-ref">::std::basic_string</span> applies to <code>std::string</code> and <code>std::wstring</code>. Set to e.g. <span class="title-ref">::std::basic_string;llvm::StringRef;QString</span> to perform this check on custom classes.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/redundant-string-init.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-reference-to-constructed-temporary</key>
    <name>readability-reference-to-constructed-temporary</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-reference-to-constructed-temporary</p>
</div>
<h1 id="readability-reference-to-constructed-temporary">readability-reference-to-constructed-temporary</h1>
<p>Detects C++ code where a reference variable is used to extend the lifetime of a temporary object that has just been constructed.</p>
<p>This construction is often the result of multiple code refactorings or a lack of developer knowledge, leading to confusion or subtle bugs. In most cases, what the developer really wanted to do is create a new variable rather than extending the lifetime of a temporary object.</p>
<p>Examples of problematic code include:</p>
<pre class="c++"><code>const std::string&amp; str(&quot;hello&quot;);

struct Point { int x; int y; };
const Point&amp; p = { 1, 2 };</code></pre>
<p>In the first example, a <code>const std::string&amp;</code> reference variable <code>str</code> is assigned a temporary object created by the <code>std::string("hello")</code> constructor. In the second example, a <code>const Point&amp;</code> reference variable <code>p</code> is assigned an object that is constructed from an initializer list <code>{ 1, 2 }</code>. Both of these examples extend the lifetime of the temporary object to the lifetime of the reference variable, which can make it difficult to reason about and may lead to subtle bugs or misunderstanding.</p>
<p>To avoid these issues, it is recommended to change the reference variable to a (<code>const</code>) value variable.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/reference-to-constructed-temporary.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-simplify-boolean-expr</key>
    <name>readability-simplify-boolean-expr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-simplify-boolean-expr</p>
</div>
<h1 id="readability-simplify-boolean-expr">readability-simplify-boolean-expr</h1>
<p>Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly. Simplifies boolean expressions by application of DeMorgan's Theorem.</p>
<p>Examples:</p>
<table>
<thead>
<tr class="header">
<th>Initial expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>if (b == true)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b == false)</code></td>
<td><blockquote>
<p><code>if (!b)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (b &amp;&amp; true)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b &amp;&amp; false)</code></td>
<td><blockquote>
<p><code>if (false)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (b || true)</code></td>
<td><blockquote>
<p><code>if (true)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b || false)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>e ? true : false</code></td>
<td><blockquote>
<p><code>e</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>e ? false : true</code></td>
<td><blockquote>
<p><code>!e</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (true) t(); else f();</code></td>
<td><blockquote>
<p><code>t();</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (false) t(); else f();</code></td>
<td><blockquote>
<p><code>f();</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) return true; else return false;</code></td>
<td><blockquote>
<p><code>return e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) return false; else return true;</code></td>
<td><blockquote>
<p><code>return !e;</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) b = true; else b = false;</code></td>
<td><blockquote>
<p><code>b = e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) b = false; else b = true;</code></td>
<td><blockquote>
<p><code>b = !e;</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) return true; return false;</code></td>
<td><blockquote>
<p><code>return e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) return false; return true;</code></td>
<td><blockquote>
<p><code>return !e;</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>!(!a || b)</code></td>
<td><blockquote>
<p><code>a &amp;&amp; !b</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>!(a || !b)</code></td>
<td><blockquote>
<p><code>!a &amp;&amp; b</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>!(!a || !b)</code></td>
<td><blockquote>
<p><code>a &amp;&amp; b</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>!(!a &amp;&amp; b)</code></td>
<td><blockquote>
<p><code>a || !b</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>!(a &amp;&amp; !b)</code></td>
<td><blockquote>
<p><code>!a || b</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>!(!a &amp;&amp; !b)</code></td>
<td><blockquote>
<p><code>a || b</code></p>
</blockquote></td>
</tr>
</tbody>
</table>
<dl>
<dt>The resulting expression <code>e</code> is modified as follows:</dt>
<dd><ol type="1">
<li>Unnecessary parentheses around the expression are removed.</li>
<li>Negated applications of <code>!</code> are eliminated.</li>
<li>Negated applications of comparison operators are changed to use the opposite condition.</li>
<li>Implicit conversions of pointers, including pointers to members, to <code>bool</code> are replaced with explicit comparisons to <code>nullptr</code> in C++11 or <code>NULL</code> in C++98/03.</li>
<li>Implicit casts to <code>bool</code> are replaced with explicit casts to <code>bool</code>.</li>
<li>Object expressions with <code>explicit operator bool</code> conversion operators are replaced with explicit casts to <code>bool</code>.</li>
<li>Implicit conversions of integral types to <code>bool</code> are replaced with explicit comparisons to <code>0</code>.</li>
</ol>
</dd>
<dt>Examples:</dt>
<dd><ol type="1">
<li><p>The ternary assignment <code>bool b = (i &lt; 0) ? true : false;</code> has redundant parentheses and becomes <code>bool b = i &lt; 0;</code>.</p></li>
<li><p>The conditional return <code>if (!b) return false; return true;</code> has an implied double negation and becomes <code>return b;</code>.</p></li>
<li><p>The conditional return <code>if (i &lt; 0) return false; return true;</code> becomes <code>return i &gt;= 0;</code>.</p>
<p>The conditional return <code>if (i != 0) return false; return true;</code> becomes <code>return i == 0;</code>.</p></li>
<li><p>The conditional return <code>if (p) return true; return false;</code> has an implicit conversion of a pointer to <code>bool</code> and becomes <code>return p != nullptr;</code>.</p>
<p>The ternary assignment <code>bool b = (i &amp; 1) ? true : false;</code> has an implicit conversion of <code>i &amp; 1</code> to <code>bool</code> and becomes <code>bool b = (i &amp; 1) != 0;</code>.</p></li>
<li><p>The conditional return <code>if (i &amp; 1) return true; else return false;</code> has an implicit conversion of an integer quantity <code>i &amp; 1</code> to <code>bool</code> and becomes <code>return (i &amp; 1) != 0;</code></p></li>
<li><p>Given <code>struct X { explicit operator bool(); };</code>, and an instance <code>x</code> of <code>struct X</code>, the conditional return <code>if (x) return true; return false;</code> becomes <code>return static_cast&lt;bool&gt;(x);</code></p></li>
</ol>
</dd>
</dl>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If <span class="title-ref">true</span>, ignore boolean expressions originating from expanded macros. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>ChainedConditionalReturn</p>
<p>If <span class="title-ref">true</span>, conditional boolean return statements at the end of an <code>if/else if</code> chain will be transformed. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>ChainedConditionalAssignment</p>
<p>If <span class="title-ref">true</span>, conditional boolean assignments at the end of an <code>if/else if</code> chain will be transformed. Default is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>SimplifyDeMorgan</p>
<p>If <span class="title-ref">true</span>, DeMorgan's Theorem will be applied to simplify negated conjunctions and disjunctions. Default is <span class="title-ref">true</span>.</p>
</div>
<div class="option">
<p>SimplifyDeMorganRelaxed</p>
<p>If <span class="title-ref">true</span>, <code class="interpreted-text" role="option">SimplifyDeMorgan</code> will also transform negated conjunctions and disjunctions where there is no negation on either operand. This option has no effect if <code class="interpreted-text" role="option">SimplifyDeMorgan</code> is <span class="title-ref">false</span>. Default is <span class="title-ref">false</span>.</p>
<p>When Enabled:</p>
<pre class=""><code>bool X = !(A &amp;&amp; B)
bool Y = !(A || B)</code></pre>
<p>Would be transformed to:</p>
<pre class=""><code>bool X = !A || !B
bool Y = !A &amp;&amp; !B</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/simplify-boolean-expr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-simplify-subscript-expr</key>
    <name>readability-simplify-subscript-expr</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-simplify-subscript-expr</p>
</div>
<h1 id="readability-simplify-subscript-expr">readability-simplify-subscript-expr</h1>
<p>This check simplifies subscript expressions. Currently this covers calling <code>.data()</code> and immediately doing an array subscript operation to obtain a single element, in which case simply calling <code>operator[]</code> suffice.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string s = ...;
char c = s.data()[i];  // char c = s[i];</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Types</p>
<p>The list of type(s) that triggers this check. Default is <span class="title-ref">::std::basic_string;::std::basic_string_view;::std::vector;::std::array;::std::span</span></p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/simplify-subscript-expr.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-static-accessed-through-instance</key>
    <name>readability-static-accessed-through-instance</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-static-accessed-through-instance</p>
</div>
<h1 id="readability-static-accessed-through-instance">readability-static-accessed-through-instance</h1>
<p>Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id.</p>
<p>Example:</p>
<p>The following code:</p>
<pre class="c++"><code>struct C {
  static void foo();
  static int x;
  enum { E1 };
  enum E { E2 };
};

C *c1 = new C();
c1-&gt;foo();
c1-&gt;x;
c1-&gt;E1;
c1-&gt;E2;</code></pre>
<p>is changed to:</p>
<pre class="c++"><code>C *c1 = new C();
C::foo();
C::x;
C::E1;
C::E2;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/static-accessed-through-instance.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-static-definition-in-anonymous-namespace</key>
    <name>readability-static-definition-in-anonymous-namespace</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-static-definition-in-anonymous-namespace</p>
</div>
<h1 id="readability-static-definition-in-anonymous-namespace">readability-static-definition-in-anonymous-namespace</h1>
<p>Finds static function and variable definitions in anonymous namespace.</p>
<p>In this case, <code>static</code> is redundant, because anonymous namespace limits the visibility of definitions to a single translation unit.</p>
<pre class="c++"><code>namespace {
  static int a = 1; // Warning.
  static const int b = 1; // Warning.
  namespace inner {
    static int c = 1; // Warning.
  }
}</code></pre>
<p>The check will apply a fix by removing the redundant <code>static</code> qualifier.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/static-definition-in-anonymous-namespace.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-string-compare</key>
    <name>readability-string-compare</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-string-compare</p>
</div>
<h1 id="readability-string-compare">readability-string-compare</h1>
<p>Finds string comparisons using the compare method.</p>
<p>A common mistake is to use the string's <code>compare</code> method instead of using the equality or inequality operators. The compare method is intended for sorting functions and thus returns a negative number, a positive number or zero depending on the lexicographical relationship between the strings compared. If an equality or inequality check can suffice, that is recommended. This is recommended to avoid the risk of incorrect interpretation of the return value and to simplify the code. The string equality and inequality operators can also be faster than the <code>compare</code> method due to early termination.</p>
<p>Examples:</p>
<pre class="c++"><code>std::string str1{&quot;a&quot;};
std::string str2{&quot;b&quot;};

// use str1 != str2 instead.
if (str1.compare(str2)) {
}

// use str1 == str2 instead.
if (!str1.compare(str2)) {
}

// use str1 == str2 instead.
if (str1.compare(str2) == 0) {
}

// use str1 != str2 instead.
if (str1.compare(str2) != 0) {
}

// use str1 == str2 instead.
if (0 == str1.compare(str2)) {
}

// use str1 != str2 instead.
if (0 != str1.compare(str2)) {
}

// Use str1 == &quot;foo&quot; instead.
if (str1.compare(&quot;foo&quot;) == 0) {
}</code></pre>
<p>The above code examples show the list of if-statements that this check will give a warning for. All of them uses <code>compare</code> to check if equality or inequality of two strings instead of using the correct operators.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/string-compare.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-suspicious-call-argument</key>
    <name>readability-suspicious-call-argument</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-suspicious-call-argument</p>
</div>
<h1 id="readability-suspicious-call-argument">readability-suspicious-call-argument</h1>
<p>Finds function calls where the arguments passed are provided out of order, based on the difference between the argument name and the parameter names of the function.</p>
<p>Given a function call <code>f(foo, bar);</code> and a function signature <code>void f(T tvar, U uvar)</code>, the arguments <code>foo</code> and <code>bar</code> are swapped if <code>foo</code> (the argument name) is more similar to <code>uvar</code> (the other parameter) than <code>tvar</code> (the parameter it is currently passed to) <strong>and</strong> <code>bar</code> is more similar to <code>tvar</code> than <code>uvar</code>.</p>
<p>Warnings might indicate either that the arguments are swapped, or that the names' cross-similarity might hinder code comprehension.</p>
<h2 id="heuristics">Heuristics</h2>
<p>The following heuristics are implemented in the check. If <strong>any</strong> of the enabled heuristics deem the arguments to be provided out of order, a warning will be issued.</p>
<p>The heuristics themselves are implemented by considering pairs of strings, and are symmetric, so in the following there is no distinction on which string is the argument name and which string is the parameter name.</p>
<h3 id="equality">Equality</h3>
<p>The most trivial heuristic, which compares the two strings for case-insensitive equality.</p>
<h3 id="abbreviation_heuristic">Abbreviation</h3>
<p>Common abbreviations can be specified which will deem the strings similar if the abbreviated and the abbreviation stand together. For example, if <code>src</code> is registered as an abbreviation for <code>source</code>, then the following code example will be warned about.</p>
<pre class="c++"><code>void foo(int source, int x);

foo(b, src);</code></pre>
<p>The abbreviations to recognise can be configured with the <code class="interpreted-text" role="ref">Abbreviations&lt;opt_Abbreviations&gt;</code> check option. This heuristic is case-insensitive.</p>
<h3 id="prefix">Prefix</h3>
<p>The <em>prefix</em> heuristic reports if one of the strings is a sufficiently long prefix of the other string, e.g. <code>target</code> to <code>targetPtr</code>. The similarity percentage is the length ratio of the prefix to the longer string, in the previous example, it would be <span class="title-ref">6 / 9 = 66.66...</span>%.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">25</span>% dissimilar and above <span class="title-ref">30</span>% similar. This heuristic is case-insensitive.</p>
<h3 id="suffix">Suffix</h3>
<p>Analogous to the <span class="title-ref">Prefix</span> heuristic. In the case of <code>oldValue</code> and <code>value</code> compared, the similarity percentage is <span class="title-ref">8 / 5 = 62.5</span>%.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">25</span>% dissimilar and above <span class="title-ref">30</span>% similar. This heuristic is case-insensitive.</p>
<h3 id="substring">Substring</h3>
<p>The substring heuristic combines the prefix and the suffix heuristic, and tries to find the <em>longest common substring</em> in the two strings provided. The similarity percentage is the ratio of the found longest common substring against the <em>longer</em> of the two input strings. For example, given <code>val</code> and <code>rvalue</code>, the similarity is <span class="title-ref">3 / 6 = 50</span>%. If no characters are common in the two string, <span class="title-ref">0</span>%.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">40</span>% dissimilar and above <span class="title-ref">50</span>% similar. This heuristic is case-insensitive.</p>
<h3 id="levenshtein-distance-as-levenshtein">Levenshtein distance (as <span class="title-ref">Levenshtein</span>)</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a> describes how many single-character changes (additions, changes, or removals) must be applied to transform one string into another.</p>
<p>The Levenshtein distance is translated into a similarity percentage by dividing it with the length of the <em>longer</em> string, and taking its complement with regards to <span class="title-ref">100</span>%. For example, given <code>something</code> and <code>anything</code>, the distance is <span class="title-ref">4</span> edits, and the similarity percentage is <span class="title-ref">100</span>% <span class="title-ref">- 4 / 9 = 55.55...</span>%.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">50</span>% dissimilar and above <span class="title-ref">66</span>% similar. This heuristic is case-sensitive.</p>
<h3 id="jaro--winkler-distance-as-jarowinkler">Jaro--Winkler distance (as <span class="title-ref">JaroWinkler</span>)</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Jaro-Winkler_distance">Jaro--Winkler distance</a> is an edit distance like the Levenshtein distance. It is calculated from the amount of common characters that are sufficiently close to each other in position, and to-be-changed characters. The original definition of Jaro has been extended by Winkler to weigh prefix similarities more. The similarity percentage is expressed as an average of the common and non-common characters against the length of both strings.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">75</span>% dissimilar and above <span class="title-ref">85</span>% similar. This heuristic is case-insensitive.</p>
<h3 id="sorensen--dice-coefficient-as-dice">Sorensen--Dice coefficient (as <span class="title-ref">Dice</span>)</h3>
<p>The <a href="http://en.wikipedia.org/wiki/Sorensen-Dice_coefficient">Sorensen--Dice coefficient</a> was originally defined to measure the similarity of two sets. Formally, the coefficient is calculated by dividing <span class="title-ref">2 * #(intersection)</span> with <span class="title-ref">#(set1) + #(set2)</span>, where <span class="title-ref">#()</span> is the cardinality function of sets. This metric is applied to strings by creating bigrams (substring sequences of length 2) of the two strings and using the set of bigrams for the two strings as the two sets.</p>
<p>This heuristic can be configured with <code class="interpreted-text" role="ref">bounds&lt;opt_Bounds&gt;</code>. The default bounds are: below <span class="title-ref">60</span>% dissimilar and above <span class="title-ref">70</span>% similar. This heuristic is case-insensitive.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>MinimumIdentifierNameLength</p>
<p>Sets the minimum required length the argument and parameter names need to have. Names shorter than this length will be ignored. Defaults to <span class="title-ref">3</span>.</p>
</div>
<div id="opt_Abbreviations">
<div class="option">
<p>Abbreviations</p>
<p>For the <strong>Abbreviation</strong> heuristic (<code class="interpreted-text" role="ref">see here&lt;abbreviation_heuristic&gt;</code>), this option configures the abbreviations in the <span class="title-ref">"abbreviation=abbreviated_value"</span> format. The option is a string, with each value joined by <span class="title-ref">";"</span>.</p>
<p>By default, the following abbreviations are set:</p>
<blockquote>
<ul>
<li><span class="title-ref">addr=address</span></li>
<li><span class="title-ref">arr=array</span></li>
<li><span class="title-ref">attr=attribute</span></li>
<li><span class="title-ref">buf=buffer</span></li>
<li><span class="title-ref">cl=client</span></li>
<li><span class="title-ref">cnt=count</span></li>
<li><span class="title-ref">col=column</span></li>
<li><span class="title-ref">cpy=copy</span></li>
<li><span class="title-ref">dest=destination</span></li>
<li><span class="title-ref">dist=distance</span></li>
<li><span class="title-ref">dst=distance</span></li>
<li><span class="title-ref">elem=element</span></li>
<li><span class="title-ref">hght=height</span></li>
<li><span class="title-ref">i=index</span></li>
<li><span class="title-ref">idx=index</span></li>
<li><span class="title-ref">len=length</span></li>
<li><span class="title-ref">ln=line</span></li>
<li><span class="title-ref">lst=list</span></li>
<li><span class="title-ref">nr=number</span></li>
<li><span class="title-ref">num=number</span></li>
<li><span class="title-ref">pos=position</span></li>
<li><span class="title-ref">ptr=pointer</span></li>
<li><span class="title-ref">ref=reference</span></li>
<li><span class="title-ref">src=source</span></li>
<li><span class="title-ref">srv=server</span></li>
<li><span class="title-ref">stmt=statement</span></li>
<li><span class="title-ref">str=string</span></li>
<li><span class="title-ref">val=value</span></li>
<li><span class="title-ref">var=variable</span></li>
<li><span class="title-ref">vec=vector</span></li>
<li><span class="title-ref">wdth=width</span></li>
</ul>
</blockquote>
</div>
</div>
<p>The configuration options for each implemented heuristic (see above) is constructed dynamically. In the following, <span class="title-ref">&lt;HeuristicName&gt;</span> refers to one of the keys from the heuristics implemented.</p>
<div class="option">
<p>&lt;HeuristicName&gt;</p>
<p><span class="title-ref">True</span> or <span class="title-ref">False</span>, whether a particular heuristic, such as <span class="title-ref">Equality</span> or <span class="title-ref">Levenshtein</span> is enabled.</p>
<p>Defaults to <span class="title-ref">True</span> for every heuristic.</p>
</div>
<div id="opt_Bounds">
<div class="option">
<p>&lt;HeuristicName&gt;DissimilarBelow, &lt;HeuristicName&gt;SimilarAbove</p>
<p>A value between <span class="title-ref">0</span> and <span class="title-ref">100</span>, expressing a percentage. The bounds set what percentage of similarity the heuristic must deduce for the two identifiers to be considered similar or dissimilar by the check.</p>
<p>Given arguments <code>arg1</code> and <code>arg2</code> passed to <code>param1</code> and <code>param2</code>, respectively, the bounds check is performed in the following way: If the similarity of the currently passed argument order (<code>arg1</code> to <code>param1</code>) is <strong>below</strong> the <span class="title-ref">DissimilarBelow</span> threshold, and the similarity of the suggested swapped order (<code>arg1</code> to <code>param2</code>) is <strong>above</strong> the <span class="title-ref">SimilarAbove</span> threshold, the swap is reported.</p>
<p>For the defaults of each heuristic, <code class="interpreted-text" role="ref">see above&lt;heuristics&gt;</code>.</p>
</div>
</div>
<h2 id="name-synthesis">Name synthesis</h2>
<p>When comparing the argument names and parameter names, the following logic is used to gather the names for comparison:</p>
<p>Parameter names are the identifiers as written in the source code.</p>
<p>Argument names are:</p>
<blockquote>
<ul>
<li>If a variable is passed, the variable's name.</li>
<li>If a subsequent function call's return value is used as argument, the called function's name.</li>
<li>Otherwise, empty string.</li>
</ul>
</blockquote>
<p>Empty argument or parameter names are ignored by the heuristics.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/suspicious-call-argument.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-uniqueptr-delete-release</key>
    <name>readability-uniqueptr-delete-release</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-uniqueptr-delete-release</p>
</div>
<h1 id="readability-uniqueptr-delete-release">readability-uniqueptr-delete-release</h1>
<p>Replace <code>delete &lt;unique_ptr&gt;.release()</code> with <code>&lt;unique_ptr&gt; = nullptr</code>. The latter is shorter, simpler and does not require use of raw pointer APIs.</p>
<pre class="c++"><code>std::unique_ptr&lt;int&gt; P;
delete P.release();

// becomes

std::unique_ptr&lt;int&gt; P;
P = nullptr;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>PreferResetCall</p>
<p>If <span class="title-ref">true</span>, refactor by calling the reset member function instead of assigning to <code>nullptr</code>. Default value is <span class="title-ref">false</span>.</p>
<pre class="c++"><code>std::unique_ptr&lt;int&gt; P;
delete P.release();

// becomes

std::unique_ptr&lt;int&gt; P;
P.reset();</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/uniqueptr-delete-release.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-uppercase-literal-suffix</key>
    <name>readability-uppercase-literal-suffix</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-uppercase-literal-suffix</p>
</div>
<h1 id="readability-uppercase-literal-suffix">readability-uppercase-literal-suffix</h1>
<p><span class="title-ref">cert-dcl16-c</span> redirects here as an alias for this check. By default, only the suffixes that begin with <code>l</code> (<code>l</code>, <code>ll</code>, <code>lu</code>, <code>llu</code>, but not <code>u</code>, <code>ul</code>, <code>ull</code>) are diagnosed by that alias.</p>
<p><span class="title-ref">hicpp-uppercase-literal-suffix</span> redirects here as an alias for this check.</p>
<p>Detects when the integral literal or floating point (decimal or hexadecimal) literal has a non-uppercase suffix and provides a fix-it hint with the uppercase suffix.</p>
<p>All valid combinations of suffixes are supported.</p>
<pre class="c"><code>auto x = 1;  // OK, no suffix.

auto x = 1u; // warning: integer literal suffix &#39;u&#39; is not upper-case

auto x = 1U; // OK, suffix is uppercase.

...</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>NewSuffixes</p>
<p>Optionally, a list of the destination suffixes can be provided. When the suffix is found, a case-insensitive lookup in that list is made, and if a replacement is found that is different from the current suffix, then the diagnostic is issued. This allows for fine-grained control of what suffixes to consider and what their replacements should be.</p>
</div>
<h3 id="example">Example</h3>
<p>Given a list `L;uL`:</p>
<ul>
<li><code>l</code> -&gt; <code>L</code></li>
<li><code>L</code> will be kept as is.</li>
<li><code>ul</code> -&gt; <code>uL</code></li>
<li><code>Ul</code> -&gt; <code>uL</code></li>
<li><code>UL</code> -&gt; <code>uL</code></li>
<li><code>uL</code> will be kept as is.</li>
<li><code>ull</code> will be kept as is, since it is not in the list</li>
<li>and so on.</li>
</ul>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to <span class="title-ref">true</span> (default is <span class="title-ref">true</span>), the check will not warn about literal suffixes inside macros.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/uppercase-literal-suffix.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>readability-use-anyofallof</key>
    <name>readability-use-anyofallof</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - readability-use-anyofallof</p>
</div>
<h1 id="readability-use-anyofallof">readability-use-anyofallof</h1>
<p>Finds range-based for loops that can be replaced by a call to <code>std::any_of</code> or <code>std::all_of</code>. In C++ 20 mode, suggests <code>std::ranges::any_of</code> or <code>std::ranges::all_of</code>.</p>
<p>Example:</p>
<pre class="c++"><code>bool all_even(std::vector&lt;int&gt; V) {
  for (int I : V) {
    if (I % 2)
      return false;
  }
  return true;
  // Replace loop by
  // return std::ranges::all_of(V, [](int I) { return I % 2 == 0; });
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability/use-anyofallof.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>zircon-temporary-objects</key>
    <name>zircon-temporary-objects</name>
    <description>
      <![CDATA[<div class="title">
<p>clang-tidy - zircon-temporary-objects</p>
</div>
<h1 id="zircon-temporary-objects">zircon-temporary-objects</h1>
<p>Warns on construction of specific temporary objects in the Zircon kernel. If the object should be flagged, If the object should be flagged, the fully qualified type name must be explicitly passed to the check.</p>
<p>For example, given the list of classes "Foo" and "NS::Bar", all of the following will trigger the warning:</p>
<pre class="c++"><code>Foo();
Foo F = Foo();
func(Foo());

namespace NS {

Bar();

}</code></pre>
<p>With the same list, the following will not trigger the warning:</p>
<pre class="c++"><code>Foo F;                 // Non-temporary construction okay
Foo F(param);          // Non-temporary construction okay
Foo *F = new Foo();    // New construction okay

Bar();                 // Not NS::Bar, so okay
NS::Bar B;             // Non-temporary construction okay</code></pre>
<p>Note that objects must be explicitly specified in order to be flagged, and so objects that inherit a specified object will not be flagged.</p>
<p>This check matches temporary objects without regard for inheritance and so a prohibited base class type does not similarly prohibit derived class types.</p>
<pre class="c++"><code>class Derived : Foo {} // Derived is not explicitly disallowed
Derived();             // and so temporary construction is okay</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Names</p>
<p>A semi-colon-separated list of fully-qualified names of C++ classes that should not be constructed as temporaries. Default is empty.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/zircon/temporary-objects.html" target="_blank">clang.llvm.org</a></p>]]>
      </description>
    <type>BUG</type>
    </rule>

  <!-- Clang Diagnostic Rules -->

  <rule>
    <key>clang-diagnostic-aix-compat</key>
    <name>clang-diagnostic-aix-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma align(packed) may not be compatible with objects generated with AIX XL C/C++</li>
<li>warning: alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waix-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-non-pod-memaccess</key>
    <name>clang-diagnostic-arc-non-pod-memaccess</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-non-pod-memaccess" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-repeated-use-of-weak</key>
    <name>clang-diagnostic-arc-repeated-use-of-weak</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-repeated-use-of-weak" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-maybe-repeated-use-of-weak</key>
    <name>clang-diagnostic-arc-maybe-repeated-use-of-weak</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-retain-cycles</key>
    <name>clang-diagnostic-arc-retain-cycles</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: capturing %0 strongly in this block is likely to lead to a retain cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-retain-cycles" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-unsafe-retained-assign</key>
    <name>clang-diagnostic-arc-unsafe-retained-assign</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{array literal|dictionary literal|numeric literal|boxed expression|&lt;should not happen&gt;|block literal}0 to a weak %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to unsafe property; object will be released after assignment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-unsafe-retained-assign" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-asm</key>
    <name>clang-diagnostic-asm</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: value size does not match register size specified by the constraint and modifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wasm" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-asm-operand-widths</key>
    <name>clang-diagnostic-asm-operand-widths</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: value size does not match register size specified by the constraint and modifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wasm-operand-widths" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-avr-rtlib-linking-quirks</key>
    <name>clang-diagnostic-avr-rtlib-linking-quirks</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no avr-libc installation can be found on the system, cannot link standard libraries</li>
<li>warning: no target microcontroller specified on command line, cannot link standard libraries, please pass -mmcu=&lt;mcu name&gt;</li>
<li>warning: standard library not linked and so no interrupt vector table or compiler runtime routines will be linked</li>
<li>warning: support for linking stdlibs for microcontroller '%0' is not implemented</li>
<li>warning: support for passing the data section address to the linker for microcontroller '%0' is not implemented</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-absolute-value</key>
    <name>clang-diagnostic-absolute-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value</li>
<li>warning: taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious</li>
<li>warning: taking the absolute value of unsigned type %0 has no effect</li>
<li>warning: using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabsolute-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-abstract-final-class</key>
    <name>clang-diagnostic-abstract-final-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: abstract class is marked '%select{final|sealed}0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabstract-final-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-address-of-temporary</key>
    <name>clang-diagnostic-address-of-temporary</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: taking the address of a temporary object of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress-of-temporary" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-all</key>
    <name>clang-diagnostic-all</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: '%%n' specifier not supported on this platform</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '&amp;&amp;' of a value and its negation always evaluates to false</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: '||' of a value and its negation always evaluates to true</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: argument %0 of type %1 with mismatched bound</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?</li>
<li>warning: bitwise or with non-zero value always evaluates to true</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: call to undeclared function %0; ISO C99 and later do not support implicit function declarations</li>
<li>warning: call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</li>
<li>warning: calling '%0' with a nonzero argument is unsafe</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: converting the enum constant to a boolean</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean; did you mean '(%0) != 0'?</li>
<li>warning: converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute: %1</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: initializer order does not match the declaration order</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: left operand of comma operator has no effect</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void coroutine does not return a value</li>
<li>warning: non-void coroutine does not return a value in all control paths</li>
<li>warning: non-void function does not return a value</li>
<li>warning: non-void function does not return a value in all control paths</li>
<li>warning: non-void lambda does not return a value</li>
<li>warning: non-void lambda does not return a value in all control paths</li>
<li>warning: not packing field %0 as it is non-POD for the purposes of layout</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ROUND is not supported</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: switch condition has boolean value</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of bitwise '%0' with boolean operands</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using '%0' format specifier, but argument has boolean value</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when passed as a const reference argument here</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable %0 set but not used</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wall" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-always-inline-coroutine</key>
    <name>clang-diagnostic-always-inline-coroutine</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: this coroutine may be split into pieces; not every piece is guaranteed to be inlined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#walways-inline-coroutine" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ambiguous-member-template</key>
    <name>clang-diagnostic-ambiguous-member-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: lookup of %0 in member access expression is ambiguous; using member of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-member-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ambiguous-macro</key>
    <name>clang-diagnostic-ambiguous-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ambiguous expansion of macro %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-anon-enum-enum-conversion</key>
    <name>clang-diagnostic-anon-enum-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wanon-enum-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-array-bounds</key>
    <name>clang-diagnostic-array-bounds</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1</li>
<li>warning: array index %0 is before the beginning of the array</li>
<li>warning: array index %0 is past the end of the array (that has type %1%select{|, cast to %3}2)</li>
<li>warning: array index %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)</li>
<li>warning: the pointer incremented by %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warray-bounds" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-array-bounds-pointer-arithmetic</key>
    <name>clang-diagnostic-array-bounds-pointer-arithmetic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the pointer decremented by %0 refers before the beginning of the array</li>
<li>warning: the pointer incremented by %0 refers past the end of the array (that has type %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-array-parameter</key>
    <name>clang-diagnostic-array-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: argument %0 of type %1 with mismatched bound</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warray-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-alignment</key>
    <name>clang-diagnostic-atomic-alignment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: large atomic operation may incur significant performance penalty; the access size (%0 bytes) exceeds the max lock-free size (%1  bytes)</li>
<li>warning: misaligned atomic operation may incur significant performance penalty; the expected alignment (%0 bytes) exceeds the actual alignment (%1 bytes)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-alignment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-properties</key>
    <name>clang-diagnostic-atomic-properties</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)</li>
<li>warning: property is assumed atomic by default</li>
<li>warning: property is assumed atomic when auto-synthesizing the property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-properties" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-attributes</key>
    <name>clang-diagnostic-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute argument '%1' not supported on a global variable</li>
<li>warning: %0 attribute argument not supported: %1</li>
<li>warning: %0 attribute can only be applied to instance variables or properties</li>
<li>warning: %0 attribute ignored</li>
<li>warning: %0 attribute ignored for field of type %1</li>
<li>warning: %0 attribute ignored on a non-definition declaration</li>
<li>warning: %0 attribute ignored on inline function</li>
<li>warning: %0 attribute ignored when parsing type</li>
<li>warning: %0 attribute is deprecated and ignored in %1</li>
<li>warning: %0 attribute is ignored because %1 is not a function pointer</li>
<li>warning: %0 attribute is ignored because there exists no call expression inside the statement</li>
<li>warning: %0 attribute isn't implemented by this Objective-C runtime</li>
<li>warning: %0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters</li>
<li>warning: %0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2</li>
<li>warning: %0 attribute only applies to a pointer or reference (%1 is invalid)</li>
<li>warning: %0 attribute only applies to return values that are pointers</li>
<li>warning: %0 attribute only applies to return values that are pointers or references</li>
<li>warning: %0 attribute only applies to%select{| constant}1 pointer arguments</li>
<li>warning: %0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</li>
<li>warning: %0 currently has no effect on a using declaration</li>
<li>warning: %0%select{ attribute|}1 only applies to %2</li>
<li>warning: %0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions}2</li>
<li>warning: %q0 redeclared inline; %1 attribute ignored</li>
<li>warning: %select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1</li>
<li>warning: %select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2</li>
<li>warning: %select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden</li>
<li>warning: %select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored</li>
<li>warning: %select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored</li>
<li>warning: '%0' attribute cannot be specified on a definition</li>
<li>warning: '%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</li>
<li>warning: '%select{pure|const}0' attribute on function returning 'void'; attribute ignored</li>
<li>warning: '[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead</li>
<li>warning: '__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?</li>
<li>warning: 'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored</li>
<li>warning: 'cmse_nonsecure_entry' cannot be applied to functions with internal linkage</li>
<li>warning: 'const' attribute imposes more restrictions; 'pure' attribute ignored</li>
<li>warning: 'deprecated' attribute on anonymous namespace ignored</li>
<li>warning: 'dllexport' attribute ignored on explicit instantiation definition</li>
<li>warning: 'gnu_inline' attribute requires function to be marked 'inline', attribute ignored</li>
<li>warning: 'internal_linkage' attribute on a non-static local variable is ignored</li>
<li>warning: 'mig_server_routine' attribute only applies to routines that return a kern_return_t</li>
<li>warning: 'nocf_check' attribute ignored; use -fcf-protection to enable the attribute</li>
<li>warning: 'noderef' can only be used on an array or pointer type</li>
<li>warning: 'nonnull' attribute applied to function with no pointer arguments</li>
<li>warning: 'nonnull' attribute when used on parameters takes no arguments</li>
<li>warning: 'nothrow' attribute conflicts with exception specification; attribute ignored</li>
<li>warning: 'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0</li>
<li>warning: 'require_constant_initialization' attribute added after initialization of variable</li>
<li>warning: 'sentinel' attribute only supported for variadic %select{functions|blocks}0</li>
<li>warning: 'sentinel' attribute requires named arguments</li>
<li>warning: 'sycl_kernel' attribute only applies to a function template with at least two template parameters</li>
<li>warning: 'trivial_abi' cannot be applied to %0</li>
<li>warning: Objective-C GC does not allow weak variables on the stack</li>
<li>warning: __declspec attribute %0 is not supported</li>
<li>warning: __weak attribute cannot be specified on a field declaration</li>
<li>warning: __weak attribute cannot be specified on an automatic variable when ARC is not enabled</li>
<li>warning: attribute %0 after definition is ignored</li>
<li>warning: attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value</li>
<li>warning: attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement</li>
<li>warning: attribute %0 has no effect when annotating an infinite loop</li>
<li>warning: attribute %0 ignored, because it cannot be applied to a type</li>
<li>warning: attribute %0 ignored, because it cannot be applied to omitted return type</li>
<li>warning: attribute %0 ignored, because it is not attached to a declaration</li>
<li>warning: attribute %0 is already applied</li>
<li>warning: attribute %0 is already applied with different arguments</li>
<li>warning: attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration</li>
<li>warning: attribute declaration must precede definition</li>
<li>warning: attribute is ignored on this statement as it only applies to functions; use '%0' on statements</li>
<li>warning: conflicting attributes %0 are ignored</li>
<li>warning: direct attribute on property %0 ignored (not implemented by this Objective-C runtime)</li>
<li>warning: first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored</li>
<li>warning: function template with 'sycl_kernel' attribute must have a 'void' return type</li>
<li>warning: function template with 'sycl_kernel' attribute must have a single parameter</li>
<li>warning: ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type</li>
<li>warning: import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration</li>
<li>warning: import %select{module|name}0 cannot be applied to a function with a definition</li>
<li>warning: inheritance model ignored on %select{primary template|partial specialization}0</li>
<li>warning: maxclusterrank requires sm_90 or higher, CUDA arch provided: %0, ignoring %1 attribute</li>
<li>warning: qualifiers after comma in declarator list are ignored</li>
<li>warning: repeated RISC-V 'interrupt' attribute</li>
<li>warning: requested alignment is less than minimum alignment of %1 for type %0</li>
<li>warning: statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'</li>
<li>warning: template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter</li>
<li>warning: transparent union definition must contain at least one field; transparent_union attribute ignored</li>
<li>warning: transparent_union attribute can only be applied to a union definition; attribute ignored</li>
<li>warning: unknown attribute %0 ignored</li>
<li>warning: unknown attribute '%0'</li>
<li>warning: unknown visibility %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wattributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-auto-disable-vptr-sanitizer</key>
    <name>clang-diagnostic-auto-disable-vptr-sanitizer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicitly disabling vptr sanitizer because rtti wasn't enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-auto-import</key>
    <name>clang-diagnostic-auto-import</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-import" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc</key>
    <name>clang-diagnostic-arc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2</li>
<li>warning: assigning %select{array literal|dictionary literal|numeric literal|boxed expression|&lt;should not happen&gt;|block literal}0 to a weak %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to unsafe property; object will be released after assignment</li>
<li>warning: capturing %0 strongly in this block is likely to lead to a retain cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-availability</key>
    <name>clang-diagnostic-availability</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available</li>
<li>warning: %select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)</li>
<li>warning: 'unavailable' availability overrides all other availability information</li>
<li>warning: Fuchsia API Level prohibits specifying a minor or sub-minor version</li>
<li>warning: availability does not match previous declaration</li>
<li>warning: feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored</li>
<li>warning: ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0</li>
<li>warning: only 'unavailable' and 'deprecated' are supported for Swift availability</li>
<li>warning: unknown platform %0 in availability macro</li>
<li>warning: use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wavailability" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-frame-larger-than</key>
    <name>clang-diagnostic-frame-larger-than</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
<li>warning: stack frame size (%0) exceeds limit (%1) in '%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframe-larger-than" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inline-asm</key>
    <name>clang-diagnostic-inline-asm</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winline-asm" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pass-failed</key>
    <name>clang-diagnostic-pass-failed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpass-failed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pass</key>
    <name>clang-diagnostic-pass</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pass-analysis</key>
    <name>clang-diagnostic-pass-analysis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
<li>remark: %0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'.</li>
<li>remark: %0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied!</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass-analysis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pass-missed</key>
    <name>clang-diagnostic-pass-missed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass-missed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-backend-plugin</key>
    <name>clang-diagnostic-backend-plugin</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
<li>warning: %0 (%1) exceeds limit (%2) in '%3'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbackend-plugin" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-source-mgr</key>
    <name>clang-diagnostic-source-mgr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsource-mgr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-attribute-warning</key>
    <name>clang-diagnostic-attribute-warning</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: call to '%0' declared with 'warning' attribute: %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wattribute-warning" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bad-function-cast</key>
    <name>clang-diagnostic-bad-function-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast from function call of type %0 to non-matching type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbad-function-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-binary-literal</key>
    <name>clang-diagnostic-binary-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: binary integer literals are a GNU extension</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbinary-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bind-to-temporary-copy</key>
    <name>clang-diagnostic-bind-to-temporary-copy</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
<li>warning: C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0</li>
<li>warning: no viable constructor %sub{select_initialized_entity_kind}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbind-to-temporary-copy" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitfield-constant-conversion</key>
    <name>clang-diagnostic-bitfield-constant-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-constant-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitfield-enum-conversion</key>
    <name>clang-diagnostic-bitfield-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitfield-width</key>
    <name>clang-diagnostic-bitfield-width</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-width" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitwise-conditional-parentheses</key>
    <name>clang-diagnostic-bitwise-conditional-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitwise-conditional-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitwise-instead-of-logical</key>
    <name>clang-diagnostic-bitwise-instead-of-logical</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of bitwise '%0' with boolean operands</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitwise-instead-of-logical" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bitwise-op-parentheses</key>
    <name>clang-diagnostic-bitwise-op-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' within '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitwise-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-block-capture-autoreleasing</key>
    <name>clang-diagnostic-block-capture-autoreleasing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: block captures an autoreleasing out-parameter, which may result in use-after-free bugs</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wblock-capture-autoreleasing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bool-conversion</key>
    <name>clang-diagnostic-bool-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbool-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bool-operation</key>
    <name>clang-diagnostic-bool-operation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?</li>
<li>warning: use of bitwise '%0' with boolean operands</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbool-operation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-branch-protection</key>
    <name>clang-diagnostic-branch-protection</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '-mbranch-protection=' option is incompatible with the '%0' architecture</li>
<li>warning: ignoring the 'branch-protection' attribute because the '%0' architecture does not support it</li>
<li>warning: invalid branch protection option '%0' in '%1'</li>
<li>warning: unsupported branch protection specification '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbranch-protection" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-builtin-macro-redefined</key>
    <name>clang-diagnostic-builtin-macro-redefined</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redefining builtin macro</li>
<li>warning: undefining builtin macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-macro-redefined" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-builtin-requires-header</key>
    <name>clang-diagnostic-builtin-requires-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration of built-in function '%1' requires inclusion of the header &lt;%0&gt;</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-requires-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c11-extensions</key>
    <name>clang-diagnostic-c11-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is a C11 extension</li>
<li>warning: anonymous structs are a C11 extension</li>
<li>warning: anonymous unions are a C11 extension</li>
<li>warning: pointer comparisons before C11 need to be between two complete or two incomplete types; %0 is %select{|in}2complete and %1 is %select{|in}3complete</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc11-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c23-extensions</key>
    <name>clang-diagnostic-c23-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '_BitInt' suffix for literals is a C23 extension</li>
<li>warning: '_Static_assert' with no message is a C23 extension</li>
<li>warning: 'nullptr' is a C23 extension</li>
<li>warning: [[]] attributes are a C23 extension</li>
<li>warning: label at end of compound statement is a C23 extension</li>
<li>warning: label followed by a declaration is a C23 extension</li>
<li>warning: omitting the parameter name in a function definition is a C23 extension</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C23 extension</li>
<li>warning: use of an empty initializer is a C23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc23-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c23-compat</key>
    <name>clang-diagnostic-c23-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is a keyword in C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc23-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c99-extensions</key>
    <name>clang-diagnostic-c99-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature</li>
<li>warning: '%0' is a C99 extension</li>
<li>warning: ISO C99 requires whitespace after the macro name</li>
<li>warning: array designators are a C99 extension</li>
<li>warning: brace elision for designated initializer is a C99 extension</li>
<li>warning: commas at the end of enumerator lists are a C99-specific feature</li>
<li>warning: compound literals are a C99-specific feature</li>
<li>warning: designated initializers are a C++20 extension</li>
<li>warning: designated initializers are a C99 feature</li>
<li>warning: empty macro arguments are a C99 feature</li>
<li>warning: flexible array members are a C99 feature</li>
<li>warning: hexadecimal floating constants are a C99 feature</li>
<li>warning: initializer for aggregate is not a compile-time constant</li>
<li>warning: mixture of designated and non-designated initializers in the same initializer list is a C99 extension</li>
<li>warning: nested designators are a C99 extension</li>
<li>warning: variable declaration in for loop is a C99-specific feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc99-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c99-compat</key>
    <name>clang-diagnostic-c99-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99</li>
<li>warning: '%0' is a keyword in C99</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C89; this literal will %select{have type 'long long'|be ill-formed}0 in C99 onwards</li>
<li>warning: unicode literals are incompatible with C99</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc99-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c99-designator</key>
    <name>clang-diagnostic-c99-designator</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: array designators are a C99 extension</li>
<li>warning: brace elision for designated initializer is a C99 extension</li>
<li>warning: designated initializers are a C++20 extension</li>
<li>warning: designated initializers are a C99 feature</li>
<li>warning: mixture of designated and non-designated initializers in the same initializer list is a C99 extension</li>
<li>warning: nested designators are a C99 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc99-designator" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c23-compat</key>
    <name>clang-diagnostic-pre-c23-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C standards before C23</li>
<li>warning: '%0' is incompatible with C standards before C23</li>
<li>warning: '...' as the only parameter of a function is incompatible with C standards before C23</li>
<li>warning: '_BitInt' suffix for literals is incompatible with C standards before C23</li>
<li>warning: '_Static_assert' with no message is incompatible with C standards before C23</li>
<li>warning: [[]] attributes are incompatible with C standards before C23</li>
<li>warning: digit separators are incompatible with C standards before C23</li>
<li>warning: label at end of compound statement is incompatible with C standards before C23</li>
<li>warning: label followed by a declaration is incompatible with C standards before C23</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C standards before C23</li>
<li>warning: universal character name referring to a control character is incompatible with C standards before C23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C standards before C23</li>
<li>warning: use of an empty initializer is incompatible with C standards before C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c23-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c23-compat-pedantic</key>
    <name>clang-diagnostic-pre-c23-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C standards before C23</li>
<li>warning: '%0' is incompatible with C standards before C23</li>
<li>warning: '...' as the only parameter of a function is incompatible with C standards before C23</li>
<li>warning: '_BitInt' suffix for literals is incompatible with C standards before C23</li>
<li>warning: '_Static_assert' with no message is incompatible with C standards before C23</li>
<li>warning: [[]] attributes are incompatible with C standards before C23</li>
<li>warning: digit separators are incompatible with C standards before C23</li>
<li>warning: label at end of compound statement is incompatible with C standards before C23</li>
<li>warning: label followed by a declaration is incompatible with C standards before C23</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C standards before C23</li>
<li>warning: universal character name referring to a control character is incompatible with C standards before C23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C standards before C23</li>
<li>warning: use of an empty initializer is incompatible with C standards before C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c23-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ctad-maybe-unsupported</key>
    <name>clang-diagnostic-ctad-maybe-unsupported</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 may not intend to support class template argument deduction</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wctad-maybe-unsupported" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-extensions</key>
    <name>clang-diagnostic-c++11-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{defaulted|deleted}0 function definitions are a C++11 extension</li>
<li>warning: '%0' keyword is a C++11 extension</li>
<li>warning: 'auto' type specifier is a C++11 extension</li>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'template' keyword outside of a template</li>
<li>warning: 'typename' occurs outside of a template</li>
<li>warning: [[]] attributes are a C++11 extension</li>
<li>warning: alias declarations are a C++11 extension</li>
<li>warning: befriending enumeration type %0 is a C++11 extension</li>
<li>warning: commas at the end of enumerator lists are a C++11 extension</li>
<li>warning: default member initializer for non-static data member is a C++11 extension</li>
<li>warning: default template arguments for a function template are a C++11 extension</li>
<li>warning: enumeration types with a fixed underlying type are a C++11 extension</li>
<li>warning: explicit conversion functions are a C++11 extension</li>
<li>warning: extern templates are a C++11 extension</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: generalized initializer lists are a C++11 extension</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension</li>
<li>warning: inline namespaces are a C++11 feature</li>
<li>warning: non-class friend type %0 is a C++11 extension</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension</li>
<li>warning: range-based for loop is a C++11 extension</li>
<li>warning: reference qualifiers on functions are a C++11 extension</li>
<li>warning: rvalue references are a C++11 extension</li>
<li>warning: scoped enumerations are a C++11 extension</li>
<li>warning: static data member %0 in union is a C++11 extension</li>
<li>warning: unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1</li>
<li>warning: use of enumeration in a nested name specifier is a C++11 extension</li>
<li>warning: variadic templates are a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-compat</key>
    <name>clang-diagnostic-c++11-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-compat-deprecated-writable-strings</key>
    <name>clang-diagnostic-c++11-compat-deprecated-writable-strings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-compat-pedantic</key>
    <name>clang-diagnostic-c++11-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-compat-reserved-user-defined-literal</key>
    <name>clang-diagnostic-c++11-compat-reserved-user-defined-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-extra-semi</key>
    <name>clang-diagnostic-c++11-extra-semi</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-extra-semi" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-inline-namespace</key>
    <name>clang-diagnostic-c++11-inline-namespace</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: inline namespaces are a C++11 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-inline-namespace" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-long-long</key>
    <name>clang-diagnostic-c++11-long-long</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'long long' is a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-long-long" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-narrowing</key>
    <name>clang-diagnostic-c++11-narrowing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-narrowing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++11-narrowing-const-reference</key>
    <name>clang-diagnostic-c++11-narrowing-const-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-narrowing-const-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inconsistent-missing-destructor-override</key>
    <name>clang-diagnostic-inconsistent-missing-destructor-override</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{warn_destructor_marked_not_override_overriding}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inconsistent-missing-override</key>
    <name>clang-diagnostic-inconsistent-missing-override</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{warn_function_marked_not_override_overriding}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-missing-override" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-suggest-override</key>
    <name>clang-diagnostic-suggest-override</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{warn_function_marked_not_override_overriding}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuggest-override" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-suggest-destructor-override</key>
    <name>clang-diagnostic-suggest-destructor-override</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{warn_destructor_marked_not_override_overriding}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuggest-destructor-override" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++14-extensions</key>
    <name>clang-diagnostic-c++14-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is a C++14 extension</li>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: initialized lambda captures are a C++14 extension</li>
<li>warning: multiple return statements in constexpr function is a C++14 extension</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: use of the %0 attribute is a C++14 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable templates are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++14-attribute-extensions</key>
    <name>clang-diagnostic-c++14-attribute-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of the %0 attribute is a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-attribute-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++14-binary-literal</key>
    <name>clang-diagnostic-c++14-binary-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++14-compat</key>
    <name>clang-diagnostic-c++14-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++14-compat-pedantic</key>
    <name>clang-diagnostic-c++14-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++17-extensions</key>
    <name>clang-diagnostic-c++17-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%select{if|switch}0' initialization statements are a C++17 extension</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is a C++17 extension</li>
<li>warning: 'constexpr' on lambda expressions is a C++17 extension</li>
<li>warning: 'static_assert' with no message is a C++17 extension</li>
<li>warning: ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension</li>
<li>warning: capture of '*this' by copy is a C++17 extension</li>
<li>warning: constexpr if is a C++17 extension</li>
<li>warning: decomposition declarations are a C++17 extension</li>
<li>warning: default scope specifier for attributes is a C++17 extension</li>
<li>warning: hexadecimal floating literals are a C++17 feature</li>
<li>warning: inline variables are a C++17 extension</li>
<li>warning: nested namespace definition is a C++17 extension; define each namespace separately</li>
<li>warning: pack expansion of using declaration is a C++17 extension</li>
<li>warning: pack fold expression is a C++17 extension</li>
<li>warning: template template parameter using 'typename' is a C++17 extension</li>
<li>warning: use of multiple declarators in a single using declaration is a C++17 extension</li>
<li>warning: use of the %0 attribute is a C++17 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++17-attribute-extensions</key>
    <name>clang-diagnostic-c++17-attribute-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of the %0 attribute is a C++17 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-attribute-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++17-compat</key>
    <name>clang-diagnostic-c++17-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++17-compat-mangling</key>
    <name>clang-diagnostic-c++17-compat-mangling</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat-mangling" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++17-compat-pedantic</key>
    <name>clang-diagnostic-c++17-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++20-extensions</key>
    <name>clang-diagnostic-c++20-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension</li>
<li>warning: captured structured bindings are a C++20 extension</li>
<li>warning: constexpr constructor that does not initialize all members is a C++20 extension</li>
<li>warning: constexpr union constructor that does not initialize any member is a C++20 extension</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension</li>
<li>warning: default member initializer for bit-field is a C++20 extension</li>
<li>warning: defaulted comparison operators are a C++20 extension</li>
<li>warning: designated initializers are a C++20 extension</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is a C++20 extension</li>
<li>warning: explicit template parameter list for lambdas is a C++20 extension</li>
<li>warning: explicit(bool) is a C++20 extension</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: initialized lambda pack captures are a C++20 extension</li>
<li>warning: inline nested namespace definition is a C++20 extension</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is a C++20 extension</li>
<li>warning: missing 'typename' prior to dependent type name %0%1; implicit 'typename' is a C++20 extension</li>
<li>warning: range-based for loop initialization statements are a C++20 extension</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension</li>
<li>warning: use of the %0 attribute is a C++20 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: using declaration naming a scoped enumerator is a C++20 extension</li>
<li>warning: using enum declaration is a C++20 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-20-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++20-attribute-extensions</key>
    <name>clang-diagnostic-c++20-attribute-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of the %0 attribute is a C++20 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-20-attribute-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++20-compat</key>
    <name>clang-diagnostic-c++20-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '%0' is a keyword in C++20</li>
<li>warning: '&lt;=&gt;' is a single token in C++20; add a space to avoid a change in behavior</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'consteval' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constinit' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++20</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: taking address of non-addressable standard library function is incompatible with C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++20</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of implicit 'typename' is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-20-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++20-compat-pedantic</key>
    <name>clang-diagnostic-c++20-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '%0' is a keyword in C++20</li>
<li>warning: '&lt;=&gt;' is a single token in C++20; add a space to avoid a change in behavior</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'consteval' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constinit' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++20</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: taking address of non-addressable standard library function is incompatible with C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++20</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of implicit 'typename' is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-20-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++20-designator</key>
    <name>clang-diagnostic-c++20-designator</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: designated initializers are a C++20 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-20-designator" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++23-extensions</key>
    <name>clang-diagnostic-c++23-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{an attribute specifier sequence|%0}1 in this position is a C++23 extension</li>
<li>warning: 'size_t' suffix for literals is a C++23 extension</li>
<li>warning: alias declaration in this context is a C++23 extension</li>
<li>warning: consteval if is a C++23 extension</li>
<li>warning: declaring overloaded %0 as 'static' is a C++23 extension</li>
<li>warning: definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension</li>
<li>warning: label at end of compound statement is a C++23 extension</li>
<li>warning: lambda without a parameter clause is a C++23 extension</li>
<li>warning: static lambdas are a C++23 extension</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C++23 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-23-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++23-lambda-attributes</key>
    <name>clang-diagnostic-c++23-lambda-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{an attribute specifier sequence|%0}1 in this position is a C++23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-23-lambda-attributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++26-extensions</key>
    <name>clang-diagnostic-c++26-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are a C++2c extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-26-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat</key>
    <name>clang-diagnostic-c++98-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{anonymous struct|union}0 member %1 with a non-trivial %sub{select_special_member_kind}2 is incompatible with C++98</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{defaulted|deleted}0 function definitions are incompatible with C++98</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' keyword is incompatible with C++98</li>
<li>warning: '%0' type specifier is incompatible with C++98</li>
<li>warning: '&lt;::' is treated as digraph '&lt;:' (aka '[') followed by ':' in C++98</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'alignas' is incompatible with C++98</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' type specifier is incompatible with C++98</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constexpr' specifier is incompatible with C++98</li>
<li>warning: 'decltype' type specifier is incompatible with C++98</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'nullptr' is incompatible with C++98</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' declarations are incompatible with C++98</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: [[]] attributes are incompatible with C++ standards before C++11</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declarations are incompatible with C++98</li>
<li>warning: alignof expressions are incompatible with C++98</li>
<li>warning: befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98</li>
<li>warning: befriending enumeration type %0 is incompatible with C++98</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: consecutive right angle brackets are incompatible with C++98 (use '&gt; &gt;')</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constructor call from initializer list is incompatible with C++98</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for non-static data members is incompatible with C++98</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default template arguments for a function template are incompatible with C++98</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: delegating constructors are incompatible with C++98</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: enumeration type in nested name specifier is incompatible with C++98</li>
<li>warning: enumeration types with a fixed underlying type are incompatible with C++98</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit conversion functions are incompatible with C++98</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: friend declaration naming a member of the declaring class is incompatible with C++98</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: generalized initializer lists are incompatible with C++98</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: inheriting constructors are incompatible with C++98</li>
<li>warning: initialization of initializer_list object is incompatible with C++98</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initializing %0 from an empty initializer list is incompatible with C++98</li>
<li>warning: inline namespaces are incompatible with C++98</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: jump from switch statement to this case label is incompatible with C++98</li>
<li>warning: jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98</li>
<li>warning: jump from this goto statement to its label is incompatible with C++98</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: lambda expressions are incompatible with C++98</li>
<li>warning: literal operators are incompatible with C++98</li>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: noexcept expressions are incompatible with C++98</li>
<li>warning: noexcept specifications are incompatible with C++98</li>
<li>warning: non-class friend type %0 is incompatible with C++98</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop is incompatible with C++98</li>
<li>warning: raw string literals are incompatible with C++98</li>
<li>warning: redundant parentheses surrounding address non-type template argument are incompatible with C++98</li>
<li>warning: reference initialized from initializer list is incompatible with C++98</li>
<li>warning: reference qualifiers on functions are incompatible with C++98</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: rvalue references are incompatible with C++98</li>
<li>warning: scalar initialized from empty initializer list is incompatible with C++98</li>
<li>warning: scoped enumerations are incompatible with C++98</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C++98</li>
<li>warning: static data member %0 in union is incompatible with C++98</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: substitution failure due to access control is incompatible with C++98</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: trailing return types are incompatible with C++98</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++98</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: universal character name referring to a control character is incompatible with C++98</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
<li>warning: use of 'template' keyword outside of a template is incompatible with C++98</li>
<li>warning: use of 'typename' outside of a template is incompatible with C++98</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of non-static data member %0 in an unevaluated context is incompatible with C++98</li>
<li>warning: use of null pointer as non-type template argument is incompatible with C++98</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variadic templates are incompatible with C++98</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat-bind-to-temporary-copy</key>
    <name>clang-diagnostic-c++98-compat-bind-to-temporary-copy</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat-extra-semi</key>
    <name>clang-diagnostic-c++98-compat-extra-semi</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-extra-semi" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat-local-type-template-args</key>
    <name>clang-diagnostic-c++98-compat-local-type-template-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat-pedantic</key>
    <name>clang-diagnostic-c++98-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #line number greater than 32767 is incompatible with C++98</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{anonymous struct|union}0 member %1 with a non-trivial %sub{select_special_member_kind}2 is incompatible with C++98</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{defaulted|deleted}0 function definitions are incompatible with C++98</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
<li>warning: '%0' keyword is incompatible with C++98</li>
<li>warning: '%0' type specifier is incompatible with C++98</li>
<li>warning: '&lt;::' is treated as digraph '&lt;:' (aka '[') followed by ':' in C++98</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'alignas' is incompatible with C++98</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' type specifier is incompatible with C++98</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constexpr' specifier is incompatible with C++98</li>
<li>warning: 'decltype' type specifier is incompatible with C++98</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'long long' is incompatible with C++98</li>
<li>warning: 'nullptr' is incompatible with C++98</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' declarations are incompatible with C++98</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: C++98 requires newline at end of file</li>
<li>warning: [[]] attributes are incompatible with C++ standards before C++11</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declarations are incompatible with C++98</li>
<li>warning: alignof expressions are incompatible with C++98</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98</li>
<li>warning: befriending enumeration type %0 is incompatible with C++98</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: cast between pointer-to-function and pointer-to-object is incompatible with C++98</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: commas at the end of enumerator lists are incompatible with C++98</li>
<li>warning: consecutive right angle brackets are incompatible with C++98 (use '&gt; &gt;')</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: constructor call from initializer list is incompatible with C++98</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for non-static data members is incompatible with C++98</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default template arguments for a function template are incompatible with C++98</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: delegating constructors are incompatible with C++98</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: empty macro arguments are incompatible with C++98</li>
<li>warning: enumeration type in nested name specifier is incompatible with C++98</li>
<li>warning: enumeration types with a fixed underlying type are incompatible with C++98</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit conversion functions are incompatible with C++98</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: extern templates are incompatible with C++98</li>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
<li>warning: friend declaration naming a member of the declaring class is incompatible with C++98</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: generalized initializer lists are incompatible with C++98</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98</li>
<li>warning: inheriting constructors are incompatible with C++98</li>
<li>warning: initialization of initializer_list object is incompatible with C++98</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initializing %0 from an empty initializer list is incompatible with C++98</li>
<li>warning: inline namespaces are incompatible with C++98</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: jump from switch statement to this case label is incompatible with C++98</li>
<li>warning: jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98</li>
<li>warning: jump from this goto statement to its label is incompatible with C++98</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: lambda expressions are incompatible with C++98</li>
<li>warning: literal operators are incompatible with C++98</li>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: noexcept expressions are incompatible with C++98</li>
<li>warning: noexcept specifications are incompatible with C++98</li>
<li>warning: non-class friend type %0 is incompatible with C++98</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop is incompatible with C++98</li>
<li>warning: raw string literals are incompatible with C++98</li>
<li>warning: redundant parentheses surrounding address non-type template argument are incompatible with C++98</li>
<li>warning: reference initialized from initializer list is incompatible with C++98</li>
<li>warning: reference qualifiers on functions are incompatible with C++98</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: rvalue references are incompatible with C++98</li>
<li>warning: scalar initialized from empty initializer list is incompatible with C++98</li>
<li>warning: scoped enumerations are incompatible with C++98</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C++98</li>
<li>warning: static data member %0 in union is incompatible with C++98</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: substitution failure due to access control is incompatible with C++98</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: trailing return types are incompatible with C++98</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++98</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: universal character name referring to a control character is incompatible with C++98</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
<li>warning: use of 'template' keyword outside of a template is incompatible with C++98</li>
<li>warning: use of 'typename' outside of a template is incompatible with C++98</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of non-static data member %0 in an unevaluated context is incompatible with C++98</li>
<li>warning: use of null pointer as non-type template argument is incompatible with C++98</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variadic macros are incompatible with C++98</li>
<li>warning: variadic templates are incompatible with C++98</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-compat-unnamed-type-template-args</key>
    <name>clang-diagnostic-c++98-compat-unnamed-type-template-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++-compat</key>
    <name>clang-diagnostic-c++-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++14-compat</key>
    <name>clang-diagnostic-pre-c++14-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-14-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-compat-binary-literal</key>
    <name>clang-diagnostic-c++98-c++11-compat-binary-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++14-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++14-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-14-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++17-compat</key>
    <name>clang-diagnostic-pre-c++17-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-17-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++17-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++17-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-17-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++20-compat</key>
    <name>clang-diagnostic-pre-c++20-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-20-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++20-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++20-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-20-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++2b-compat</key>
    <name>clang-diagnostic-pre-c++2b-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++2b</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++2b</li>
<li>warning: an attribute specifier sequence in this position is incompatible with C++ standards before C++2b</li>
<li>warning: consteval if is incompatible with C++ standards before C++2b</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++2b extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-2b-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++23-compat</key>
    <name>clang-diagnostic-pre-c++23-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-23-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++2b-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++2b-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++2b</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++2b</li>
<li>warning: an attribute specifier sequence in this position is incompatible with C++ standards before C++2b</li>
<li>warning: consteval if is incompatible with C++ standards before C++2b</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++2b extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-2b-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++23-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++23-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-23-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++26-compat</key>
    <name>clang-diagnostic-pre-c++26-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are incompatible with C++ standards before C++2c</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-26-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++26-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++26-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are incompatible with C++ standards before C++2c</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-26-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-called-once-parameter</key>
    <name>clang-diagnostic-called-once-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 parameter marked 'called_once' is called twice</li>
<li>warning: %0 parameter marked 'called_once' is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2</li>
<li>warning: %select{|captured }1%0 parameter marked 'called_once' is never called</li>
<li>warning: %select{|captured }1completion handler is never called</li>
<li>warning: completion handler is called twice</li>
<li>warning: completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcalled-once-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-align</key>
    <name>clang-diagnostic-cast-align</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast from %0 to %1 increases required alignment from %2 to %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-align" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-function-type</key>
    <name>clang-diagnostic-cast-function-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast %diff{from $ to $ |}0,1converts to incompatible function type</li>
<li>warning: cast %diff{from $ to $ |}0,1converts to incompatible function type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-function-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-function-type-strict</key>
    <name>clang-diagnostic-cast-function-type-strict</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast %diff{from $ to $ |}0,1converts to incompatible function type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-function-type-strict" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-qual</key>
    <name>clang-diagnostic-cast-qual</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2</li>
<li>warning: cast from %0 to %1 must have all intermediate pointers const qualified to be safe</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-qual" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-char-subscripts</key>
    <name>clang-diagnostic-char-subscripts</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wchar-subscripts" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-clang-cl-pch</key>
    <name>clang-diagnostic-clang-cl-pch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename</li>
<li>warning: definition of macro %0 does not match definition in precompiled header</li>
<li>warning: support for '/Yc' and '/Yu' with different filenames not implemented yet; flags ignored</li>
<li>warning: support for '/Yc' with more than one source file not implemented yet; flag ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wclang-cl-pch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-class-conversion</key>
    <name>clang-diagnostic-class-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conversion function converting %0 to %1 will never be used</li>
<li>warning: conversion function converting %0 to its base class %1 will never be used</li>
<li>warning: conversion function converting %0 to itself will never be used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wclass-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-class-varargs</key>
    <name>clang-diagnostic-class-varargs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</li>
<li>warning: cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime</li>
<li>warning: passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2</li>
<li>warning: second argument to 'va_arg' is of ARC ownership-qualified type %0</li>
<li>warning: second argument to 'va_arg' is of non-POD type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wclass-varargs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-comment</key>
    <name>clang-diagnostic-comment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '/*' within block comment</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: multi-line // comment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-compare-distinct-pointer-types</key>
    <name>clang-diagnostic-compare-distinct-pointer-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison of distinct pointer types%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-completion-handler</key>
    <name>clang-diagnostic-completion-handler</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|captured }1completion handler is never called</li>
<li>warning: completion handler is called twice</li>
<li>warning: completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompletion-handler" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-compound-token-split</key>
    <name>clang-diagnostic-compound-token-split</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_compound_token_kind}0,1,2,3 appear in different macro expansion contexts</li>
<li>warning: %sub{subst_compound_token_kind}0,1,2,3 are separated by whitespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompound-token-split" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-compound-token-split-by-macro</key>
    <name>clang-diagnostic-compound-token-split-by-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_compound_token_kind}0,1,2,3 appear in different macro expansion contexts</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompound-token-split-by-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-compound-token-split-by-space</key>
    <name>clang-diagnostic-compound-token-split-by-space</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_compound_token_kind}0,1,2,3 are separated by whitespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompound-token-split-by-space" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-config-macros</key>
    <name>clang-diagnostic-config-macros</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{definition|#undef}0 of configuration macro '%1' has no effect on the import of '%2'; pass '%select{-D%1=...|-U%1}0' on the command line to configure the module</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconfig-macros" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-constant-conversion</key>
    <name>clang-diagnostic-constant-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstant-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-consumed</key>
    <name>clang-diagnostic-consumed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: argument not in expected state; expected '%0', observed '%1'</li>
<li>warning: consumed analysis attribute is attached to member of class %0 which isn't marked as consumable</li>
<li>warning: invalid invocation of method '%0' on a temporary object while it is in the '%1' state</li>
<li>warning: invalid invocation of method '%0' on object '%1' while it is in the '%2' state</li>
<li>warning: parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'</li>
<li>warning: return state set for an unconsumable type '%0'</li>
<li>warning: return value not in expected state; expected '%0', observed '%1'</li>
<li>warning: state of variable '%0' must match at the entry and exit of loop</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconsumed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-conversion</key>
    <name>clang-diagnostic-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</li>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: implicit conversion discards imaginary component: %0 to %1</li>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 may lose precision</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
<li>warning: implicit conversion from floating-point type %0 to 'BOOL'</li>
<li>warning: implicit conversion from integral type %0 to 'BOOL'</li>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
<li>warning: implicit conversion turns vector to scalar: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
<li>warning: implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: non-type template argument value '%0' truncated to '%1' for template parameter of type %2</li>
<li>warning: non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-coro-non-aligned-allocation-function</key>
    <name>clang-diagnostic-coro-non-aligned-allocation-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcoro-non-aligned-allocation-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-coroutine</key>
    <name>clang-diagnostic-coroutine</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is required to declare the member 'unhandled_exception()' when exceptions are enabled</li>
<li>warning: 'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated</li>
<li>warning: return type of 'coroutine_handle&lt;&gt;::address should be 'void*' (have %0) in order to get capability with existing async C API.</li>
<li>warning: this coroutine may be split into pieces; not every piece is guaranteed to be inlined</li>
<li>warning: under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcoroutine" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-coroutine-missing-unhandled-exception</key>
    <name>clang-diagnostic-coroutine-missing-unhandled-exception</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is required to declare the member 'unhandled_exception()' when exceptions are enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-covered-switch-default</key>
    <name>clang-diagnostic-covered-switch-default</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: default label in switch which covers all enumeration values</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcovered-switch-default" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ctu</key>
    <name>clang-diagnostic-ctu</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: imported AST from '%0' had been generated for a different target, current: %1, imported: %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wctu" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cuda-compat</key>
    <name>clang-diagnostic-cuda-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute parameter %1 is negative and will be ignored</li>
<li>warning: argument to '#pragma unroll' should not be in parentheses in CUDA C/C++</li>
<li>warning: ignored 'inline' attribute on kernel function %0</li>
<li>warning: kernel function %0 is a member function; this may not be accepted by nvcc</li>
<li>warning: nvcc does not allow '__%0__' to appear after the parameter list in lambdas</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcuda-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-cuda-version</key>
    <name>clang-diagnostic-unknown-cuda-version</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: CUDA version %0 is only partially supported</li>
<li>warning: CUDA version%0 is newer than the latest%select{| partially}1 supported version %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-cuda-version" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-custom-atomic-properties</key>
    <name>clang-diagnostic-custom-atomic-properties</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcustom-atomic-properties" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dxil-validation</key>
    <name>clang-diagnostic-dxil-validation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dxv not found. Resulting DXIL will not be validated or signed for use in release environments.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdxil-validation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dangling</key>
    <name>clang-diagnostic-dangling</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned</li>
<li>warning: %select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: %select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression</li>
<li>warning: array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression</li>
<li>warning: binding reference member %0 to stack allocated %select{variable|parameter}2 %1</li>
<li>warning: initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1</li>
<li>warning: lifetime extension of %select{temporary|backing array of initializer list}0 created by aggregate initialization using a default member initializer is not yet supported; lifetime of %select{temporary|backing array}0 will end at the end of the full-expression</li>
<li>warning: object backing the pointer will be destroyed at the end of the full-expression</li>
<li>warning: returning %select{address of|reference to}0 local temporary object</li>
<li>warning: returning address of label, which is local</li>
<li>warning: temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dangling-else</key>
    <name>clang-diagnostic-dangling-else</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: add explicit braces to avoid dangling else</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-else" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dangling-field</key>
    <name>clang-diagnostic-dangling-field</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: binding reference member %0 to stack allocated %select{variable|parameter}2 %1</li>
<li>warning: initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1</li>
<li>warning: temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-field" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dangling-gsl</key>
    <name>clang-diagnostic-dangling-gsl</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: object backing the pointer will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-gsl" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dangling-initializer-list</key>
    <name>clang-diagnostic-dangling-initializer-list</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-initializer-list" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dealloc-in-category</key>
    <name>clang-diagnostic-dealloc-in-category</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: -dealloc is being overridden in a category</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdealloc-in-category" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-declaration-after-statement</key>
    <name>clang-diagnostic-declaration-after-statement</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mixing declarations and code is a C99 extension</li>
<li>warning: mixing declarations and code is incompatible with standards before C99</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeclaration-after-statement" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-defaulted-function-deleted</key>
    <name>clang-diagnostic-defaulted-function-deleted</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicitly defaulted %sub{select_defaulted_comparison_kind}0 is implicitly deleted</li>
<li>warning: explicitly defaulted %sub{select_special_member_kind}0 is implicitly deleted</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdefaulted-function-deleted" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delegating-ctor-cycles</key>
    <name>clang-diagnostic-delegating-ctor-cycles</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: constructor for %0 creates a delegation cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelegating-ctor-cycles" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-abstract-non-virtual-dtor</key>
    <name>clang-diagnostic-delete-abstract-non-virtual-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-incomplete</key>
    <name>clang-diagnostic-delete-incomplete</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cannot delete expression with pointer-to-'void' type %0</li>
<li>warning: deleting pointer to incomplete type %0 may cause undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-incomplete" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-non-abstract-non-virtual-dtor</key>
    <name>clang-diagnostic-delete-non-abstract-non-virtual-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-non-virtual-dtor</key>
    <name>clang-diagnostic-delete-non-virtual-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated</key>
    <name>clang-diagnostic-deprecated</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 does not support the option '%1'</li>
<li>warning: %0 is deprecated</li>
<li>warning: %0 is deprecated: %1</li>
<li>warning: %0 may be deprecated because the receiver type is unknown</li>
<li>warning: %select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: '_ExtInt' is deprecated; use '_BitInt' instead</li>
<li>warning: 'depend' clause for 'ordered' is deprecated; use 'doacross' instead</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: -O4 is equivalent to -O3</li>
<li>warning: Use of 'long' with '__vector' is deprecated</li>
<li>warning: access declarations are deprecated; use using declarations instead</li>
<li>warning: applying attribute %0 to a declaration is deprecated; apply it to the type instead</li>
<li>warning: argument '%0' is deprecated, %1</li>
<li>warning: argument '%0' is deprecated, use '%1' instead</li>
<li>warning: builtin %0 is deprecated; use %1 instead</li>
<li>warning: comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor</li>
<li>warning: dynamic exception specifications are deprecated</li>
<li>warning: identifier %0 preceded by whitespace in a literal operator declaration is deprecated</li>
<li>warning: implicit capture of 'this' with a capture default of '=' is deprecated</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: macro %0 has been marked as deprecated%select{|: %2}1</li>
<li>warning: minus(-) operator for reductions is deprecated; use + or user defined reduction instead</li>
<li>warning: out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated</li>
<li>warning: property access is using %0 method which is deprecated</li>
<li>warning: specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead</li>
<li>warning: specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead</li>
<li>warning: the '[[_Noreturn]]' attribute spelling is deprecated in C23; use '[[noreturn]]' instead</li>
<li>warning: top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23</li>
<li>warning: treating '%0' input as '%1' when in C++ mode, this behavior is deprecated</li>
<li>warning: use of C-style parameters in Objective-C method declarations is deprecated</li>
<li>warning: use of result of assignment to object of volatile-qualified type %0 is deprecated</li>
<li>warning: volatile qualifier in structured binding declaration is deprecated</li>
<li>warning: volatile-qualified parameter type %0 is deprecated</li>
<li>warning: volatile-qualified return type %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-anon-enum-enum-conversion</key>
    <name>clang-diagnostic-deprecated-anon-enum-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-anon-enum-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-array-compare</key>
    <name>clang-diagnostic-deprecated-array-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-array-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-attributes</key>
    <name>clang-diagnostic-deprecated-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: applying attribute %0 to a declaration is deprecated; apply it to the type instead</li>
<li>warning: specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead</li>
<li>warning: the '[[_Noreturn]]' attribute spelling is deprecated in C23; use '[[noreturn]]' instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-attributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-builtins</key>
    <name>clang-diagnostic-deprecated-builtins</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: builtin %0 is deprecated; use %1 instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-builtins" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-comma-subscript</key>
    <name>clang-diagnostic-deprecated-comma-subscript</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-comma-subscript" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-copy</key>
    <name>clang-diagnostic-deprecated-copy</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-copy" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-copy-with-dtor</key>
    <name>clang-diagnostic-deprecated-copy-with-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-copy-with-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-copy-with-user-provided-copy</key>
    <name>clang-diagnostic-deprecated-copy-with-user-provided-copy</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-copy" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-copy-with-user-provided-dtor</key>
    <name>clang-diagnostic-deprecated-copy-with-user-provided-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-coroutine</key>
    <name>clang-diagnostic-deprecated-coroutine</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-coroutine" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-declarations</key>
    <name>clang-diagnostic-deprecated-declarations</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is deprecated</li>
<li>warning: %0 is deprecated: %1</li>
<li>warning: %0 may be deprecated because the receiver type is unknown</li>
<li>warning: property access is using %0 method which is deprecated</li>
<li>warning: specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead</li>
<li>warning: use of C-style parameters in Objective-C method declarations is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-declarations" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-dynamic-exception-spec</key>
    <name>clang-diagnostic-deprecated-dynamic-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dynamic exception specifications are deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-enum-compare</key>
    <name>clang-diagnostic-deprecated-enum-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-enum-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-enum-compare-conditional</key>
    <name>clang-diagnostic-deprecated-enum-compare-conditional</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-enum-compare-conditional" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-enum-enum-conversion</key>
    <name>clang-diagnostic-deprecated-enum-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-enum-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-enum-float-conversion</key>
    <name>clang-diagnostic-deprecated-enum-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-enum-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-experimental-coroutine</key>
    <name>clang-diagnostic-deprecated-experimental-coroutine</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: support for std::experimental::%0 will be removed in LLVM 15; use std::%0 instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-experimental-coroutine" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-implementations</key>
    <name>clang-diagnostic-deprecated-implementations</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implementing deprecated %select{method|class|category}0</li>
<li>warning: implementing unavailable method</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-implementations" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-increment-bool</key>
    <name>clang-diagnostic-deprecated-increment-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-increment-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-literal-operator</key>
    <name>clang-diagnostic-deprecated-literal-operator</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: identifier %0 preceded by whitespace in a literal operator declaration is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-literal-operator" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-module-dot-map</key>
    <name>clang-diagnostic-deprecated-module-dot-map</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' as a module map name is deprecated, rename it to %select{module.modulemap|module.private.modulemap}1%select{| in the 'Modules' directory of the framework}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-module-dot-map" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-non-prototype</key>
    <name>clang-diagnostic-deprecated-non-prototype</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C23|and is treated as a zero-parameter prototype in C23, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1</li>
<li>warning: passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-non-prototype" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-objc-isa-usage</key>
    <name>clang-diagnostic-deprecated-objc-isa-usage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: assignment to Objective-C's isa is deprecated in favor of object_setClass()</li>
<li>warning: direct access to Objective-C's isa is deprecated in favor of object_getClass()</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-isa-usage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-pragma</key>
    <name>clang-diagnostic-deprecated-pragma</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro %0 has been marked as deprecated%select{|: %2}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-pragma" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-redundant-constexpr-static-def</key>
    <name>clang-diagnostic-deprecated-redundant-constexpr-static-def</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-redundant-constexpr-static-def" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-register</key>
    <name>clang-diagnostic-deprecated-register</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-register" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-static-analyzer-flag</key>
    <name>clang-diagnostic-deprecated-static-analyzer-flag</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error.</li>
<li>warning: analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error. Use '%2' instead.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-static-analyzer-flag" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-this-capture</key>
    <name>clang-diagnostic-deprecated-this-capture</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit capture of 'this' with a capture default of '=' is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-this-capture" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-type</key>
    <name>clang-diagnostic-deprecated-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '_ExtInt' is deprecated; use '_BitInt' instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-volatile</key>
    <name>clang-diagnostic-deprecated-volatile</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated</li>
<li>warning: use of result of assignment to object of volatile-qualified type %0 is deprecated</li>
<li>warning: volatile qualifier in structured binding declaration is deprecated</li>
<li>warning: volatile-qualified parameter type %0 is deprecated</li>
<li>warning: volatile-qualified return type %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-volatile" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-writable-strings</key>
    <name>clang-diagnostic-deprecated-writable-strings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-writable-strings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-distributed-object-modifiers</key>
    <name>clang-diagnostic-distributed-object-modifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting distributed object modifiers on parameter type in implementation of %0</li>
<li>warning: conflicting distributed object modifiers on return type in implementation of %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdistributed-object-modifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-division-by-zero</key>
    <name>clang-diagnostic-division-by-zero</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{remainder|division}0 by zero is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdivision-by-zero" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dllexport-explicit-instantiation-decl</key>
    <name>clang-diagnostic-dllexport-explicit-instantiation-decl</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicit instantiation declaration should not be 'dllexport'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-documentation</key>
    <name>clang-diagnostic-documentation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%select{\|@}0%1' command does not terminate a verbatim text block</li>
<li>warning: '%select{\|@}0%1' command has %plural{0:no|:%2}2 word argument%s2, expected %3</li>
<li>warning: '%select{\|@}0%1' command used in a comment that is attached to a %select{function returning void|constructor|destructor|method returning void}2</li>
<li>warning: '%select{\|@}0%1' command used in a comment that is not attached to a function or method declaration</li>
<li>warning: '%select{\|@}0%select{classdesign|coclass|dependency|helper|helperclass|helps|instancesize|ownership|performance|security|superclass}1' command should not be used in a comment attached to a non-container declaration</li>
<li>warning: '%select{\|@}0%select{class|interface|protocol|struct|union}1' command should not be used in a comment attached to a non-%select{class|interface|protocol|struct|union}2 declaration</li>
<li>warning: '%select{\|@}0%select{function|functiongroup|method|methodgroup|callback}1' command should be used in a comment attached to %select{a function|a function|an Objective-C method|an Objective-C method|a pointer to function}2 declaration</li>
<li>warning: '%select{\|@}0param' command used in a comment that is not attached to a function declaration</li>
<li>warning: '%select{\|@}0tparam' command used in a comment that is not attached to a template declaration</li>
<li>warning: HTML end tag '%0' is forbidden</li>
<li>warning: HTML end tag does not match any start tag</li>
<li>warning: HTML start tag '%0' closed by '%1'</li>
<li>warning: HTML start tag prematurely ended, expected attribute name or '&gt;'</li>
<li>warning: HTML tag '%0' requires an end tag</li>
<li>warning: declaration is marked with '%select{\|@}0deprecated' command but does not have a deprecation attribute</li>
<li>warning: duplicated command '%select{\|@}0%1'</li>
<li>warning: empty paragraph passed to '%select{\|@}0%1' command</li>
<li>warning: expected quoted string after equals sign</li>
<li>warning: line splicing in Doxygen comments are not supported</li>
<li>warning: not a Doxygen trailing comment</li>
<li>warning: parameter '%0' is already documented</li>
<li>warning: parameter '%0' not found in the function declaration</li>
<li>warning: template parameter '%0' is already documented</li>
<li>warning: template parameter '%0' not found in the template declaration</li>
<li>warning: unrecognized parameter passing direction, valid directions are '[in]', '[out]' and '[in,out]'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-documentation-deprecated-sync</key>
    <name>clang-diagnostic-documentation-deprecated-sync</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration is marked with '%select{\|@}0deprecated' command but does not have a deprecation attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-documentation-html</key>
    <name>clang-diagnostic-documentation-html</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: HTML end tag '%0' is forbidden</li>
<li>warning: HTML end tag does not match any start tag</li>
<li>warning: HTML start tag '%0' closed by '%1'</li>
<li>warning: HTML tag '%0' requires an end tag</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-html" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-documentation-pedantic</key>
    <name>clang-diagnostic-documentation-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown command tag name</li>
<li>warning: unknown command tag name '%0'; did you mean '%1'?</li>
<li>warning: whitespace is not allowed in parameter passing direction</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-documentation-unknown-command</key>
    <name>clang-diagnostic-documentation-unknown-command</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown command tag name</li>
<li>warning: unknown command tag name '%0'; did you mean '%1'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-unknown-command" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-double-promotion</key>
    <name>clang-diagnostic-double-promotion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion increases floating-point precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdouble-promotion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dtor-name</key>
    <name>clang-diagnostic-dtor-name</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ considers this destructor name lookup to be ambiguous</li>
<li>warning: ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~'</li>
<li>warning: qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdtor-name" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-duplicate-method-arg</key>
    <name>clang-diagnostic-duplicate-method-arg</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of method parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-method-arg" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-duplicate-decl-specifier</key>
    <name>clang-diagnostic-duplicate-decl-specifier</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: multiple identical address spaces specified for type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-decl-specifier" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dynamic-class-memaccess</key>
    <name>clang-diagnostic-dynamic-class-memaccess</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdynamic-class-memaccess" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dynamic-exception-spec</key>
    <name>clang-diagnostic-dynamic-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow dynamic exception specifications</li>
<li>warning: dynamic exception specifications are deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdynamic-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-empty-body</key>
    <name>clang-diagnostic-empty-body</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: for loop has empty body</li>
<li>warning: if statement has empty body</li>
<li>warning: range-based for loop has empty body</li>
<li>warning: switch statement has empty body</li>
<li>warning: while loop has empty body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-body" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-empty-init-stmt</key>
    <name>clang-diagnostic-empty-init-stmt</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-init-stmt" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-compare</key>
    <name>clang-diagnostic-enum-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-compare-conditional</key>
    <name>clang-diagnostic-enum-compare-conditional</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-compare-conditional" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-compare-switch</key>
    <name>clang-diagnostic-enum-compare-switch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-compare-switch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-conversion</key>
    <name>clang-diagnostic-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</li>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-enum-conversion</key>
    <name>clang-diagnostic-enum-enum-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-float-conversion</key>
    <name>clang-diagnostic-enum-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</li>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-too-large</key>
    <name>clang-diagnostic-enum-too-large</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enumeration values exceed range of largest integer</li>
<li>warning: incremented enumerator value %0 is not representable in the largest integer type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-too-large" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-exceptions</key>
    <name>clang-diagnostic-exceptions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has a non-throwing exception specification but can still throw</li>
<li>warning: cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block</li>
<li>warning: exception of type %0 will be caught by earlier handler</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexceptions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-excess-initializers</key>
    <name>clang-diagnostic-excess-initializers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: excess elements in %select{array|vector|scalar|union|struct}0 initializer</li>
<li>warning: excess elements in char array initializer</li>
<li>warning: excess elements in initializer for indivisible sizeless type %0</li>
<li>warning: initializer-string for char array is too long</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexcess-initializers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-exit-time-destructors</key>
    <name>clang-diagnostic-exit-time-destructors</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration requires an exit-time destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexit-time-destructors" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-expansion-to-defined</key>
    <name>clang-diagnostic-expansion-to-defined</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro expansion producing 'defined' has undefined behavior</li>
<li>warning: macro expansion producing 'defined' has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexpansion-to-defined" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-explicit-initialize-call</key>
    <name>clang-diagnostic-explicit-initialize-call</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicit call to +initialize results in duplicate call to +initialize</li>
<li>warning: explicit call to [super initialize] should only be in implementation of +initialize</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexplicit-initialize-call" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-export-unnamed</key>
    <name>clang-diagnostic-export-unnamed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 does not permit %select{an empty|a static_assert}0 declaration to appear in an export block</li>
<li>warning: ISO C++20 does not permit a declaration that does not introduce any names to be exported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexport-unnamed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extern-c-compat</key>
    <name>clang-diagnostic-extern-c-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextern-c-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extra</key>
    <name>clang-diagnostic-extra</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: '-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: call to function without interrupt attribute could clobber interruptee's VFP registers</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: method has no return type specified; defaults to 'id'</li>
<li>warning: missing field %0 initializer</li>
<li>warning: parameter %0 set but not used</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
<li>warning: performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior</li>
<li>warning: semicolon before method body is ignored</li>
<li>warning: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?</li>
<li>warning: unused parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extra-semi</key>
    <name>clang-diagnostic-extra-semi</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0</li>
<li>warning: extra ';' after member function definition</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-semi" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extra-semi-stmt</key>
    <name>clang-diagnostic-extra-semi-stmt</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: empty expression statement has no effect; remove unnecessary ';' to silence this warning</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-semi-stmt" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extra-tokens</key>
    <name>clang-diagnostic-extra-tokens</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra tokens at end of #%0 directive</li>
<li>warning: extra tokens at the end of '#pragma omp %0' are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-tokens" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-fuse-ld-path</key>
    <name>clang-diagnostic-fuse-ld-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfuse-ld-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-final-dtor-non-final-class</key>
    <name>clang-diagnostic-final-dtor-non-final-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: class with destructor marked '%select{final|sealed}0' cannot be inherited from</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfinal-dtor-non-final-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-final-macro</key>
    <name>clang-diagnostic-final-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro %0 has been marked as final and should not be %select{undefined|redefined}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfinal-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-flag-enum</key>
    <name>clang-diagnostic-flag-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enumeration value %0 is out of range of flags in enumeration type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wflag-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-flexible-array-extensions</key>
    <name>clang-diagnostic-flexible-array-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 may not be nested in a struct due to flexible array member</li>
<li>warning: %0 may not be used as an array element due to flexible array member</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wflexible-array-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-float-conversion</key>
    <name>clang-diagnostic-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-float-overflow-conversion</key>
    <name>clang-diagnostic-float-overflow-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-overflow-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-float-zero-conversion</key>
    <name>clang-diagnostic-float-zero-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-zero-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-for-loop-analysis</key>
    <name>clang-diagnostic-for-loop-analysis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfor-loop-analysis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format</key>
    <name>clang-diagnostic-format</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: '%%n' specifier not supported on this platform</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: incomplete format specifier</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using '%0' format specifier, but argument has boolean value</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format=2</key>
    <name>clang-diagnostic-format=2</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat=2" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-extra-args</key>
    <name>clang-diagnostic-format-extra-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: data argument not used by format string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-extra-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-insufficient-args</key>
    <name>clang-diagnostic-format-insufficient-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: more '%%' conversions than data arguments</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-insufficient-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-invalid-specifier</key>
    <name>clang-diagnostic-format-invalid-specifier</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid conversion specifier '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-invalid-specifier" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-nonliteral</key>
    <name>clang-diagnostic-format-nonliteral</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-nonliteral" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-non-iso</key>
    <name>clang-diagnostic-format-non-iso</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' %select{length modifier|conversion specifier}1 is not supported by ISO C</li>
<li>warning: positional arguments are not supported by ISO C</li>
<li>warning: using length modifier '%0' with conversion specifier '%1' is not supported by ISO C</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-non-iso" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-overflow</key>
    <name>clang-diagnostic-format-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-overflow-non-kprintf</key>
    <name>clang-diagnostic-format-overflow-non-kprintf</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-overflow-non-kprintf" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-pedantic</key>
    <name>clang-diagnostic-format-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-security</key>
    <name>clang-diagnostic-format-security</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal (potentially insecure)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-security" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-truncation</key>
    <name>clang-diagnostic-format-truncation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-truncation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-truncation-non-kprintf</key>
    <name>clang-diagnostic-format-truncation-non-kprintf</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-truncation-non-kprintf" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-type-confusion</key>
    <name>clang-diagnostic-format-type-confusion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-type-confusion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-format-zero-length</key>
    <name>clang-diagnostic-format-zero-length</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: format string is empty</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-zero-length" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-fortify-source</key>
    <name>clang-diagnostic-fortify-source</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: '%0' may overflow; destination buffer in argument %1 has size %2, but the corresponding specifier may require size %3</li>
<li>warning: '%0' size argument is too large; destination buffer has size %1, but size argument is %2</li>
<li>warning: '%0' will always overflow; destination buffer has size %1, but size argument is %2</li>
<li>warning: '%0' will always overflow; destination buffer has size %1, but the source string has length %2 (including NUL byte)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfortify-source" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-receiver-forward-class</key>
    <name>clang-diagnostic-receiver-forward-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: receiver %0 is a forward class and corresponding @interface may not exist</li>
<li>warning: receiver type %0 for instance message is a forward declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreceiver-forward-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-four-char-constants</key>
    <name>clang-diagnostic-four-char-constants</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multi-character character constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfour-char-constants" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-frame-address</key>
    <name>clang-diagnostic-frame-address</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: calling '%0' with a nonzero argument is unsafe</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframe-address" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atimport-in-framework-header</key>
    <name>clang-diagnostic-atimport-in-framework-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of '@import' in framework header is discouraged, including this header requires -fmodules</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watimport-in-framework-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-quoted-include-in-framework-header</key>
    <name>clang-diagnostic-quoted-include-in-framework-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: double-quoted include "%0" in framework header, expected angle-bracketed instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wquoted-include-in-framework-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-framework-include-private-from-public</key>
    <name>clang-diagnostic-framework-include-private-from-public</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: public framework header includes private framework header '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframework-include-private-from-public" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-free-nonheap-object</key>
    <name>clang-diagnostic-free-nonheap-object</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: attempt to call %0 on non-heap %select{object %2|object: block expression|object: lambda-to-function-pointer conversion}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfree-nonheap-object" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-function-def-in-objc-container</key>
    <name>clang-diagnostic-function-def-in-objc-container</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function definition inside an Objective-C container is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfunction-def-in-objc-container" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-function-multiversion</key>
    <name>clang-diagnostic-function-multiversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: CPU list contains duplicate entries; attribute ignored</li>
<li>warning: body of cpu_dispatch function will be ignored</li>
<li>warning: mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions</li>
<li>warning: version list contains duplicate entries</li>
<li>warning: version list contains entries that don't impact code generation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfunction-multiversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-future-attribute-extensions</key>
    <name>clang-diagnostic-future-attribute-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of the %0 attribute is a C++14 extension</li>
<li>warning: use of the %0 attribute is a C++17 extension</li>
<li>warning: use of the %0 attribute is a C++20 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfuture-attribute-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-write-strings</key>
    <name>clang-diagnostic-write-strings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 does not allow conversion from string literal to %0</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wwrite-strings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu</key>
    <name>clang-diagnostic-gnu</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include_next is a language extension</li>
<li>warning: #line directive with zero argument is a GNU extension</li>
<li>warning: %0 applied to an expression is a GNU extension</li>
<li>warning: %select{struct|union}0 without named members is a GNU extension</li>
<li>warning: '__auto_type' is a GNU extension</li>
<li>warning: anonymous structs are a GNU extension</li>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension</li>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension</li>
<li>warning: binary integer literals are a GNU extension</li>
<li>warning: cast to union type is a GNU extension</li>
<li>warning: class member cannot be redeclared</li>
<li>warning: complex integer types are a GNU extension</li>
<li>warning: defining a type within '%select{__builtin_offsetof|offsetof}0' is a Clang extension</li>
<li>warning: empty %select{struct|union}0 is a GNU extension</li>
<li>warning: expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension</li>
<li>warning: field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension</li>
<li>warning: flexible array initialization is a GNU extension</li>
<li>warning: flexible array member %0 in a union is a GNU extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension</li>
<li>warning: imaginary constants are a GNU extension</li>
<li>warning: in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</li>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
<li>warning: initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension</li>
<li>warning: must specify at least one argument for '...' parameter of variadic macro</li>
<li>warning: redeclaration of already-defined enum %0 is a GNU extension</li>
<li>warning: string literal operator templates are a GNU extension</li>
<li>warning: subscript of a pointer to void is a GNU extension</li>
<li>warning: this style of line directive is a GNU extension</li>
<li>warning: token pasting of ',' and __VA_ARGS__ is a GNU extension</li>
<li>warning: use of GNU 'missing =' extension in designator</li>
<li>warning: use of GNU ?: conditional expression extension, omitting middle operand</li>
<li>warning: use of GNU address-of-label extension</li>
<li>warning: use of GNU array range extension</li>
<li>warning: use of GNU case range extension</li>
<li>warning: use of GNU indirect-goto extension</li>
<li>warning: use of GNU old-style field designator extension</li>
<li>warning: use of GNU statement expression extension</li>
<li>warning: use of GNU statement expression extension from macro expansion</li>
<li>warning: variable length array folded to constant array as an extension</li>
<li>warning: variable length arrays are a C99 feature</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: zero size arrays are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-alignof-expression</key>
    <name>clang-diagnostic-gnu-alignof-expression</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 applied to an expression is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-alignof-expression" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-anonymous-struct</key>
    <name>clang-diagnostic-gnu-anonymous-struct</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: anonymous structs are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-anonymous-struct" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-auto-type</key>
    <name>clang-diagnostic-gnu-auto-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '__auto_type' is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-auto-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-binary-literal</key>
    <name>clang-diagnostic-gnu-binary-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-case-range</key>
    <name>clang-diagnostic-gnu-case-range</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU case range extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-case-range" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-complex-integer</key>
    <name>clang-diagnostic-gnu-complex-integer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: complex integer types are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-complex-integer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-compound-literal-initializer</key>
    <name>clang-diagnostic-gnu-compound-literal-initializer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-conditional-omitted-operand</key>
    <name>clang-diagnostic-gnu-conditional-omitted-operand</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU ?: conditional expression extension, omitting middle operand</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-designator</key>
    <name>clang-diagnostic-gnu-designator</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU 'missing =' extension in designator</li>
<li>warning: use of GNU array range extension</li>
<li>warning: use of GNU old-style field designator extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-designator" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-empty-initializer</key>
    <name>clang-diagnostic-gnu-empty-initializer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU empty initializer extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-empty-initializer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-empty-struct</key>
    <name>clang-diagnostic-gnu-empty-struct</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{struct|union}0 without named members is a GNU extension</li>
<li>warning: empty %select{struct|union}0 is a GNU extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-empty-struct" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-flexible-array-initializer</key>
    <name>clang-diagnostic-gnu-flexible-array-initializer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: flexible array initialization is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-flexible-array-union-member</key>
    <name>clang-diagnostic-gnu-flexible-array-union-member</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: flexible array member %0 in a union is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-folding-constant</key>
    <name>clang-diagnostic-gnu-folding-constant</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension</li>
<li>warning: in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</li>
<li>warning: variable length array folded to constant array as an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-folding-constant" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-imaginary-constant</key>
    <name>clang-diagnostic-gnu-imaginary-constant</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: imaginary constants are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-imaginary-constant" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-include-next</key>
    <name>clang-diagnostic-gnu-include-next</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include_next is a language extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-include-next" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-label-as-value</key>
    <name>clang-diagnostic-gnu-label-as-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU address-of-label extension</li>
<li>warning: use of GNU indirect-goto extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-label-as-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-line-marker</key>
    <name>clang-diagnostic-gnu-line-marker</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: this style of line directive is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-line-marker" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-null-pointer-arithmetic</key>
    <name>clang-diagnostic-gnu-null-pointer-arithmetic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-null-pointer-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-offsetof-extensions</key>
    <name>clang-diagnostic-gnu-offsetof-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: defining a type within '%select{__builtin_offsetof|offsetof}0' is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-offsetof-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-pointer-arith</key>
    <name>clang-diagnostic-gnu-pointer-arith</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension</li>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension</li>
<li>warning: subscript of a pointer to void is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-pointer-arith" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-redeclared-enum</key>
    <name>clang-diagnostic-gnu-redeclared-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of already-defined enum %0 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-redeclared-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-statement-expression</key>
    <name>clang-diagnostic-gnu-statement-expression</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU statement expression extension</li>
<li>warning: use of GNU statement expression extension from macro expansion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-statement-expression" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-statement-expression-from-macro-expansion</key>
    <name>clang-diagnostic-gnu-statement-expression-from-macro-expansion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU statement expression extension from macro expansion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-statement-expression-from-macro-expansion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-static-float-init</key>
    <name>clang-diagnostic-gnu-static-float-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-static-float-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-string-literal-operator-template</key>
    <name>clang-diagnostic-gnu-string-literal-operator-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: string literal operator templates are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-union-cast</key>
    <name>clang-diagnostic-gnu-union-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to union type is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-union-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-variable-sized-type-not-at-end</key>
    <name>clang-diagnostic-gnu-variable-sized-type-not-at-end</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-zero-line-directive</key>
    <name>clang-diagnostic-gnu-zero-line-directive</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #line directive with zero argument is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-zero-line-directive" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-zero-variadic-macro-arguments</key>
    <name>clang-diagnostic-gnu-zero-variadic-macro-arguments</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: must specify at least one argument for '...' parameter of variadic macro</li>
<li>warning: token pasting of ',' and __VA_ARGS__ is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gcc-compat</key>
    <name>clang-diagnostic-gcc-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is bound to current loop, GCC binds it to the enclosing loop</li>
<li>warning: 'break' is bound to loop, GCC binds it to switch</li>
<li>warning: 'diagnose_if' is a clang extension</li>
<li>warning: 'enable_if' is a clang extension</li>
<li>warning: GCC does not allow %0 attribute in this position on a function definition</li>
<li>warning: GCC does not allow an attribute in this position on a function declaration</li>
<li>warning: GCC does not allow the %0 attribute to be written on a type</li>
<li>warning: GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier</li>
<li>warning: GCC does not allow variable declarations in for loop initializers before C99</li>
<li>warning: GCC requires a function with the %0 attribute to be variadic</li>
<li>warning: __final is a GNU extension, consider using C++11 final</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgcc-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-global-constructors</key>
    <name>clang-diagnostic-global-constructors</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration requires a global constructor</li>
<li>warning: declaration requires a global destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wglobal-constructors" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-global-isel</key>
    <name>clang-diagnostic-global-isel</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: -fglobal-isel support for the '%0' architecture is incomplete</li>
<li>warning: -fglobal-isel support is incomplete for this architecture at the current optimization level</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wglobal-isel" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-hip-only</key>
    <name>clang-diagnostic-hip-only</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is ignored since it is only supported for HIP</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#whip-only" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-hip-omp-target-directives</key>
    <name>clang-diagnostic-hip-omp-target-directives</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: HIP does not support OpenMP target directives; directive has been ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#whip-omp-target-directives" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-hlsl-extensions</key>
    <name>clang-diagnostic-hlsl-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: access specifiers are a clang HLSL extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#whlsl-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-header-hygiene</key>
    <name>clang-diagnostic-header-hygiene</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using namespace directive in global context in header</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wheader-hygiene" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-attributes</key>
    <name>clang-diagnostic-ignored-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute argument '%1' not supported on a global variable</li>
<li>warning: %0 attribute argument not supported: %1</li>
<li>warning: %0 attribute can only be applied to instance variables or properties</li>
<li>warning: %0 attribute ignored</li>
<li>warning: %0 attribute ignored for field of type %1</li>
<li>warning: %0 attribute ignored on a non-definition declaration</li>
<li>warning: %0 attribute ignored on inline function</li>
<li>warning: %0 attribute ignored when parsing type</li>
<li>warning: %0 attribute is deprecated and ignored in %1</li>
<li>warning: %0 attribute is ignored because %1 is not a function pointer</li>
<li>warning: %0 attribute is ignored because there exists no call expression inside the statement</li>
<li>warning: %0 attribute isn't implemented by this Objective-C runtime</li>
<li>warning: %0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters</li>
<li>warning: %0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2</li>
<li>warning: %0 attribute only applies to a pointer or reference (%1 is invalid)</li>
<li>warning: %0 attribute only applies to return values that are pointers</li>
<li>warning: %0 attribute only applies to return values that are pointers or references</li>
<li>warning: %0 attribute only applies to%select{| constant}1 pointer arguments</li>
<li>warning: %0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</li>
<li>warning: %0 currently has no effect on a using declaration</li>
<li>warning: %0%select{ attribute|}1 only applies to %2</li>
<li>warning: %0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions}2</li>
<li>warning: %q0 redeclared inline; %1 attribute ignored</li>
<li>warning: %select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1</li>
<li>warning: %select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2</li>
<li>warning: %select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden</li>
<li>warning: %select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored</li>
<li>warning: %select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored</li>
<li>warning: '%0' attribute cannot be specified on a definition</li>
<li>warning: '%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</li>
<li>warning: '%select{pure|const}0' attribute on function returning 'void'; attribute ignored</li>
<li>warning: '[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead</li>
<li>warning: '__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?</li>
<li>warning: 'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored</li>
<li>warning: 'cmse_nonsecure_entry' cannot be applied to functions with internal linkage</li>
<li>warning: 'const' attribute imposes more restrictions; 'pure' attribute ignored</li>
<li>warning: 'deprecated' attribute on anonymous namespace ignored</li>
<li>warning: 'dllexport' attribute ignored on explicit instantiation definition</li>
<li>warning: 'gnu_inline' attribute requires function to be marked 'inline', attribute ignored</li>
<li>warning: 'internal_linkage' attribute on a non-static local variable is ignored</li>
<li>warning: 'mig_server_routine' attribute only applies to routines that return a kern_return_t</li>
<li>warning: 'nocf_check' attribute ignored; use -fcf-protection to enable the attribute</li>
<li>warning: 'noderef' can only be used on an array or pointer type</li>
<li>warning: 'nonnull' attribute applied to function with no pointer arguments</li>
<li>warning: 'nonnull' attribute when used on parameters takes no arguments</li>
<li>warning: 'nothrow' attribute conflicts with exception specification; attribute ignored</li>
<li>warning: 'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0</li>
<li>warning: 'require_constant_initialization' attribute added after initialization of variable</li>
<li>warning: 'sentinel' attribute only supported for variadic %select{functions|blocks}0</li>
<li>warning: 'sentinel' attribute requires named arguments</li>
<li>warning: 'sycl_kernel' attribute only applies to a function template with at least two template parameters</li>
<li>warning: 'trivial_abi' cannot be applied to %0</li>
<li>warning: Objective-C GC does not allow weak variables on the stack</li>
<li>warning: __declspec attribute %0 is not supported</li>
<li>warning: __weak attribute cannot be specified on a field declaration</li>
<li>warning: __weak attribute cannot be specified on an automatic variable when ARC is not enabled</li>
<li>warning: attribute %0 after definition is ignored</li>
<li>warning: attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value</li>
<li>warning: attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement</li>
<li>warning: attribute %0 has no effect when annotating an infinite loop</li>
<li>warning: attribute %0 ignored, because it cannot be applied to a type</li>
<li>warning: attribute %0 ignored, because it cannot be applied to omitted return type</li>
<li>warning: attribute %0 ignored, because it is not attached to a declaration</li>
<li>warning: attribute %0 is already applied</li>
<li>warning: attribute %0 is already applied with different arguments</li>
<li>warning: attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration</li>
<li>warning: attribute declaration must precede definition</li>
<li>warning: attribute is ignored on this statement as it only applies to functions; use '%0' on statements</li>
<li>warning: conflicting attributes %0 are ignored</li>
<li>warning: direct attribute on property %0 ignored (not implemented by this Objective-C runtime)</li>
<li>warning: first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored</li>
<li>warning: function template with 'sycl_kernel' attribute must have a 'void' return type</li>
<li>warning: function template with 'sycl_kernel' attribute must have a single parameter</li>
<li>warning: ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type</li>
<li>warning: import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration</li>
<li>warning: import %select{module|name}0 cannot be applied to a function with a definition</li>
<li>warning: inheritance model ignored on %select{primary template|partial specialization}0</li>
<li>warning: maxclusterrank requires sm_90 or higher, CUDA arch provided: %0, ignoring %1 attribute</li>
<li>warning: qualifiers after comma in declarator list are ignored</li>
<li>warning: repeated RISC-V 'interrupt' attribute</li>
<li>warning: requested alignment is less than minimum alignment of %1 for type %0</li>
<li>warning: statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'</li>
<li>warning: template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter</li>
<li>warning: transparent union definition must contain at least one field; transparent_union attribute ignored</li>
<li>warning: transparent_union attribute can only be applied to a union definition; attribute ignored</li>
<li>warning: unknown attribute '%0'</li>
<li>warning: unknown visibility %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-attributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-gch</key>
    <name>clang-diagnostic-ignored-gch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: precompiled header '%0' was ignored because it is not a clang PCH file</li>
<li>warning: precompiled header directory '%0' was ignored because it contains no clang PCH files</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-gch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-optimization-argument</key>
    <name>clang-diagnostic-ignored-optimization-argument</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: optimization flag '%0' is not supported</li>
<li>warning: optimization flag '%0' is not supported for target '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-optimization-argument" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-pragma-intrinsic</key>
    <name>clang-diagnostic-ignored-pragma-intrinsic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragma-intrinsic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-pragma-optimize</key>
    <name>clang-diagnostic-ignored-pragma-optimize</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '#pragma optimize' is not supported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragma-optimize" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-pragmas</key>
    <name>clang-diagnostic-ignored-pragmas</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma %0(pop, ...) failed: %1</li>
<li>warning: #pragma options align=reset failed: %0</li>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
<li>warning: %select{value|type}0-dependent expression passed as an argument to debug command</li>
<li>warning: '#pragma %0' is not supported on this target - ignored</li>
<li>warning: '#pragma comment %0' ignored</li>
<li>warning: '#pragma init_seg' is only supported when targeting a Microsoft environment</li>
<li>warning: OpenCL extension %0 unknown or does not require pragma - ignoring</li>
<li>warning: expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</li>
<li>warning: expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring</li>
<li>warning: expected '#pragma unused' argument to be a variable name</li>
<li>warning: expected ')' or ',' in '#pragma %0'</li>
<li>warning: expected ',' in '#pragma %0'</li>
<li>warning: expected '=' following '#pragma %select{align|options align}0' - ignored</li>
<li>warning: expected 'align' following '#pragma options' - ignored</li>
<li>warning: expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a stack label or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected action or ')' in '#pragma %0' - ignored</li>
<li>warning: expected identifier in '#pragma %0' - ignored</li>
<li>warning: expected integer between %0 and %1 inclusive in '#pragma %2' - ignored</li>
<li>warning: expected integer or identifier in '#pragma pack' - ignored</li>
<li>warning: expected non-wide string literal in '#pragma %0'</li>
<li>warning: expected push, pop or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected string literal in '#pragma %0' - ignoring</li>
<li>warning: expected string literal in 'clause %0' - ignoring</li>
<li>warning: extra tokens at end of '#pragma %0' - ignored</li>
<li>warning: incorrect use of #pragma clang force_cuda_host_device begin|end</li>
<li>warning: incorrect use of '#pragma fenv_access (on|off)' - ignored</li>
<li>warning: incorrect use of '#pragma ms_struct on|off' - ignored</li>
<li>warning: invalid alignment option in '#pragma %select{align|options align}0' - ignored</li>
<li>warning: invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored</li>
<li>warning: known but unsupported action '%1' for '#pragma %0' - ignored</li>
<li>warning: missing '(' after '#pragma %0' - ignoring</li>
<li>warning: missing ')' after '#pragma %0' - ignoring</li>
<li>warning: missing ':' after %0 - ignoring</li>
<li>warning: missing ':' or ')' after %0 - ignoring</li>
<li>warning: missing argument to '#pragma %0'%select{|; expected %2}1</li>
<li>warning: missing argument to debug command '%0'</li>
<li>warning: missing debug command</li>
<li>warning: only variables can be arguments to '#pragma unused'</li>
<li>warning: pragma pop_macro could not pop '%0', no matching push_macro</li>
<li>warning: undeclared variable %0 used as an argument for '#pragma unused'</li>
<li>warning: unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2</li>
<li>warning: unexpected argument to debug command</li>
<li>warning: unexpected debug command '%0'</li>
<li>warning: unknown action '%1' for '#pragma %0' - ignored</li>
<li>warning: unknown action for '#pragma %0' - ignored</li>
<li>warning: unknown module '%0'</li>
<li>warning: unsupported OpenCL extension %0 - ignoring</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragmas" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-qualifiers</key>
    <name>clang-diagnostic-ignored-qualifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-reference-qualifiers</key>
    <name>clang-diagnostic-ignored-reference-qualifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-reference-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit</key>
    <name>clang-diagnostic-implicit</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: call to undeclared function %0; ISO C99 and later do not support implicit function declarations</li>
<li>warning: call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: use of unknown builtin %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-atomic-properties</key>
    <name>clang-diagnostic-implicit-atomic-properties</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property is assumed atomic by default</li>
<li>warning: property is assumed atomic when auto-synthesizing the property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-atomic-properties" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-const-int-float-conversion</key>
    <name>clang-diagnostic-implicit-const-int-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-conversion-floating-point-to-bool</key>
    <name>clang-diagnostic-implicit-conversion-floating-point-to-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion turns floating-point number into bool: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-fallthrough</key>
    <name>clang-diagnostic-implicit-fallthrough</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unannotated fall-through between switch labels</li>
<li>warning: unannotated fall-through between switch labels in partly-annotated function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fallthrough" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-fallthrough-per-function</key>
    <name>clang-diagnostic-implicit-fallthrough-per-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unannotated fall-through between switch labels in partly-annotated function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-fixed-point-conversion</key>
    <name>clang-diagnostic-implicit-fixed-point-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 cannot fit within the range of values for %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-float-conversion</key>
    <name>clang-diagnostic-implicit-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 may lose precision</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from floating-point type %0 to 'BOOL'</li>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-function-declaration</key>
    <name>clang-diagnostic-implicit-function-declaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: call to undeclared function %0; ISO C99 and later do not support implicit function declarations</li>
<li>warning: call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: use of unknown builtin %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-function-declaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-int</key>
    <name>clang-diagnostic-implicit-int</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-int" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-int-conversion</key>
    <name>clang-diagnostic-implicit-int-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit conversion from integral type %0 to 'BOOL'</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-int-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-int-float-conversion</key>
    <name>clang-diagnostic-implicit-int-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 may lose precision</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-int-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicitly-unsigned-literal</key>
    <name>clang-diagnostic-implicitly-unsigned-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-exception-spec</key>
    <name>clang-diagnostic-incompatible-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: exception specifications of %select{return|argument}0 types differ</li>
<li>warning: target exception specification is not superset of source</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-function-pointer-types</key>
    <name>clang-diagnostic-incompatible-function-pointer-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-function-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-ms-pragma-section</key>
    <name>clang-diagnostic-incompatible-ms-pragma-section</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: `#pragma const_seg` for section %1 will not apply to %0 due to the presence of a %select{mutable field||non-trivial constructor|non-trivial destructor}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-ms-pragma-section" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-ms-struct</key>
    <name>clang-diagnostic-incompatible-ms-struct</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions</li>
<li>warning: ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren't a power of two</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-ms-struct" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-pointer-types</key>
    <name>clang-diagnostic-incompatible-pointer-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</li>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</li>
<li>warning: %select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers</li>
<li>warning: incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-pointer-types-discards-qualifiers</key>
    <name>clang-diagnostic-incompatible-pointer-types-discards-qualifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</li>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</li>
<li>warning: %select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incomplete-framework-module-declaration</key>
    <name>clang-diagnostic-incomplete-framework-module-declaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-framework-module-declaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incomplete-module</key>
    <name>clang-diagnostic-incomplete-module</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
<li>warning: include of non-modular header inside module '%0': '%1'</li>
<li>warning: missing submodule '%0'</li>
<li>warning: umbrella directory '%0' not found</li>
<li>warning: umbrella header for module '%0' does not include header '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-module" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incomplete-umbrella</key>
    <name>clang-diagnostic-incomplete-umbrella</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: missing submodule '%0'</li>
<li>warning: umbrella directory '%0' not found</li>
<li>warning: umbrella header for module '%0' does not include header '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-umbrella" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-increment-bool</key>
    <name>clang-diagnostic-increment-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow incrementing expression of type bool</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincrement-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-IndependentClass-attribute</key>
    <name>clang-diagnostic-IndependentClass-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored</li>
<li>warning: 'objc_independent_class' attribute may be put on a typedef only; attribute is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wIndependentClass-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-infinite-recursion</key>
    <name>clang-diagnostic-infinite-recursion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: all paths through this function will call itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winfinite-recursion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-initializer-overrides</key>
    <name>clang-diagnostic-initializer-overrides</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winitializer-overrides" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inline-namespace-reopened-noninline</key>
    <name>clang-diagnostic-inline-namespace-reopened-noninline</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: inline namespace reopened as a non-inline namespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-int-conversion</key>
    <name>clang-diagnostic-int-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-int-in-bool-context</key>
    <name>clang-diagnostic-int-in-bool-context</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: converting the enum constant to a boolean</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean; did you mean '(%0) != 0'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-in-bool-context" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-int-to-pointer-cast</key>
    <name>clang-diagnostic-int-to-pointer-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to %1 from smaller integer type %0</li>
<li>warning: cast to %1 from smaller integer type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-to-pointer-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-int-to-void-pointer-cast</key>
    <name>clang-diagnostic-int-to-void-pointer-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to %1 from smaller integer type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-to-void-pointer-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-command-line-argument</key>
    <name>clang-diagnostic-invalid-command-line-argument</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: feature flag '%0' is ignored since the feature is read only</li>
<li>warning: feature flag '%0' must start with either '+' to enable the feature or '-' to disable it; flag ignored</li>
<li>warning: ignoring extension '%0' because the '%1' architecture does not support it</li>
<li>warning: mismatch between architecture and environment in target triple '%0'; did you mean '%1'?</li>
<li>warning: missing plugin argument for plugin %0 in %1</li>
<li>warning: missing plugin name in %0</li>
<li>warning: no MCU device specified, but '-mhwmult' is set to 'auto', assuming no hardware multiply; use '-mmcu' to specify an MSP430 device, or '-mhwmult' to set the hardware multiply type explicitly</li>
<li>warning: optimization flag '%0' is not supported</li>
<li>warning: optimization flag '%0' is not supported for target '%1'</li>
<li>warning: optimization level '%0' is not supported; using '%1%2' instead</li>
<li>warning: the given MCU does not support hardware multiply, but '-mhwmult' is set to %0</li>
<li>warning: the given MCU supports %0 hardware multiply, but '-mhwmult' is set to %1</li>
<li>warning: the object size sanitizer has no effect at -O0, but is explicitly enabled: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-command-line-argument" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-ios-deployment-target</key>
    <name>clang-diagnostic-invalid-ios-deployment-target</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid iOS deployment version '%0', iOS 10 is the maximum deployment target for 32-bit targets</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-ios-deployment-target" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-noreturn</key>
    <name>clang-diagnostic-invalid-noreturn</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function %0 declared 'noreturn' should not return</li>
<li>warning: function declared 'noreturn' should not return</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-noreturn" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-offsetof</key>
    <name>clang-diagnostic-invalid-offsetof</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: offset of on non-POD type %0</li>
<li>warning: offset of on non-standard-layout type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-offsetof" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-or-nonexistent-directory</key>
    <name>clang-diagnostic-invalid-or-nonexistent-directory</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unable to find %0 directory, expected to be in '%1' found via %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-pp-token</key>
    <name>clang-diagnostic-invalid-pp-token</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: empty character constant</li>
<li>warning: missing terminating %select{'|'"'}0 character</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-pp-token" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-source-encoding</key>
    <name>clang-diagnostic-invalid-source-encoding</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: illegal character encoding in character literal</li>
<li>warning: illegal character encoding in string literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-source-encoding" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-knr-promoted-parameter</key>
    <name>clang-diagnostic-knr-promoted-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %diff{promoted type $ of K&amp;R function parameter is not compatible with the parameter type $|promoted type of K&amp;R function parameter is not compatible with parameter type}0,1 declared in a previous prototype</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wknr-promoted-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-keyword-macro</key>
    <name>clang-diagnostic-keyword-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: keyword is hidden by macro definition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wkeyword-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-keyword-compat</key>
    <name>clang-diagnostic-keyword-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wkeyword-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-large-by-value-copy</key>
    <name>clang-diagnostic-large-by-value-copy</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?</li>
<li>warning: return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlarge-by-value-copy" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-linker-warnings</key>
    <name>clang-diagnostic-linker-warnings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: linking module '%0': %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlinker-warnings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-literal-conversion</key>
    <name>clang-diagnostic-literal-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wliteral-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-literal-range</key>
    <name>clang-diagnostic-literal-range</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1</li>
<li>warning: magnitude of floating-point constant too large for type %0; maximum is %1</li>
<li>warning: magnitude of floating-point constant too small for type %0; minimum is %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wliteral-range" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-local-type-template-args</key>
    <name>clang-diagnostic-local-type-template-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: template argument uses local type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlocal-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-logical-not-parentheses</key>
    <name>clang-diagnostic-logical-not-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlogical-not-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-logical-op-parentheses</key>
    <name>clang-diagnostic-logical-op-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '&amp;&amp;' within '||'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlogical-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-long-long</key>
    <name>clang-diagnostic-long-long</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'long long' is an extension when C99 mode is not enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlong-long" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-loop-analysis</key>
    <name>clang-diagnostic-loop-analysis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 binds to a temporary value produced by a range of type %1</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wloop-analysis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-macro-redefined</key>
    <name>clang-diagnostic-macro-redefined</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 macro redefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmacro-redefined" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-main</key>
    <name>clang-diagnostic-main</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'main' is not allowed to be declared _Noreturn</li>
<li>warning: 'main' is not allowed to be declared variadic</li>
<li>warning: 'main' should not be declared static</li>
<li>warning: ISO C++ does not allow 'main' to be used by a program</li>
<li>warning: bool literal returned from 'main'</li>
<li>warning: only one parameter on 'main' declaration</li>
<li>warning: variable named 'main' with external linkage has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmain" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-main-return-type</key>
    <name>clang-diagnostic-main-return-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: return type of 'main' is not 'int'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmain-return-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-malformed-warning-check</key>
    <name>clang-diagnostic-malformed-warning-check</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: __has_warning expected option name (e.g. "-Wundef")</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmalformed-warning-check" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-max-tokens</key>
    <name>clang-diagnostic-max-tokens</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the number of preprocessor source tokens (%0) exceeds this token limit (%1)</li>
<li>warning: the total number of preprocessor source tokens (%0) exceeds the token limit (%1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmax-tokens" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-max-unsigned-zero</key>
    <name>clang-diagnostic-max-unsigned-zero</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmax-unsigned-zero" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-memset-transposed-args</key>
    <name>clang-diagnostic-memset-transposed-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmemset-transposed-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-method-access</key>
    <name>clang-diagnostic-objc-method-access</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: class method %objcclass0 not found (return type defaults to 'id')</li>
<li>warning: class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?</li>
<li>warning: instance method %0 found instead of class method %1</li>
<li>warning: instance method %0 is being used on 'Class' which is not in the root class</li>
<li>warning: instance method %objcinstance0 not found (return type defaults to 'id')</li>
<li>warning: instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-method-access" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-duplicate-method-match</key>
    <name>clang-diagnostic-duplicate-method-match</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple declarations of method %0 found and ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-method-match" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-method-signatures</key>
    <name>clang-diagnostic-method-signatures</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting parameter types in implementation of %0: %1 vs %2</li>
<li>warning: conflicting return type in implementation of %0: %1 vs %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmethod-signatures" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft</key>
    <name>clang-diagnostic-microsoft</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
<li>warning: #pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead</li>
<li>warning: %q0 redeclared without %1 attribute: previous %1 ignored</li>
<li>warning: %q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added</li>
<li>warning: %select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension</li>
<li>warning: %select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</li>
<li>warning: 'abstract' keyword is a Microsoft extension</li>
<li>warning: 'mutable' on a reference type is a Microsoft extension</li>
<li>warning: 'sealed' keyword is a Microsoft extension</li>
<li>warning: 'static' can only be specified inside the class definition</li>
<li>warning: C++ operator %0 (aka %1) used as a macro name</li>
<li>warning: anonymous %select{structs|unions}0 are a Microsoft extension</li>
<li>warning: charizing operator #@ is a Microsoft extension</li>
<li>warning: declaration of %0 shadows template parameter</li>
<li>warning: default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension</li>
<li>warning: duplicate explicit instantiation of %0 ignored as a Microsoft extension</li>
<li>warning: enumeration types with a fixed underlying type are a Microsoft extension</li>
<li>warning: enumerator value is not representable in the underlying type %0</li>
<li>warning: exception specification in declaration does not match previous declaration</li>
<li>warning: exception specification in explicit instantiation does not match instantiated one</li>
<li>warning: exception specification of '...' is a Microsoft extension</li>
<li>warning: exception specification of overriding function is more lax than base version</li>
<li>warning: expansion of predefined identifier '%0' to a string literal is a Microsoft extension</li>
<li>warning: explicit constructor calls are a Microsoft extension</li>
<li>warning: extra qualification on member %0</li>
<li>warning: flexible array member %0 in a union is a Microsoft extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension</li>
<li>warning: forward references to 'enum' types are a Microsoft extension</li>
<li>warning: function definition with pure-specifier is a Microsoft extension</li>
<li>warning: implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: initializing an array from a '%0' predefined identifier is a Microsoft extension</li>
<li>warning: jump from this goto statement to its label is a Microsoft extension</li>
<li>warning: non-type template argument containing a dereference operation is a Microsoft extension</li>
<li>warning: pasting two '/' tokens into a '//' comment is a Microsoft extension</li>
<li>warning: pseudo-destructors on type void are a Microsoft extension</li>
<li>warning: redeclaring non-static %0 as static is a Microsoft extension</li>
<li>warning: redefinition of default argument</li>
<li>warning: static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension</li>
<li>warning: treating Ctrl-Z as end-of-file is a Microsoft extension</li>
<li>warning: types declared in an anonymous %select{struct|union}0 are a Microsoft extension</li>
<li>warning: union member %0 has reference type %1, which is a Microsoft extension</li>
<li>warning: unqualified base initializer of class templates is a Microsoft extension</li>
<li>warning: unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</li>
<li>warning: use of 'static_assert' without inclusion of &lt;assert.h&gt; is a Microsoft extension</li>
<li>warning: use of member %0 before its declaration is a Microsoft extension</li>
<li>warning: use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension</li>
<li>warning: use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension</li>
<li>warning: using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension</li>
<li>warning: using the undeclared type %0 as a default template argument is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-abstract</key>
    <name>clang-diagnostic-microsoft-abstract</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'abstract' keyword is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-abstract" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-anon-tag</key>
    <name>clang-diagnostic-microsoft-anon-tag</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: anonymous %select{structs|unions}0 are a Microsoft extension</li>
<li>warning: types declared in an anonymous %select{struct|union}0 are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-anon-tag" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-cast</key>
    <name>clang-diagnostic-microsoft-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-charize</key>
    <name>clang-diagnostic-microsoft-charize</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: charizing operator #@ is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-charize" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-comment-paste</key>
    <name>clang-diagnostic-microsoft-comment-paste</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: pasting two '/' tokens into a '//' comment is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-comment-paste" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-const-init</key>
    <name>clang-diagnostic-microsoft-const-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-const-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-cpp-macro</key>
    <name>clang-diagnostic-microsoft-cpp-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: C++ operator %0 (aka %1) used as a macro name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-default-arg-redefinition</key>
    <name>clang-diagnostic-microsoft-default-arg-redefinition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of default argument</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-drectve-section</key>
    <name>clang-diagnostic-microsoft-drectve-section</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-drectve-section" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-end-of-file</key>
    <name>clang-diagnostic-microsoft-end-of-file</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: treating Ctrl-Z as end-of-file is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-end-of-file" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-enum-forward-reference</key>
    <name>clang-diagnostic-microsoft-enum-forward-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: forward references to 'enum' types are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-enum-value</key>
    <name>clang-diagnostic-microsoft-enum-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enumerator value is not representable in the underlying type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-enum-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-exception-spec</key>
    <name>clang-diagnostic-microsoft-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</li>
<li>warning: exception specification in declaration does not match previous declaration</li>
<li>warning: exception specification in explicit instantiation does not match instantiated one</li>
<li>warning: exception specification of '...' is a Microsoft extension</li>
<li>warning: exception specification of overriding function is more lax than base version</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-explicit-constructor-call</key>
    <name>clang-diagnostic-microsoft-explicit-constructor-call</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicit constructor calls are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-extra-qualification</key>
    <name>clang-diagnostic-microsoft-extra-qualification</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra qualification on member %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-fixed-enum</key>
    <name>clang-diagnostic-microsoft-fixed-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enumeration types with a fixed underlying type are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-flexible-array</key>
    <name>clang-diagnostic-microsoft-flexible-array</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: flexible array member %0 in a union is a Microsoft extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-flexible-array" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-goto</key>
    <name>clang-diagnostic-microsoft-goto</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: jump from this goto statement to its label is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-goto" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-inaccessible-base</key>
    <name>clang-diagnostic-microsoft-inaccessible-base</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: accessing inaccessible direct base %0 of %1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-include</key>
    <name>clang-diagnostic-microsoft-include</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-include" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inconsistent-dllimport</key>
    <name>clang-diagnostic-inconsistent-dllimport</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %q0 redeclared without %1 attribute: previous %1 ignored</li>
<li>warning: %q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-dllimport" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-init-from-predefined</key>
    <name>clang-diagnostic-microsoft-init-from-predefined</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initializing an array from a '%0' predefined identifier is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-init-from-predefined" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-mutable-reference</key>
    <name>clang-diagnostic-microsoft-mutable-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'mutable' on a reference type is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-pure-definition</key>
    <name>clang-diagnostic-microsoft-pure-definition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function definition with pure-specifier is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-pure-definition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-redeclare-static</key>
    <name>clang-diagnostic-microsoft-redeclare-static</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redeclaring non-static %0 as static is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-sealed</key>
    <name>clang-diagnostic-microsoft-sealed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'sealed' keyword is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-sealed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-static-assert</key>
    <name>clang-diagnostic-microsoft-static-assert</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of 'static_assert' without inclusion of &lt;assert.h&gt; is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-static-assert" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-string-literal-from-predefined</key>
    <name>clang-diagnostic-microsoft-string-literal-from-predefined</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expansion of predefined identifier '%0' to a string literal is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-string-literal-from-predefined" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-template</key>
    <name>clang-diagnostic-microsoft-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension</li>
<li>warning: 'static' can only be specified inside the class definition</li>
<li>warning: declaration of %0 shadows template parameter</li>
<li>warning: duplicate explicit instantiation of %0 ignored as a Microsoft extension</li>
<li>warning: non-type template argument containing a dereference operation is a Microsoft extension</li>
<li>warning: template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension</li>
<li>warning: unqualified base initializer of class templates is a Microsoft extension</li>
<li>warning: use of member %0 before its declaration is a Microsoft extension</li>
<li>warning: use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension</li>
<li>warning: use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension</li>
<li>warning: using the undeclared type %0 as a default template argument is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-template-shadow</key>
    <name>clang-diagnostic-microsoft-template-shadow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration of %0 shadows template parameter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-template-shadow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-union-member-reference</key>
    <name>clang-diagnostic-microsoft-union-member-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: union member %0 has reference type %1, which is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-unqualified-friend</key>
    <name>clang-diagnostic-microsoft-unqualified-friend</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-using-decl</key>
    <name>clang-diagnostic-microsoft-using-decl</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-using-decl" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-void-pseudo-dtor</key>
    <name>clang-diagnostic-microsoft-void-pseudo-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: pseudo-destructors on type void are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-misexpect</key>
    <name>clang-diagnostic-misexpect</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Potential performance regression from use of __builtin_expect(): Annotation was correct on %0 of profiled executions.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmisexpect" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-misleading-indentation</key>
    <name>clang-diagnostic-misleading-indentation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmisleading-indentation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-mismatched-parameter-types</key>
    <name>clang-diagnostic-mismatched-parameter-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-parameter-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-mismatched-return-types</key>
    <name>clang-diagnostic-mismatched-return-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting return type in implementation of %0%diff{: $ vs $|}1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-return-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-mismatched-tags</key>
    <name>clang-diagnostic-mismatched-tags</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-tags" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-braces</key>
    <name>clang-diagnostic-missing-braces</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: suggest braces around initialization of subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-braces" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-declarations</key>
    <name>clang-diagnostic-missing-declarations</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' ignored on this declaration</li>
<li>warning: '%0' is not permitted on a declaration of a type</li>
<li>warning: declaration does not declare anything</li>
<li>warning: typedef requires a name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-declarations" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-field-initializers</key>
    <name>clang-diagnostic-missing-field-initializers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: missing field %0 initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-field-initializers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-method-return-type</key>
    <name>clang-diagnostic-missing-method-return-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method has no return type specified; defaults to 'id'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-method-return-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-noescape</key>
    <name>clang-diagnostic-missing-noescape</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: parameter of overriding method should be annotated with __attribute__((noescape))</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-noescape" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-noreturn</key>
    <name>clang-diagnostic-missing-noreturn</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|method}0 %1 could be declared with attribute 'noreturn'</li>
<li>warning: block could be declared with attribute 'noreturn'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-noreturn" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-misspelled-assumption</key>
    <name>clang-diagnostic-misspelled-assumption</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown assumption string '%0' may be misspelled; attribute is potentially ignored, did you mean '%1'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmisspelled-assumption" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-build</key>
    <name>clang-diagnostic-module-build</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: building module '%0' as '%1'</li>
<li>remark: could not acquire lock file for module '%0': %1</li>
<li>remark: finished building module '%0'</li>
<li>remark: timed out waiting to acquire lock file for module '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-build" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-conflict</key>
    <name>clang-diagnostic-module-conflict</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: module '%0' conflicts with already-imported module '%1': %2</li>
<li>warning: module file '%0' was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-conflict" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-file-extension</key>
    <name>clang-diagnostic-module-file-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: duplicate module file extension block name '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-file-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-import</key>
    <name>clang-diagnostic-module-import</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: importing module '%0'%select{| into '%3'}2 from '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-import" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-include-translation</key>
    <name>clang-diagnostic-module-include-translation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-include-translation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-lock</key>
    <name>clang-diagnostic-module-lock</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: locking '%0' to build module '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-lock" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-most</key>
    <name>clang-diagnostic-most</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: '%%n' specifier not supported on this platform</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '&amp;&amp;' of a value and its negation always evaluates to false</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: '||' of a value and its negation always evaluates to true</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: argument %0 of type %1 with mismatched bound</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?</li>
<li>warning: bitwise or with non-zero value always evaluates to true</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: call to undeclared function %0; ISO C99 and later do not support implicit function declarations</li>
<li>warning: call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</li>
<li>warning: calling '%0' with a nonzero argument is unsafe</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: converting the enum constant to a boolean</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean; did you mean '(%0) != 0'?</li>
<li>warning: converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute: %1</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: initializer order does not match the declaration order</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: left operand of comma operator has no effect</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void coroutine does not return a value</li>
<li>warning: non-void coroutine does not return a value in all control paths</li>
<li>warning: non-void function does not return a value</li>
<li>warning: non-void function does not return a value in all control paths</li>
<li>warning: non-void lambda does not return a value</li>
<li>warning: non-void lambda does not return a value in all control paths</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
<li>warning: parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ROUND is not supported</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of bitwise '%0' with boolean operands</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using '%0' format specifier, but argument has boolean value</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when passed as a const reference argument here</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable %0 set but not used</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmost" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-move</key>
    <name>clang-diagnostic-move</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: redundant move in return statement</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmove" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-multichar</key>
    <name>clang-diagnostic-multichar</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multi-character character constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmultichar" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-multi-gpu</key>
    <name>clang-diagnostic-multi-gpu</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple %0 architectures are detected: %1; only the first one is used for '%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmulti-gpu" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nsconsumed-mismatch</key>
    <name>clang-diagnostic-nsconsumed-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding method has mismatched ns_consumed attribute on its parameter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnsconsumed-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nsreturns-mismatch</key>
    <name>clang-diagnostic-nsreturns-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnsreturns-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-NSObject-attribute</key>
    <name>clang-diagnostic-NSObject-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'NSObject' attribute may be put on a typedef only; attribute is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wNSObject-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-newline-eof</key>
    <name>clang-diagnostic-newline-eof</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no newline at end of file</li>
<li>warning: no newline at end of file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnewline-eof" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-noderef</key>
    <name>clang-diagnostic-noderef</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: casting to dereferenceable pointer removes 'noderef' attribute</li>
<li>warning: dereferencing %0; was declared with a 'noderef' type</li>
<li>warning: dereferencing expression marked as 'noderef'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnoderef" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-noexcept-type</key>
    <name>clang-diagnostic-noexcept-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnoexcept-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-gcc</key>
    <name>clang-diagnostic-non-gcc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3</li>
<li>warning: %sub{select_arith_conv_kind}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: %sub{select_arith_conv_kind}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
<li>warning: floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1</li>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: implicit conversion discards imaginary component: %0 to %1</li>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 may lose precision</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
<li>warning: implicit conversion from floating-point type %0 to 'BOOL'</li>
<li>warning: implicit conversion from integral type %0 to 'BOOL'</li>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
<li>warning: implicit conversion turns vector to scalar: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
<li>warning: implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: magnitude of floating-point constant too large for type %0; maximum is %1</li>
<li>warning: magnitude of floating-point constant too small for type %0; minimum is %1</li>
<li>warning: non-type template argument value '%0' truncated to '%1' for template parameter of type %2</li>
<li>warning: non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-gcc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-literal-null-conversion</key>
    <name>clang-diagnostic-non-literal-null-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-literal-null-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-modular-include-in-framework-module</key>
    <name>clang-diagnostic-non-modular-include-in-framework-module</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-modular-include-in-framework-module" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-modular-include-in-module</key>
    <name>clang-diagnostic-non-modular-include-in-module</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
<li>warning: include of non-modular header inside module '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-modular-include-in-module" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonnull</key>
    <name>clang-diagnostic-nonnull</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonnull" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-pod-varargs</key>
    <name>clang-diagnostic-non-pod-varargs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</li>
<li>warning: cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime</li>
<li>warning: second argument to 'va_arg' is of ARC ownership-qualified type %0</li>
<li>warning: second argument to 'va_arg' is of non-POD type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-pod-varargs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nontrivial-memaccess</key>
    <name>clang-diagnostic-nontrivial-memaccess</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnontrivial-memaccess" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-virtual-dtor</key>
    <name>clang-diagnostic-non-virtual-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-arithmetic</key>
    <name>clang-diagnostic-null-arithmetic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0</li>
<li>warning: use of NULL in arithmetic operation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-character</key>
    <name>clang-diagnostic-null-character</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: null character ignored</li>
<li>warning: null character(s) preserved in %select{char|string}0 literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-character" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-conversion</key>
    <name>clang-diagnostic-null-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-dereference</key>
    <name>clang-diagnostic-null-dereference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: binding dereferenced null pointer to reference has undefined behavior</li>
<li>warning: indirection of non-volatile null pointer will be deleted, not trap</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-dereference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-pointer-arithmetic</key>
    <name>clang-diagnostic-null-pointer-arithmetic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-pointer-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-null-pointer-subtraction</key>
    <name>clang-diagnostic-null-pointer-subtraction</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-pointer-subtraction" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability</key>
    <name>clang-diagnostic-nullability</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting nullability specifier on parameter types, %0 conflicts with existing specifier %1</li>
<li>warning: conflicting nullability specifier on return types, %0 conflicts with existing specifier %1</li>
<li>warning: duplicate nullability specifier %0</li>
<li>warning: nullability specifier %0 conflicts with existing specifier %1</li>
<li>warning: synthesized setter %0 for null_resettable property %1 does not handle nil</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability-completeness</key>
    <name>clang-diagnostic-nullability-completeness</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
<li>warning: array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-completeness" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability-completeness-on-arrays</key>
    <name>clang-diagnostic-nullability-completeness-on-arrays</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-completeness-on-arrays" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability-declspec</key>
    <name>clang-diagnostic-nullability-declspec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-declspec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability-inferred-on-nested-type</key>
    <name>clang-diagnostic-nullability-inferred-on-nested-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-inferred-on-nested-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullable-to-nonnull-conversion</key>
    <name>clang-diagnostic-nullable-to-nonnull-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from nullable pointer %0 to non-nullable pointer type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullable-to-nonnull-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-odr</key>
    <name>clang-diagnostic-odr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another</li>
<li>warning: class %0 has incompatible superclasses</li>
<li>warning: external function %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: external variable %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: external variable %0 defined in multiple translation units</li>
<li>warning: field %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)</li>
<li>warning: parameter kind mismatch; parameter is %select{not a|a}0 parameter pack</li>
<li>warning: property %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit</li>
<li>warning: property %0 is synthesized to different ivars in different translation units (%1 vs. %2)</li>
<li>warning: template parameter has different kinds in different translation units</li>
<li>warning: template parameter lists have a different number of parameters (%0 vs %1)</li>
<li>warning: type %0 has incompatible definitions in different translation units</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wodr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-bool-constant-conversion</key>
    <name>clang-diagnostic-objc-bool-constant-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-bool-constant-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-boxing</key>
    <name>clang-diagnostic-objc-boxing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: string is ill-formed as UTF-8 and will become a null %0 when boxed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-boxing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bridge-cast</key>
    <name>clang-diagnostic-bridge-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 bridges to %1, not %2</li>
<li>warning: %0 cannot bridge to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbridge-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cstring-format-directive</key>
    <name>clang-diagnostic-cstring-format-directive</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcstring-format-directive" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-cocoa-api</key>
    <name>clang-diagnostic-objc-cocoa-api</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-cocoa-api" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-designated-initializers</key>
    <name>clang-diagnostic-objc-designated-initializers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-designated-initializers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-flexible-array</key>
    <name>clang-diagnostic-objc-flexible-array</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-flexible-array" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-iboutlet</key>
    <name>clang-diagnostic-invalid-iboutlet</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)</li>
<li>warning: IBOutletCollection properties should be copy/strong and not assign</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-iboutlet" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-literal-compare</key>
    <name>clang-diagnostic-objc-literal-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior</li>
<li>warning: direct comparison of a string literal has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-literal-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-literal-conversion</key>
    <name>clang-diagnostic-objc-literal-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-literal-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-missing-super-calls</key>
    <name>clang-diagnostic-objc-missing-super-calls</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method possibly missing a [super %0] call</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-missing-super-calls" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-multiple-method-names</key>
    <name>clang-diagnostic-objc-multiple-method-names</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple methods named %0 found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-multiple-method-names" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-synthesis</key>
    <name>clang-diagnostic-objc-property-synthesis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property</li>
<li>warning: auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property</li>
<li>warning: auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-nonunified-exceptions</key>
    <name>clang-diagnostic-objc-nonunified-exceptions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cannot catch an exception thrown with @throw in C++ in the non-unified exception model</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-nonunified-exceptions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-objc-pointer-introspection</key>
    <name>clang-diagnostic-deprecated-objc-pointer-introspection</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-objc-pointer-introspection-performSelector</key>
    <name>clang-diagnostic-deprecated-objc-pointer-introspection-performSelector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection-performSelector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-potentially-direct-selector</key>
    <name>clang-diagnostic-potentially-direct-selector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: @selector expression formed with potentially direct selector %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpotentially-direct-selector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-assign-on-object-type</key>
    <name>clang-diagnostic-objc-property-assign-on-object-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-assign-on-object-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-implementation</key>
    <name>clang-diagnostic-objc-property-implementation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</li>
<li>warning: class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation</li>
<li>warning: property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</li>
<li>warning: property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-implementation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-no-attribute</key>
    <name>clang-diagnostic-objc-property-no-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: default property attribute 'assign' not appropriate for object</li>
<li>warning: no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-no-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-protocol-method-implementation</key>
    <name>clang-diagnostic-objc-protocol-method-implementation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: category is implementing a method which will also be implemented by its primary class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-method-implementation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-protocol-qualifiers</key>
    <name>clang-diagnostic-objc-protocol-qualifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: parameterized class %0 already conforms to the protocols listed; did you forget a '*'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-readonly-with-setter-property</key>
    <name>clang-diagnostic-objc-readonly-with-setter-property</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: setter cannot be specified for a readonly property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-readonly-with-setter-property" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-receiver-expr</key>
    <name>clang-diagnostic-receiver-expr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreceiver-expr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-redundant-api-use</key>
    <name>clang-diagnostic-objc-redundant-api-use</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-redundant-api-use" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-redundant-literal-use</key>
    <name>clang-diagnostic-objc-redundant-literal-use</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-redundant-literal-use" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-noncopy-retain-block-property</key>
    <name>clang-diagnostic-objc-noncopy-retain-block-property</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: retain'ed block property does not copy the block - use copy attribute instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-noncopy-retain-block-property" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-root-class</key>
    <name>clang-diagnostic-objc-root-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: class %0 defined without specifying a base class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-root-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-signed-char-bool</key>
    <name>clang-diagnostic-objc-signed-char-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: implicit conversion from floating-point type %0 to 'BOOL'</li>
<li>warning: implicit conversion from integral type %0 to 'BOOL'</li>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-signed-char-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-signed-char-bool-implicit-float-conversion</key>
    <name>clang-diagnostic-objc-signed-char-bool-implicit-float-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from floating-point type %0 to 'BOOL'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-signed-char-bool-implicit-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-signed-char-bool-implicit-int-conversion</key>
    <name>clang-diagnostic-objc-signed-char-bool-implicit-int-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from integral type %0 to 'BOOL'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-signed-char-bool-implicit-int-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-strict-potentially-direct-selector</key>
    <name>clang-diagnostic-strict-potentially-direct-selector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: @selector expression formed with potentially direct selector %0</li>
<li>warning: @selector expression formed with potentially direct selector %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrict-potentially-direct-selector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-string-compare</key>
    <name>clang-diagnostic-objc-string-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: direct comparison of a string literal has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-string-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-string-concatenation</key>
    <name>clang-diagnostic-objc-string-concatenation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: concatenated NSString literal for an NSArray expression - possibly missing a comma</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-string-concatenation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-old-style-cast</key>
    <name>clang-diagnostic-old-style-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of old-style cast</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wold-style-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openacc</key>
    <name>clang-diagnostic-openacc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: OpenACC directives not yet implemented, pragma ignored</li>
<li>warning: unexpected '#pragma acc ...' in program</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenacc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pedantic-core-features</key>
    <name>clang-diagnostic-pedantic-core-features</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a core feature in %select{OpenCL C|C++ for OpenCL}1 version %2 but not supported on this target</li>
<li>warning: OpenCL extension %0 is core feature or supported optional core feature - ignoring</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpedantic-core-features" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-opencl-unsupported-rgba</key>
    <name>clang-diagnostic-opencl-unsupported-rgba</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: vector component name '%0' is a feature from OpenCL version 3.0 onwards</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopencl-unsupported-rgba" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp</key>
    <name>clang-diagnostic-openmp</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 clause should not be followed by arguments; tokens will be ignored</li>
<li>warning: '#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used</li>
<li>warning: '#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used</li>
<li>warning: '%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored</li>
<li>warning: '%0' is not a valid context selector for the context set '%1'; selector ignored</li>
<li>warning: '%0' is not a valid context set in a `declare variant`; set ignored</li>
<li>warning: 'ompx_attribute' clause only allows 'amdgpu_flat_work_group_size', 'amdgpu_waves_per_eu', and 'launch_bounds'; %0 is ignored</li>
<li>warning: OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed</li>
<li>warning: OpenMP offloading target '%0' is similar to target '%1' already specified; will be ignored</li>
<li>warning: OpenMP only allows an ordered construct with the simd clause nested in a simd construct</li>
<li>warning: Type %0 is not trivially copyable and not guaranteed to be mapped correctly</li>
<li>warning: Type %0 is not trivially copyable and not guaranteed to be mapped correctly</li>
<li>warning: aligned clause will be ignored because the requested alignment is not a power of 2</li>
<li>warning: allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2</li>
<li>warning: allocator with the 'thread' trait access has unspecified behavior on '%0' directive</li>
<li>warning: declaration is not declared in any declare target region</li>
<li>warning: declaration marked as declare target after first use, it may lead to incorrect results</li>
<li>warning: expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'</li>
<li>warning: expected '%0' after the %1; '%0' assumed</li>
<li>warning: expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped</li>
<li>warning: initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')</li>
<li>warning: interop type '%0' cannot be specified more than once</li>
<li>warning: isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further</li>
<li>warning: more than one 'device_type' clause is specified</li>
<li>warning: reserved locator 'omp_all_memory' cannot be specified more than once</li>
<li>warning: score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored</li>
<li>warning: specifying OpenMP directives with [[]] is an OpenMP 5.1 extension</li>
<li>warning: target '%0' does not support exception handling; 'catch' block is ignored</li>
<li>warning: target '%0' does not support exception handling; 'throw' is assumed to be never reached</li>
<li>warning: the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored</li>
<li>warning: the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored</li>
<li>warning: the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored</li>
<li>warning: the context selector '%0' in the context set '%1' cannot have a score ('%2'); score ignored</li>
<li>warning: the context selector '%0' is not valid for the context set '%1'; selector ignored</li>
<li>warning: unexpected '#pragma omp ...' in program</li>
<li>warning: valid %0 clauses start with %1; %select{token|tokens}2 will be ignored</li>
<li>warning: variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'</li>
<li>warning: zero linear step (%0 %select{|and other variables in clause }1should probably be const)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-51-extensions</key>
    <name>clang-diagnostic-openmp-51-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: specifying OpenMP directives with [[]] is an OpenMP 5.1 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-51-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-clauses</key>
    <name>clang-diagnostic-openmp-clauses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 clause should not be followed by arguments; tokens will be ignored</li>
<li>warning: '%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored</li>
<li>warning: '%0' is not a valid context selector for the context set '%1'; selector ignored</li>
<li>warning: '%0' is not a valid context set in a `declare variant`; set ignored</li>
<li>warning: aligned clause will be ignored because the requested alignment is not a power of 2</li>
<li>warning: allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2</li>
<li>warning: allocator with the 'thread' trait access has unspecified behavior on '%0' directive</li>
<li>warning: expected '%0' after the %1; '%0' assumed</li>
<li>warning: expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped</li>
<li>warning: interop type '%0' cannot be specified more than once</li>
<li>warning: more than one 'device_type' clause is specified</li>
<li>warning: reserved locator 'omp_all_memory' cannot be specified more than once</li>
<li>warning: the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored</li>
<li>warning: the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored</li>
<li>warning: the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored</li>
<li>warning: the context selector '%0' in the context set '%1' cannot have a score ('%2'); score ignored</li>
<li>warning: the context selector '%0' is not valid for the context set '%1'; selector ignored</li>
<li>warning: valid %0 clauses start with %1; %select{token|tokens}2 will be ignored</li>
<li>warning: zero linear step (%0 %select{|and other variables in clause }1should probably be const)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-clauses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-extensions</key>
    <name>clang-diagnostic-openmp-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'ompx_attribute' clause only allows 'amdgpu_flat_work_group_size', 'amdgpu_waves_per_eu', and 'launch_bounds'; %0 is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-loop-form</key>
    <name>clang-diagnostic-openmp-loop-form</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed</li>
<li>warning: initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-loop-form" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-mapping</key>
    <name>clang-diagnostic-openmp-mapping</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Type %0 is not trivially copyable and not guaranteed to be mapped correctly</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-mapping" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-openmp-51-compat</key>
    <name>clang-diagnostic-pre-openmp-51-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-openmp-51-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-target</key>
    <name>clang-diagnostic-openmp-target</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: OpenMP offloading target '%0' is similar to target '%1' already specified; will be ignored</li>
<li>warning: Type %0 is not trivially copyable and not guaranteed to be mapped correctly</li>
<li>warning: declaration is not declared in any declare target region</li>
<li>warning: declaration marked as declare target after first use, it may lead to incorrect results</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-target" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-openmp-target-exception</key>
    <name>clang-diagnostic-openmp-target-exception</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: target '%0' does not support exception handling; 'catch' block is ignored</li>
<li>warning: target '%0' does not support exception handling; 'throw' is assumed to be never reached</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-target-exception" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-new-returns-null</key>
    <name>clang-diagnostic-new-returns-null</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnew-returns-null" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-option-ignored</key>
    <name>clang-diagnostic-option-ignored</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 requires HVX, use -mhvx/-mhvx= to enable it</li>
<li>warning: %0 requires debug info. Use %1 or debug options that enable debugger's stepping function; option ignored</li>
<li>warning: '%0' does not support '-%1'; flag ignored</li>
<li>warning: '%0' does not support '-moutline'; flag ignored</li>
<li>warning: -fjmc works only for ELF; option ignored</li>
<li>warning: /arm64EC has been overridden by specified target: %0; option ignored</li>
<li>warning: The warning option '-%0' is not supported</li>
<li>warning: ignoring '%0' as it conflicts with that implied by '%1' (%2)</li>
<li>warning: ignoring '%0' option as it cannot be used with %select{implicit usage of|}1 -mabicalls and the N64 ABI</li>
<li>warning: ignoring '%0' option as it is not currently supported for processor '%1'</li>
<li>warning: ignoring '%0' option as it is not currently supported for target '%1'</li>
<li>warning: ignoring '%0' option for offload arch '%1' as it is not currently supported there. Use it with an offload arch containing '%2' instead</li>
<li>warning: ignoring '-mlong-calls' option as it is not currently supported with %select{|the implicit usage of }0-mabicalls</li>
<li>warning: ignoring '-msmall-data-limit=' with -mcmodel=large for -fpic or RV64</li>
<li>warning: option '%0' was ignored by the %1 toolchain, using '-fPIC'</li>
<li>warning: option '-ffine-grained-bitfield-accesses' cannot be enabled together with a sanitizer; flag ignored</li>
<li>warning: the argument '%0' is not supported for option '%1'. Mapping to '%1%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woption-ignored" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ordered-compare-function-pointers</key>
    <name>clang-diagnostic-ordered-compare-function-pointers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ordered comparison of function pointers (%0 and %1)</li>
<li>warning: ordered comparison of function pointers (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wordered-compare-function-pointers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-out-of-line-declaration</key>
    <name>clang-diagnostic-out-of-line-declaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: out-of-line declaration of a member must be a definition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wout-of-line-declaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-over-aligned</key>
    <name>clang-diagnostic-over-aligned</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wover-aligned" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overlength-strings</key>
    <name>clang-diagnostic-overlength-strings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverlength-strings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overloaded-shift-op-parentheses</key>
    <name>clang-diagnostic-overloaded-shift-op-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overloaded-virtual</key>
    <name>clang-diagnostic-overloaded-virtual</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverloaded-virtual" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overriding-method-mismatch</key>
    <name>clang-diagnostic-overriding-method-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: conflicting distributed object modifiers on parameter type in declaration of %0</li>
<li>warning: conflicting distributed object modifiers on return type in declaration of %0</li>
<li>warning: conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2</li>
<li>warning: conflicting parameter types in declaration of %0: %1 vs %2</li>
<li>warning: conflicting return type in declaration of %0%diff{: $ vs $|}1,2</li>
<li>warning: conflicting return type in declaration of %0: %1 vs %2</li>
<li>warning: conflicting variadic declaration of method and its implementation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverriding-method-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-packed</key>
    <name>clang-diagnostic-packed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: not packing field %0 as it is non-POD for the purposes of layout</li>
<li>warning: packed attribute is unnecessary for %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpacked" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-packed-non-pod</key>
    <name>clang-diagnostic-packed-non-pod</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: not packing field %0 as it is non-POD for the purposes of layout</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpacked-non-pod" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-padded</key>
    <name>clang-diagnostic-padded</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4</li>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4</li>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field</li>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous field</li>
<li>warning: padding size of %0 with %1 %select{byte|bit}2%s1 to alignment boundary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpadded" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-padded-bitfield</key>
    <name>clang-diagnostic-padded-bitfield</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4</li>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpadded-bitfield" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-parentheses</key>
    <name>clang-diagnostic-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wparentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-parentheses-equality</key>
    <name>clang-diagnostic-parentheses-equality</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: equality comparison with extraneous parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wparentheses-equality" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pedantic-macros</key>
    <name>clang-diagnostic-pedantic-macros</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 macro redefined</li>
<li>warning: macro %0 has been marked as deprecated%select{|: %2}1</li>
<li>warning: macro %0 has been marked as final and should not be %select{undefined|redefined}1</li>
<li>warning: macro %0 has been marked as unsafe for use in headers%select{|: %2}1</li>
<li>warning: redefining builtin macro</li>
<li>warning: undefining builtin macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpedantic-macros" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pessimizing-move</key>
    <name>clang-diagnostic-pessimizing-move</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpessimizing-move" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-arith</key>
    <name>clang-diagnostic-pointer-arith</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension</li>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension</li>
<li>warning: invalid application of '%0' to a function type</li>
<li>warning: invalid application of '%0' to a void type</li>
<li>warning: subscript of a pointer to void is a GNU extension</li>
<li>warning: subtraction of pointers to type %0 of zero size has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-arith" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-bool-conversion</key>
    <name>clang-diagnostic-pointer-bool-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-bool-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-to-enum-cast</key>
    <name>clang-diagnostic-pointer-to-enum-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-to-enum-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-to-int-cast</key>
    <name>clang-diagnostic-pointer-to-int-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-to-int-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-potentially-evaluated-expression</key>
    <name>clang-diagnostic-potentially-evaluated-expression</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpotentially-evaluated-expression" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-#pragma-messages</key>
    <name>clang-diagnostic-#pragma-messages</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#w-pragma-messages" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-#warnings</key>
    <name>clang-diagnostic-#warnings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#w-warnings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragma-clang-attribute</key>
    <name>clang-diagnostic-pragma-clang-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused attribute %0 in '#pragma clang attribute push' region</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-clang-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragma-pack</key>
    <name>clang-diagnostic-pragma-pack</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
<li>warning: the current #pragma pack alignment value is modified in the included file</li>
<li>warning: unterminated '#pragma pack (push, ...)' at end of file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-pack" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragma-pack-suspicious-include</key>
    <name>clang-diagnostic-pragma-pack-suspicious-include</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragmas</key>
    <name>clang-diagnostic-pragmas</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma %0(pop, ...) failed: %1</li>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma options align=reset failed: %0</li>
<li>warning: #pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
<li>warning: %select{value|type}0-dependent expression passed as an argument to debug command</li>
<li>warning: '#pragma %0' is not supported on this target - ignored</li>
<li>warning: '#pragma comment %0' ignored</li>
<li>warning: '#pragma init_seg' is only supported when targeting a Microsoft environment</li>
<li>warning: OpenCL extension %0 unknown or does not require pragma - ignoring</li>
<li>warning: Setting the floating point evaluation method to `source` on a target without SSE is not supported.</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</li>
<li>warning: expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring</li>
<li>warning: expected '#pragma unused' argument to be a variable name</li>
<li>warning: expected ')' or ',' in '#pragma %0'</li>
<li>warning: expected ',' in '#pragma %0'</li>
<li>warning: expected '=' following '#pragma %select{align|options align}0' - ignored</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected 'align' following '#pragma options' - ignored</li>
<li>warning: expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a stack label or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected action or ')' in '#pragma %0' - ignored</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: expected identifier in '#pragma %0' - ignored</li>
<li>warning: expected integer between %0 and %1 inclusive in '#pragma %2' - ignored</li>
<li>warning: expected integer or identifier in '#pragma pack' - ignored</li>
<li>warning: expected non-wide string literal in '#pragma %0'</li>
<li>warning: expected push, pop or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected string literal in '#pragma %0' - ignoring</li>
<li>warning: expected string literal in 'clause %0' - ignoring</li>
<li>warning: extra tokens at end of '#pragma %0' - ignored</li>
<li>warning: incorrect use of #pragma clang force_cuda_host_device begin|end</li>
<li>warning: incorrect use of '#pragma fenv_access (on|off)' - ignored</li>
<li>warning: incorrect use of '#pragma ms_struct on|off' - ignored</li>
<li>warning: invalid alignment option in '#pragma %select{align|options align}0' - ignored</li>
<li>warning: invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored</li>
<li>warning: known but unsupported action '%1' for '#pragma %0' - ignored</li>
<li>warning: missing '(' after '#pragma %0' - ignoring</li>
<li>warning: missing ')' after '#pragma %0' - ignoring</li>
<li>warning: missing ':' after %0 - ignoring</li>
<li>warning: missing ':' or ')' after %0 - ignoring</li>
<li>warning: missing argument to '#pragma %0'%select{|; expected %2}1</li>
<li>warning: missing argument to debug command '%0'</li>
<li>warning: missing debug command</li>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
<li>warning: only variables can be arguments to '#pragma unused'</li>
<li>warning: pragma STDC FENV_ROUND is not supported</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: pragma pop_macro could not pop '%0', no matching push_macro</li>
<li>warning: the current #pragma pack alignment value is modified in the included file</li>
<li>warning: undeclared variable %0 used as an argument for '#pragma unused'</li>
<li>warning: unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2</li>
<li>warning: unexpected argument to debug command</li>
<li>warning: unexpected debug command '%0'</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown action '%1' for '#pragma %0' - ignored</li>
<li>warning: unknown action for '#pragma %0' - ignored</li>
<li>warning: unknown module '%0'</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unsupported OpenCL extension %0 - ignoring</li>
<li>warning: unterminated '#pragma pack (push, ...)' at end of file</li>
<li>warning: unused attribute %0 in '#pragma clang attribute push' region</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragmas" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-private-extern</key>
    <name>clang-diagnostic-private-extern</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-extern" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-private-module</key>
    <name>clang-diagnostic-private-module</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expected canonical name for private module '%0'</li>
<li>warning: module '%0' already re-exported as '%1'</li>
<li>warning: no submodule named %0 in module '%1'; using top level '%2'</li>
<li>warning: private submodule '%0' in private module map, expected top-level module</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-module" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-profile-instr-missing</key>
    <name>clang-diagnostic-profile-instr-missing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: profile data may be incomplete: of %0 function%s0, %1 %plural{1:has|:have}1 no data</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-missing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-profile-instr-out-of-date</key>
    <name>clang-diagnostic-profile-instr-out-of-date</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: profile data may be out of date: of %0 function%s0, %1 %plural{1:has|:have}1 mismatched data that will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-out-of-date" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-profile-instr-unprofiled</key>
    <name>clang-diagnostic-profile-instr-unprofiled</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no profile data available for file "%0"</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-unprofiled" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-property-access-dot-syntax</key>
    <name>clang-diagnostic-property-access-dot-syntax</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property %0 not found on object of type %1; did you mean to access property %2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wproperty-access-dot-syntax" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-property-attribute-mismatch</key>
    <name>clang-diagnostic-property-attribute-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%1' attribute on property %0 does not match the property inherited from %2</li>
<li>warning: attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1</li>
<li>warning: getter name mismatch between property redeclaration (%1) and its original declaration (%0)</li>
<li>warning: property attribute in class extension does not match the primary class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wproperty-attribute-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-protocol</key>
    <name>clang-diagnostic-protocol</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method %0 in protocol %1 not implemented</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprotocol" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-call-to-pure-virtual-from-ctor-dtor</key>
    <name>clang-diagnostic-call-to-pure-virtual-from-ctor-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-rtti</key>
    <name>clang-diagnostic-rtti</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dynamic_cast will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0</li>
<li>warning: typeid will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrtti" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-range-loop-analysis</key>
    <name>clang-diagnostic-range-loop-analysis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 binds to a temporary value produced by a range of type %1</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrange-loop-analysis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-range-loop-bind-reference</key>
    <name>clang-diagnostic-range-loop-bind-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 binds to a temporary value produced by a range of type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrange-loop-bind-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-range-loop-construct</key>
    <name>clang-diagnostic-range-loop-construct</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrange-loop-construct" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-read-only-types</key>
    <name>clang-diagnostic-read-only-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: object of type %0 cannot be placed in read-only memory</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wread-only-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-redeclared-class-member</key>
    <name>clang-diagnostic-redeclared-class-member</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: class member cannot be redeclared</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredeclared-class-member" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-redundant-move</key>
    <name>clang-diagnostic-redundant-move</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redundant move in return statement</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredundant-move" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-register</key>
    <name>clang-diagnostic-register</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: ISO C++17 does not allow 'register' storage class specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wregister" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reinterpret-base-class</key>
    <name>clang-diagnostic-reinterpret-base-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreinterpret-base-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-remark-backend-plugin</key>
    <name>clang-diagnostic-remark-backend-plugin</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rremark-backend-plugin" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reorder</key>
    <name>clang-diagnostic-reorder</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</li>
<li>warning: initializer order does not match the declaration order</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreorder" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reorder-ctor</key>
    <name>clang-diagnostic-reorder-ctor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: initializer order does not match the declaration order</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreorder-ctor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reorder-init-list</key>
    <name>clang-diagnostic-reorder-init-list</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreorder-init-list" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reserved-macro-identifier</key>
    <name>clang-diagnostic-reserved-macro-identifier</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro name is a reserved identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-macro-identifier" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reserved-id-macro</key>
    <name>clang-diagnostic-reserved-id-macro</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro name is a reserved identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-id-macro" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reserved-identifier</key>
    <name>clang-diagnostic-reserved-identifier</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a reserved name for a module</li>
<li>warning: identifier %0 is reserved because %select{&lt;ERROR&gt;|it starts with '_' at global scope|it starts with '_' and has C language linkage|it starts with '__'|it starts with '_' followed by a capital letter|it contains '__'}1</li>
<li>warning: macro name is a reserved identifier</li>
<li>warning: user-defined literal suffixes %select{&lt;ERROR&gt;|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-identifier" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reserved-module-identifier</key>
    <name>clang-diagnostic-reserved-module-identifier</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a reserved name for a module</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-module-identifier" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-reserved-user-defined-literal</key>
    <name>clang-diagnostic-reserved-user-defined-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: invalid suffix on literal; C++11 requires a space between literal and identifier</li>
<li>warning: invalid suffix on literal; C++11 requires a space between literal and identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-user-defined-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-restrict-expansion</key>
    <name>clang-diagnostic-restrict-expansion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro %0 has been marked as unsafe for use in headers%select{|: %2}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrestrict-expansion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-return-stack-address</key>
    <name>clang-diagnostic-return-stack-address</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned</li>
<li>warning: returning %select{address of|reference to}0 local temporary object</li>
<li>warning: returning address of label, which is local</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-stack-address" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-return-std-move</key>
    <name>clang-diagnostic-return-std-move</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-std-move" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-return-type</key>
    <name>clang-diagnostic-return-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void coroutine does not return a value</li>
<li>warning: non-void coroutine does not return a value in all control paths</li>
<li>warning: non-void function does not return a value</li>
<li>warning: non-void function does not return a value in all control paths</li>
<li>warning: non-void lambda does not return a value</li>
<li>warning: non-void lambda does not return a value in all control paths</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-return-type-c-linkage</key>
    <name>clang-diagnostic-return-type-c-linkage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-type-c-linkage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-round-trip-cc1-args</key>
    <name>clang-diagnostic-round-trip-cc1-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: generated arguments #%0 in round-trip: %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rround-trip-cc1-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sanitize-address</key>
    <name>clang-diagnostic-sanitize-address</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: -fsanitize-address-field-padding applied to %0</li>
<li>remark: -fsanitize-address-field-padding ignored for %0 because it %select{is not C++|is packed|is a union|is trivially copyable|has trivial destructor|is standard layout|is in a ignorelisted file|is ignorelisted}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rsanitize-address" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-section</key>
    <name>clang-diagnostic-section</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{codeseg|section}0 does not match previous declaration</li>
<li>warning: duplicate code segment specifiers</li>
<li>warning: section attribute is specified on redeclared variable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsection" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-of-sel-type</key>
    <name>clang-diagnostic-cast-of-sel-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-of-sel-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-selector</key>
    <name>clang-diagnostic-selector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no method with selector %0 is implemented in this translation unit</li>
<li>warning: several methods with selector %0 of mismatched types are found for the @selector expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wselector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-selector-type-mismatch</key>
    <name>clang-diagnostic-selector-type-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: several methods with selector %0 of mismatched types are found for the @selector expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wselector-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-self-assign</key>
    <name>clang-diagnostic-self-assign</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-self-assign-field</key>
    <name>clang-diagnostic-self-assign-field</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign-field" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-self-assign-overloaded</key>
    <name>clang-diagnostic-self-assign-overloaded</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign-overloaded" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-self-move</key>
    <name>clang-diagnostic-self-move</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-move" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-semicolon-before-method-body</key>
    <name>clang-diagnostic-semicolon-before-method-body</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: semicolon before method body is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsemicolon-before-method-body" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sentinel</key>
    <name>clang-diagnostic-sentinel</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: missing sentinel in %select{function call|method dispatch|block call}0</li>
<li>warning: not enough variable arguments in %0 declaration to fit a sentinel</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsentinel" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-serialized-diagnostics</key>
    <name>clang-diagnostic-serialized-diagnostics</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Received warning after diagnostic serialization teardown was underway: %0</li>
<li>warning: unable to merge a subprocess's serialized diagnostics</li>
<li>warning: unable to open file %0 for serializing diagnostics (%1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wserialized-diagnostics" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow</key>
    <name>clang-diagnostic-shadow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</li>
<li>warning: local declaration of %0 hides instance variable</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-all</key>
    <name>clang-diagnostic-shadow-all</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2</li>
<li>warning: constructor parameter %0 shadows the field %1 of %2</li>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</li>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</li>
<li>warning: local declaration of %0 hides instance variable</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-all" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-field</key>
    <name>clang-diagnostic-shadow-field</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-field-in-constructor</key>
    <name>clang-diagnostic-shadow-field-in-constructor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: constructor parameter %0 shadows the field %1 of %2</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field-in-constructor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-field-in-constructor-modified</key>
    <name>clang-diagnostic-shadow-field-in-constructor-modified</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-ivar</key>
    <name>clang-diagnostic-shadow-ivar</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: local declaration of %0 hides instance variable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-ivar" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shadow-uncaptured-local</key>
    <name>clang-diagnostic-shadow-uncaptured-local</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-uncaptured-local" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-op-parentheses</key>
    <name>clang-diagnostic-shift-op-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shorten-64-to-32</key>
    <name>clang-diagnostic-shorten-64-to-32</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshorten-64-to-32" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sign-compare</key>
    <name>clang-diagnostic-sign-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison of integers of different signs: %0 and %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsign-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sign-conversion</key>
    <name>clang-diagnostic-sign-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsign-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-signed-enum-bitfield</key>
    <name>clang-diagnostic-signed-enum-bitfield</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsigned-enum-bitfield" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-single-bit-bitfield-constant-conversion</key>
    <name>clang-diagnostic-single-bit-bitfield-constant-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsingle-bit-bitfield-constant-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-array-argument</key>
    <name>clang-diagnostic-sizeof-array-argument</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-array-argument" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-array-decay</key>
    <name>clang-diagnostic-sizeof-array-decay</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-array-decay" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-pointer-memaccess</key>
    <name>clang-diagnostic-sizeof-pointer-memaccess</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' call operates on objects of type %1 while the size is based on a different type %2</li>
<li>warning: argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-source-uses-openacc</key>
    <name>clang-diagnostic-source-uses-openacc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: OpenACC directives not yet implemented, pragma ignored</li>
<li>warning: unexpected '#pragma acc ...' in program</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsource-uses-openacc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-source-uses-openmp</key>
    <name>clang-diagnostic-source-uses-openmp</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used</li>
<li>warning: '#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used</li>
<li>warning: OpenMP only allows an ordered construct with the simd clause nested in a simd construct</li>
<li>warning: expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'</li>
<li>warning: isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further</li>
<li>warning: score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored</li>
<li>warning: unexpected '#pragma omp ...' in program</li>
<li>warning: variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsource-uses-openmp" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-spir-compat</key>
    <name>clang-diagnostic-spir-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: sampler initializer has invalid %0 bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wspir-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-static-float-init</key>
    <name>clang-diagnostic-static-float-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
<li>warning: in-class initializer for static data member of type %0 requires 'constexpr' specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-float-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-static-in-inline</key>
    <name>clang-diagnostic-static-in-inline</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: static %select{function|variable}0 %1 is used in an inline function with external linkage</li>
<li>warning: static %select{function|variable}0 %1 is used in an inline function with external linkage</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-in-inline" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-static-local-in-inline</key>
    <name>clang-diagnostic-static-local-in-inline</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-constant static local variable in inline function may be different in different files</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-local-in-inline" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-strict-prototypes</key>
    <name>clang-diagnostic-strict-prototypes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: a %select{function|block}0 declaration without a prototype is deprecated %select{in all versions of C|}0</li>
<li>warning: a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C23|and is treated as a zero-parameter prototype in C23, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1</li>
<li>warning: passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrict-prototypes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-strict-selector-match</key>
    <name>clang-diagnostic-strict-selector-match</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple methods named %0 found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrict-selector-match" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-string-compare</key>
    <name>clang-diagnostic-string-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-string-concatenation</key>
    <name>clang-diagnostic-string-concatenation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-concatenation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-string-conversion</key>
    <name>clang-diagnostic-string-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-string-plus-char</key>
    <name>clang-diagnostic-string-plus-char</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to a string pointer does not append to the string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-plus-char" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-string-plus-int</key>
    <name>clang-diagnostic-string-plus-int</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to a string does not append to the string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-plus-int" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-strncat-size</key>
    <name>clang-diagnostic-strncat-size</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: size argument in 'strncat' call appears to be size of the source</li>
<li>warning: the value of the size argument in 'strncat' is too large, might lead to a buffer overflow</li>
<li>warning: the value of the size argument to 'strncat' is wrong</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrncat-size" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-super-class-method-mismatch</key>
    <name>clang-diagnostic-super-class-method-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuper-class-method-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-suspicious-bzero</key>
    <name>clang-diagnostic-suspicious-bzero</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'size' argument to bzero is '0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuspicious-bzero" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-suspicious-memaccess</key>
    <name>clang-diagnostic-suspicious-memaccess</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?</li>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4</li>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3</li>
<li>warning: '%0' call operates on objects of type %1 while the size is based on a different type %2</li>
<li>warning: 'size' argument to bzero is '0'</li>
<li>warning: argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuspicious-memaccess" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-swift-name-attribute</key>
    <name>clang-diagnostic-swift-name-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute argument must be a string literal specifying a Swift function name</li>
<li>warning: %0 attribute cannot be applied to a %select{function|method}1 with no parameters</li>
<li>warning: %0 attribute cannot be applied to this declaration</li>
<li>warning: %0 attribute cannot specify more than one 'self:' parameter</li>
<li>warning: %0 attribute for 'subscript' getter cannot have a 'newValue:' parameter</li>
<li>warning: %0 attribute for 'subscript' must %select{be a getter or setter|have at least one parameter|have a 'self:' parameter}1</li>
<li>warning: %0 attribute for 'subscript' setter cannot have multiple 'newValue:' parameters</li>
<li>warning: %0 attribute for 'subscript' setter must have a 'newValue:' parameter</li>
<li>warning: %0 attribute for getter must not have any parameters besides 'self:'</li>
<li>warning: %0 attribute for setter must have one parameter for new value</li>
<li>warning: %0 attribute has invalid identifier for the %select{base|context|parameter}1 name</li>
<li>warning: %0 attribute is missing parameter label clause</li>
<li>warning: too %select{few|many}0 parameters in the signature specified by the %1 attribute (expected %2; got %3)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswift-name-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-switch</key>
    <name>clang-diagnostic-switch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-switch-bool</key>
    <name>clang-diagnostic-switch-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: switch condition has boolean value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-switch-default</key>
    <name>clang-diagnostic-switch-default</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'switch' missing 'default' label</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch-default" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-switch-enum</key>
    <name>clang-diagnostic-switch-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sync-alignment</key>
    <name>clang-diagnostic-sync-alignment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: __sync builtin operation MUST have natural alignment (consider using __atomic).</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsync-alignment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-target-clones-mixed-specifiers</key>
    <name>clang-diagnostic-target-clones-mixed-specifiers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtarget-clones-mixed-specifiers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-bitwise-compare</key>
    <name>clang-diagnostic-tautological-bitwise-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: bitwise or with non-zero value always evaluates to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-bitwise-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-compare</key>
    <name>clang-diagnostic-tautological-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0</li>
<li>warning: %select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1</li>
<li>warning: '&amp;&amp;' of a value and its negation always evaluates to false</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: '||' of a value and its negation always evaluates to true</li>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: bitwise or with non-zero value always evaluates to true</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</li>
<li>warning: converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</li>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-constant-compare</key>
    <name>clang-diagnostic-tautological-constant-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</li>
<li>warning: converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-constant-in-range-compare</key>
    <name>clang-diagnostic-tautological-constant-in-range-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned</li>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%4|%sub{subst_int_range}1,2}0 %3 %select{%sub{subst_int_range}1,2|%4}0 is always %5</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-in-range-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-negation-compare</key>
    <name>clang-diagnostic-tautological-negation-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '&amp;&amp;' of a value and its negation always evaluates to false</li>
<li>warning: '||' of a value and its negation always evaluates to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-negation-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-objc-bool-compare</key>
    <name>clang-diagnostic-tautological-objc-bool-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-objc-bool-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-constant-out-of-range-compare</key>
    <name>clang-diagnostic-tautological-constant-out-of-range-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-overlap-compare</key>
    <name>clang-diagnostic-tautological-overlap-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-overlap-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-pointer-compare</key>
    <name>clang-diagnostic-tautological-pointer-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-pointer-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-type-limit-compare</key>
    <name>clang-diagnostic-tautological-type-limit-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-type-limit-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-undefined-compare</key>
    <name>clang-diagnostic-tautological-undefined-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-undefined-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-unsigned-char-zero-compare</key>
    <name>clang-diagnostic-tautological-unsigned-char-zero-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-unsigned-char-zero-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-unsigned-enum-zero-compare</key>
    <name>clang-diagnostic-tautological-unsigned-enum-zero-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-unsigned-zero-compare</key>
    <name>clang-diagnostic-tautological-unsigned-zero-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tautological-value-range-compare</key>
    <name>clang-diagnostic-tautological-value-range-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%4|%sub{subst_int_range}1,2}0 %3 %select{%sub{subst_int_range}1,2|%4}0 is always %5</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-value-range-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety</key>
    <name>clang-diagnostic-thread-safety</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 '%1' is acquired exclusively and shared in the same scope</li>
<li>warning: %0 '%1' is not held on every path through here</li>
<li>warning: %0 '%1' is still held at the end of function</li>
<li>warning: %0 '%1' must be acquired before '%2'</li>
<li>warning: %0 attribute can only be applied in a context annotated with 'capability' attribute</li>
<li>warning: %0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1</li>
<li>warning: %0 attribute without capability arguments can only be applied to non-static methods of a class</li>
<li>warning: %0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute</li>
<li>warning: %0 only applies to pointer types; type here is %1</li>
<li>warning: %select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: Cycle in acquired_before/after dependencies, starting with '%0'</li>
<li>warning: acquiring %0 '%1' that is already held</li>
<li>warning: calling function %0 requires negative capability '%1'</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: cannot call function '%1' while %0 '%2' is held</li>
<li>warning: cannot resolve lock expression</li>
<li>warning: expecting %0 '%1' to be held at start of each loop</li>
<li>warning: expecting %0 '%1' to be held at the end of function</li>
<li>warning: ignoring %0 attribute because its argument is invalid</li>
<li>warning: passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: releasing %0 '%1' that was not held</li>
<li>warning: releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access</li>
<li>warning: returning the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: returning variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-analysis</key>
    <name>clang-diagnostic-thread-safety-analysis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 '%1' is acquired exclusively and shared in the same scope</li>
<li>warning: %0 '%1' is not held on every path through here</li>
<li>warning: %0 '%1' is still held at the end of function</li>
<li>warning: %0 '%1' must be acquired before '%2'</li>
<li>warning: %select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: Cycle in acquired_before/after dependencies, starting with '%0'</li>
<li>warning: acquiring %0 '%1' that is already held</li>
<li>warning: calling function %0 requires negative capability '%1'</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: cannot call function '%1' while %0 '%2' is held</li>
<li>warning: cannot resolve lock expression</li>
<li>warning: expecting %0 '%1' to be held at start of each loop</li>
<li>warning: expecting %0 '%1' to be held at the end of function</li>
<li>warning: releasing %0 '%1' that was not held</li>
<li>warning: releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-analysis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-attributes</key>
    <name>clang-diagnostic-thread-safety-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute can only be applied in a context annotated with 'capability' attribute</li>
<li>warning: %0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1</li>
<li>warning: %0 attribute without capability arguments can only be applied to non-static methods of a class</li>
<li>warning: %0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute</li>
<li>warning: %0 only applies to pointer types; type here is %1</li>
<li>warning: ignoring %0 attribute because its argument is invalid</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-attributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-beta</key>
    <name>clang-diagnostic-thread-safety-beta</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: thread safety beta warning</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-beta" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-negative</key>
    <name>clang-diagnostic-thread-safety-negative</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: acquiring %0 '%1' requires negative capability '%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-negative" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-precise</key>
    <name>clang-diagnostic-thread-safety-precise</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-precise" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-reference</key>
    <name>clang-diagnostic-thread-safety-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: returning the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: returning variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-reference-return</key>
    <name>clang-diagnostic-thread-safety-reference-return</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: returning the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: returning variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-reference-return" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-thread-safety-verbose</key>
    <name>clang-diagnostic-thread-safety-verbose</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: thread safety verbose warning</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-verbose" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-trigraphs</key>
    <name>clang-diagnostic-trigraphs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtrigraphs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-type-limits</key>
    <name>clang-diagnostic-type-limits</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned</li>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtype-limits" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-type-safety</key>
    <name>clang-diagnostic-type-safety</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2</li>
<li>warning: specified %0 type tag requires a null pointer</li>
<li>warning: this type tag was not designed to be used with this function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtype-safety" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unaligned-access</key>
    <name>clang-diagnostic-unaligned-access</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: field %1 within %0 is less aligned than %2 and is usually due to %0 being packed, which can lead to unaligned accesses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunaligned-access" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unavailable-declarations</key>
    <name>clang-diagnostic-unavailable-declarations</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 may be unavailable because the receiver type is unknown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunavailable-declarations" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undeclared-selector</key>
    <name>clang-diagnostic-undeclared-selector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: undeclared selector %0</li>
<li>warning: undeclared selector %0; did you mean %1?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundeclared-selector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-bool-conversion</key>
    <name>clang-diagnostic-undefined-bool-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-bool-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-func-template</key>
    <name>clang-diagnostic-undefined-func-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: instantiation of function %q0 required here, but no definition is available</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-func-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-reinterpret-cast</key>
    <name>clang-diagnostic-undefined-reinterpret-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior</li>
<li>warning: reinterpret_cast from %0 to %1 has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-reinterpret-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-var-template</key>
    <name>clang-diagnostic-undefined-var-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: instantiation of variable %q0 required here, but no definition is available</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-var-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-underaligned-exception-object</key>
    <name>clang-diagnostic-underaligned-exception-object</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: underaligned exception object thrown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunderaligned-exception-object" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unevaluated-expression</key>
    <name>clang-diagnostic-unevaluated-expression</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunevaluated-expression" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unguarded-availability</key>
    <name>clang-diagnostic-unguarded-availability</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunguarded-availability" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unguarded-availability-new</key>
    <name>clang-diagnostic-unguarded-availability-new</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunguarded-availability-new" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unicode</key>
    <name>clang-diagnostic-unicode</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: \%0 used with no following hex digits; treating as '\' followed by identifier</li>
<li>warning: empty delimited universal character name; treating as '\' '%0' '{' '}'</li>
<li>warning: incomplete delimited universal character name; treating as '\' '%0' '{' identifier</li>
<li>warning: incomplete universal character name; treating as '\' followed by identifier</li>
<li>warning: universal character name refers to a surrogate character</li>
<li>warning: universal character names are only valid in C99 or C++</li>
<li>warning: universal character names are only valid in C99 or C++; treating as '\' followed by identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-uninitialized</key>
    <name>clang-diagnostic-uninitialized</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when passed as a const reference argument here</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuninitialized" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-uninitialized-const-reference</key>
    <name>clang-diagnostic-uninitialized-const-reference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 is uninitialized when passed as a const reference argument here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuninitialized-const-reference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-conditional-uninitialized</key>
    <name>clang-diagnostic-conditional-uninitialized</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 may be uninitialized when %select{used here|captured by block}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconditional-uninitialized" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sometimes-uninitialized</key>
    <name>clang-diagnostic-sometimes-uninitialized</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsometimes-uninitialized" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-static-self-init</key>
    <name>clang-diagnostic-static-self-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-self-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-argument</key>
    <name>clang-diagnostic-unknown-argument</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: joined argument treated as '%0'; did you mean '%1'?</li>
<li>warning: unknown argument ignored in clang-cl '%0'; did you mean '%1'?</li>
<li>warning: unknown argument ignored in clang-cl: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-argument" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-assumption</key>
    <name>clang-diagnostic-unknown-assumption</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown assumption string '%0'; attribute is potentially ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-assumption" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-attributes</key>
    <name>clang-diagnostic-unknown-attributes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown attribute %0 ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-attributes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-pragmas</key>
    <name>clang-diagnostic-unknown-pragmas</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: pragma STDC FENV_ROUND is not supported</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-pragmas" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-sanitizers</key>
    <name>clang-diagnostic-unknown-sanitizers</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown sanitizer '%0' ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-sanitizers" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-warning-option</key>
    <name>clang-diagnostic-unknown-warning-option</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown %0 warning specifier: '%1'</li>
<li>warning: unknown %select{warning|remark}0 option '%1'%select{|; did you mean '%3'?}2</li>
<li>warning: unknown warning group '%0', ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-warning-option" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unnamed-type-template-args</key>
    <name>clang-diagnostic-unnamed-type-template-args</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: template argument uses unnamed type</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunnamed-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unneeded-internal-declaration</key>
    <name>clang-diagnostic-unneeded-internal-declaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunneeded-internal-declaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unneeded-member-function</key>
    <name>clang-diagnostic-unneeded-member-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: member function %0 is not needed and will not be emitted</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunneeded-member-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code</key>
    <name>clang-diagnostic-unreachable-code</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: code will never be executed</li>
<li>warning: due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1</li>
<li>warning: fallthrough annotation in unreachable code</li>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-aggressive</key>
    <name>clang-diagnostic-unreachable-code-aggressive</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'break' will never be executed</li>
<li>warning: 'return' will never be executed</li>
<li>warning: code will never be executed</li>
<li>warning: due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1</li>
<li>warning: fallthrough annotation in unreachable code</li>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-aggressive" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-break</key>
    <name>clang-diagnostic-unreachable-code-break</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'break' will never be executed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-break" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-fallthrough</key>
    <name>clang-diagnostic-unreachable-code-fallthrough</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: fallthrough annotation in unreachable code</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-fallthrough" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-generic-assoc</key>
    <name>clang-diagnostic-unreachable-code-generic-assoc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-generic-assoc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-loop-increment</key>
    <name>clang-diagnostic-unreachable-code-loop-increment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-loop-increment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unreachable-code-return</key>
    <name>clang-diagnostic-unreachable-code-return</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'return' will never be executed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-return" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsafe-buffer-usage</key>
    <name>clang-diagnostic-unsafe-buffer-usage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is an %select{unsafe pointer used for buffer access|unsafe buffer that does not perform bounds checks}1</li>
<li>warning: %select{unsafe pointer operation|unsafe pointer arithmetic|unsafe buffer access|function introduces unsafe buffer manipulation|unsafe invocation of span::data}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsafe-buffer-usage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsequenced</key>
    <name>clang-diagnostic-unsequenced</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple unsequenced modifications to %0</li>
<li>warning: unsequenced modification and access to %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsequenced" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-abi</key>
    <name>clang-diagnostic-unsupported-abi</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0': selected processor lacks floating point registers</li>
<li>warning: float ABI '%0' is not supported by current library</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-abi" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-abs</key>
    <name>clang-diagnostic-unsupported-abs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mabs=2008' option because the '%0' architecture does not support it</li>
<li>warning: ignoring '-mabs=legacy' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-abs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-cb</key>
    <name>clang-diagnostic-unsupported-cb</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mcompact-branches=' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-cb" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-floating-point-opt</key>
    <name>clang-diagnostic-unsupported-floating-point-opt</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding currently unsupported rounding mode on this target</li>
<li>warning: overriding currently unsupported use of floating point exceptions on this target</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-floating-point-opt" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-friend</key>
    <name>clang-diagnostic-unsupported-friend</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dependent nested name specifier '%0' for friend class declaration is not supported; turning off access control for %1</li>
<li>warning: dependent nested name specifier '%0' for friend template declaration is not supported; ignoring this friend declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-friend" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-gpopt</key>
    <name>clang-diagnostic-unsupported-gpopt</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mgpopt' option as it cannot be used with %select{|the implicit usage of }0-mabicalls</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-gpopt" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-nan</key>
    <name>clang-diagnostic-unsupported-nan</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mnan=2008' option because the '%0' architecture does not support it</li>
<li>warning: ignoring '-mnan=legacy' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-nan" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-target-opt</key>
    <name>clang-diagnostic-unsupported-target-opt</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: debug information option '%0' is not supported for target '%1'</li>
<li>warning: debug information option '%0' is not supported; requires DWARF-%2 but target '%1' only provides DWARF-%3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-target-opt" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused</key>
    <name>clang-diagnostic-unused</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute: %1</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: left operand of comma operator has no effect</li>
<li>warning: private field %0 is not used</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: variable %0 set but not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-but-set-parameter</key>
    <name>clang-diagnostic-unused-but-set-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: parameter %0 set but not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-but-set-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-but-set-variable</key>
    <name>clang-diagnostic-unused-but-set-variable</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 set but not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-but-set-variable" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-command-line-argument</key>
    <name>clang-diagnostic-unused-command-line-argument</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0: '%1' input unused in cpp mode</li>
<li>warning: %0: '%1' input unused%select{ when '%3' is present|}2</li>
<li>warning: %0: previously preprocessed input%select{ unused when '%2' is present|}1</li>
<li>warning: '%0' only applies to medium and large code models</li>
<li>warning: '-x %0' after last input file has no effect</li>
<li>warning: argument '%0' requires profile-guided optimization information</li>
<li>warning: argument '%0' requires profile-guided optimization information</li>
<li>warning: argument unused during compilation: '%0'</li>
<li>warning: ignoring -fdiscard-value-names for LLVM Bitcode</li>
<li>warning: ignoring -fverify-debuginfo-preserve-export=%0 because -fverify-debuginfo-preserve wasn't enabled</li>
<li>warning: ignoring invalid /arch: argument '%0'; for %select{64|32}1-bit expected one of %2</li>
<li>warning: joined argument expects additional value: '%0'</li>
<li>warning: the flag '%0' has been deprecated and will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-command-line-argument" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-comparison</key>
    <name>clang-diagnostic-unused-comparison</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-comparison" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-const-variable</key>
    <name>clang-diagnostic-unused-const-variable</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-const-variable" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-exception-parameter</key>
    <name>clang-diagnostic-unused-exception-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused exception parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-exception-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-function</key>
    <name>clang-diagnostic-unused-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: unused function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-getter-return-value</key>
    <name>clang-diagnostic-unused-getter-return-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property access result unused - getters should not be used for side effects</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-getter-return-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-label</key>
    <name>clang-diagnostic-unused-label</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused label %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-label" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-lambda-capture</key>
    <name>clang-diagnostic-unused-lambda-capture</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-lambda-capture" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-local-typedef</key>
    <name>clang-diagnostic-unused-local-typedef</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused %select{typedef|type alias}0 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-local-typedef" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-member-function</key>
    <name>clang-diagnostic-unused-member-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: member function %0 is not needed and will not be emitted</li>
<li>warning: unused member function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-member-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-parameter</key>
    <name>clang-diagnostic-unused-parameter</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-parameter" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-private-field</key>
    <name>clang-diagnostic-unused-private-field</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: private field %0 is not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-private-field" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-property-ivar</key>
    <name>clang-diagnostic-unused-property-ivar</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-property-ivar" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-result</key>
    <name>clang-diagnostic-unused-result</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-result" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-template</key>
    <name>clang-diagnostic-unused-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: unused %select{function|variable}0 template %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-value</key>
    <name>clang-diagnostic-unused-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute: %1</li>
<li>warning: left operand of comma operator has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-variable</key>
    <name>clang-diagnostic-unused-variable</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-variable" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-used-but-marked-unused</key>
    <name>clang-diagnostic-used-but-marked-unused</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 was marked unused but was used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wused-but-marked-unused" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-search-path-usage</key>
    <name>clang-diagnostic-search-path-usage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: search path used: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rsearch-path-usage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-user-defined-literals</key>
    <name>clang-diagnostic-user-defined-literals</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: user-defined literal suffixes %select{&lt;ERROR&gt;|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuser-defined-literals" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-user-defined-warnings</key>
    <name>clang-diagnostic-user-defined-warnings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuser-defined-warnings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vla</key>
    <name>clang-diagnostic-vla</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable length array used</li>
<li>warning: variable length arrays are a C99 feature</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vla-cxx-extension</key>
    <name>clang-diagnostic-vla-cxx-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla-cxx-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vla-extension</key>
    <name>clang-diagnostic-vla-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable length arrays are a C99 feature</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vla-extension-static-assert</key>
    <name>clang-diagnostic-vla-extension-static-assert</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla-extension-static-assert" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-varargs</key>
    <name>clang-diagnostic-varargs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior</li>
<li>warning: second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1</li>
<li>warning: second argument to 'va_start' is not the last named parameter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvarargs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-variadic-macros</key>
    <name>clang-diagnostic-variadic-macros</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: __VA_OPT__ can only appear in the expansion of a variadic macro</li>
<li>warning: named variadic macros are a GNU extension</li>
<li>warning: variadic macros are a C99 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvariadic-macros" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vector-conversion</key>
    <name>clang-diagnostic-vector-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvector-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vexing-parse</key>
    <name>clang-diagnostic-vexing-parse</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: empty parentheses interpreted as a function declaration</li>
<li>warning: parentheses were disambiguated as a function declaration</li>
<li>warning: parentheses were disambiguated as redundant parentheses around declaration of variable named %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvexing-parse" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-visibility</key>
    <name>clang-diagnostic-visibility</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration of %0 will not be visible outside of this function</li>
<li>warning: redefinition of %0 will not be visible outside of this function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvisibility" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-void-ptr-dereference</key>
    <name>clang-diagnostic-void-ptr-dereference</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C does not allow indirection on operand of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvoid-ptr-dereference" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-void-pointer-to-enum-cast</key>
    <name>clang-diagnostic-void-pointer-to-enum-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to smaller integer type %1 from %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-void-pointer-to-int-cast</key>
    <name>clang-diagnostic-void-pointer-to-int-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast to smaller integer type %1 from %0</li>
<li>warning: cast to smaller integer type %1 from %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-wasm-exception-spec</key>
    <name>clang-diagnostic-wasm-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dynamic exception specifications with types are currently ignored in wasm</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wwasm-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-writable-strings</key>
    <name>clang-diagnostic-writable-strings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 does not allow conversion from string literal to %0</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wwritable-strings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-xor-used-as-pow</key>
    <name>clang-diagnostic-xor-used-as-pow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: result of '%0' is %1; did you mean '%2' (%3)?</li>
<li>warning: result of '%0' is %1; did you mean '%2'?</li>
<li>warning: result of '%0' is %1; did you mean exponentiation?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wxor-used-as-pow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-zero-length-array</key>
    <name>clang-diagnostic-zero-length-array</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: zero size arrays are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wzero-length-array" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-slash-u-filename</key>
    <name>clang-diagnostic-slash-u-filename</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '/U%0' treated as the '/U' option</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wslash-u-filename" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-msvc-not-found</key>
    <name>clang-diagnostic-msvc-not-found</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unable to find a Visual Studio installation; try running Clang from a developer command prompt</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmsvc-not-found" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-darwin-sdk-settings</key>
    <name>clang-diagnostic-darwin-sdk-settings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: SDK settings were ignored as 'SDKSettings.json' could not be parsed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdarwin-sdk-settings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-stdlibcxx-not-found</key>
    <name>clang-diagnostic-stdlibcxx-not-found</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: include path for libstdc++ headers not found; pass '-stdlib=libc++' on the command line to use the libc++ standard library instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstdlibcxx-not-found" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sarif-format-unstable</key>
    <name>clang-diagnostic-sarif-format-unstable</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: diagnostic formatting in SARIF mode is currently unstable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsarif-format-unstable" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-multilib</key>
    <name>clang-diagnostic-missing-multilib</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no multilib found matching flags: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-multilib" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-android-unversioned-fallback</key>
    <name>clang-diagnostic-android-unversioned-fallback</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Using unversioned Android target directory %0 for target %1. Unversioned directories will not be used in Clang 19. Provide a versioned directory for the target version or lower instead.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wandroid-unversioned-fallback" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-override-module</key>
    <name>clang-diagnostic-override-module</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding the module target triple with %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverride-module" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unable-to-open-stats-file</key>
    <name>clang-diagnostic-unable-to-open-stats-file</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unable to open statistics output file '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunable-to-open-stats-file" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-analyzer-incompatible-plugin</key>
    <name>clang-diagnostic-analyzer-incompatible-plugin</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: checker plugin '%0' is not compatible with this version of the analyzer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-div-by-zero</key>
    <name>clang-diagnostic-div-by-zero</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{remainder|division}0 by zero is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdiv-by-zero" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-file-config-mismatch</key>
    <name>clang-diagnostic-module-file-config-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: module file %0 cannot be loaded due to a configuration mismatch with the current compilation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-file-config-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-eager-load-cxx-named-modules</key>
    <name>clang-diagnostic-eager-load-cxx-named-modules</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the form '-fmodule-file=&lt;BMI-path&gt;' is deprecated for standard C++ named modules;consider to use '-fmodule-file=&lt;module-name&gt;=&lt;BMI-path&gt;' instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#weager-load-cxx-named-modules" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-psabi</key>
    <name>clang-diagnostic-psabi</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpsabi" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-backslash-newline-escape</key>
    <name>clang-diagnostic-backslash-newline-escape</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: backslash and newline separated by space</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbackslash-newline-escape" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dollar-in-identifier-extension</key>
    <name>clang-diagnostic-dollar-in-identifier-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '$' in identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdollar-in-identifier-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-language-extension-token</key>
    <name>clang-diagnostic-language-extension-token</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extension used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlanguage-extension-token" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-utf8</key>
    <name>clang-diagnostic-invalid-utf8</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid UTF-8 in comment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-utf8" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unicode-whitespace</key>
    <name>clang-diagnostic-unicode-whitespace</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: treating Unicode character as whitespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-whitespace" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unicode-homoglyph</key>
    <name>clang-diagnostic-unicode-homoglyph</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: treating Unicode character &lt;U+%0&gt; as an identifier character rather than as '%1' symbol</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-homoglyph" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unicode-zero-width</key>
    <name>clang-diagnostic-unicode-zero-width</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: identifier contains Unicode character &lt;U+%0&gt; that is invisible in some environments</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-zero-width" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++1z-compat-mangling</key>
    <name>clang-diagnostic-c++1z-compat-mangling</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-compat-mangling" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-mathematical-notation-identifier-extension</key>
    <name>clang-diagnostic-mathematical-notation-identifier-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: mathematical notation character &lt;U+%0&gt; in an identifier is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmathematical-notation-identifier-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delimited-escape-sequence-extension</key>
    <name>clang-diagnostic-delimited-escape-sequence-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{delimited|named}0 escape sequences are a %select{Clang|C++23}1 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelimited-escape-sequence-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-escape-sequence</key>
    <name>clang-diagnostic-unknown-escape-sequence</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unknown escape sequence '\%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-escape-sequence" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-unevaluated-string</key>
    <name>clang-diagnostic-invalid-unevaluated-string</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: encoding prefix '%0' on an unevaluated string literal has no effect%select{| and is incompatible with c++2c}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-unevaluated-string" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-include-next-outside-header</key>
    <name>clang-diagnostic-include-next-outside-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include_next in primary source file; will search from start of include path</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winclude-next-outside-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-include-next-absolute-path</key>
    <name>clang-diagnostic-include-next-absolute-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include_next in file found relative to primary source file or found by absolute path; will search from start of include path</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winclude-next-absolute-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonportable-include-path</key>
    <name>clang-diagnostic-nonportable-include-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-portable path to file '%0'; specified path differs in case from file name on disk</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-include-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonportable-system-include-path</key>
    <name>clang-diagnostic-nonportable-system-include-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-portable path to file '%0'; specified path differs in case from file name on disk</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-system-include-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragma-once-outside-header</key>
    <name>clang-diagnostic-pragma-once-outside-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma once in main file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-once-outside-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pragma-system-header-outside-header</key>
    <name>clang-diagnostic-pragma-system-header-outside-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma system_header ignored in main file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-system-header-outside-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c2x-compat</key>
    <name>clang-diagnostic-pre-c2x-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C standards before C23</li>
<li>warning: '%0' is incompatible with C standards before C23</li>
<li>warning: '...' as the only parameter of a function is incompatible with C standards before C23</li>
<li>warning: '_BitInt' suffix for literals is incompatible with C standards before C23</li>
<li>warning: '_Static_assert' with no message is incompatible with C standards before C23</li>
<li>warning: [[]] attributes are incompatible with C standards before C23</li>
<li>warning: digit separators are incompatible with C standards before C23</li>
<li>warning: label at end of compound statement is incompatible with C standards before C23</li>
<li>warning: label followed by a declaration is incompatible with C standards before C23</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C standards before C23</li>
<li>warning: universal character name referring to a control character is incompatible with C standards before C23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C standards before C23</li>
<li>warning: use of an empty initializer is incompatible with C standards before C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c2x-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-disabled-macro-expansion</key>
    <name>clang-diagnostic-disabled-macro-expansion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: disabled expansion of recursive macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdisabled-macro-expansion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-macros</key>
    <name>clang-diagnostic-unused-macros</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: macro is not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-macros" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undef</key>
    <name>clang-diagnostic-undef</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is not defined, evaluates to 0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundef" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undef-prefix</key>
    <name>clang-diagnostic-undef-prefix</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is not defined, evaluates to 0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundef-prefix" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-macro-redefinition</key>
    <name>clang-diagnostic-objc-macro-redefinition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring redefinition of Objective-C qualifier macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-macro-redefinition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-import-preprocessor-directive-pedantic</key>
    <name>clang-diagnostic-import-preprocessor-directive-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #import is a language extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-embedded-directive</key>
    <name>clang-diagnostic-embedded-directive</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: embedding a directive within macro arguments has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wembedded-directive" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unknown-directives</key>
    <name>clang-diagnostic-unknown-directives</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid preprocessing directive%select{|, did you mean '#%1'?}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-directives" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-token-paste</key>
    <name>clang-diagnostic-invalid-token-paste</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: pasting formed '%0', an invalid preprocessing token</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-token-paste" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-date-time</key>
    <name>clang-diagnostic-date-time</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expansion of date or time macro is not reproducible</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdate-time" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c2x-compat-pedantic</key>
    <name>clang-diagnostic-pre-c2x-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C standards before C23</li>
<li>warning: '%0' is incompatible with C standards before C23</li>
<li>warning: '...' as the only parameter of a function is incompatible with C standards before C23</li>
<li>warning: '_BitInt' suffix for literals is incompatible with C standards before C23</li>
<li>warning: '_Static_assert' with no message is incompatible with C standards before C23</li>
<li>warning: [[]] attributes are incompatible with C standards before C23</li>
<li>warning: digit separators are incompatible with C standards before C23</li>
<li>warning: label at end of compound statement is incompatible with C standards before C23</li>
<li>warning: label followed by a declaration is incompatible with C standards before C23</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C standards before C23</li>
<li>warning: universal character name referring to a control character is incompatible with C standards before C23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C standards before C23</li>
<li>warning: use of an empty initializer is incompatible with C standards before C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c2x-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-private-header</key>
    <name>clang-diagnostic-private-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of private header from outside its module: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-include-angled-in-module-purview</key>
    <name>clang-diagnostic-include-angled-in-module-purview</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '#include &lt;filename&gt;' attaches the declarations to the named module '%0', which is not usually intended; consider moving that directive before the module declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winclude-angled-in-module-purview" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-header-guard</key>
    <name>clang-diagnostic-header-guard</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is used as a header guard here, followed by #define of a different macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wheader-guard" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-empty-translation-unit</key>
    <name>clang-diagnostic-empty-translation-unit</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C requires a translation unit to contain at least one declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-translation-unit" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nullability-extension</key>
    <name>clang-diagnostic-nullability-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: type nullability specifier %0 is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-fixed-enum-extension</key>
    <name>clang-diagnostic-fixed-enum-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: enumeration types with a fixed underlying type are a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfixed-enum-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-elaborated-enum-base</key>
    <name>clang-diagnostic-elaborated-enum-base</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration%select{|; missing list of enumerators?}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#welaborated-enum-base" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-elaborated-enum-class</key>
    <name>clang-diagnostic-elaborated-enum-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: reference to enumeration must use 'enum' not 'enum %select{struct|class}0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#welaborated-enum-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-microsoft-exists</key>
    <name>clang-diagnostic-microsoft-exists</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: dependent %select{__if_not_exists|__if_exists}0 declarations are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-exists" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-generic-type-extension</key>
    <name>clang-diagnostic-generic-type-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: passing a type argument as the first operand to '_Generic' is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgeneric-type-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-compat</key>
    <name>clang-diagnostic-c++98-c++11-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-selector-name</key>
    <name>clang-diagnostic-missing-selector-name</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 used as the name of the previous parameter rather than as part of the selector</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-selector-name" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-auto-storage-class</key>
    <name>clang-diagnostic-auto-storage-class</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-storage-class" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-empty-decomposition</key>
    <name>clang-diagnostic-empty-decomposition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow a decomposition group to be empty</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-decomposition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-bridge-casts-disallowed-in-nonarc</key>
    <name>clang-diagnostic-arc-bridge-casts-disallowed-in-nonarc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' casts have no effect when not using ARC</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ambiguous-ellipsis</key>
    <name>clang-diagnostic-ambiguous-ellipsis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-ellipsis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-anonymous-pack-parens</key>
    <name>clang-diagnostic-anonymous-pack-parens</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 requires a parenthesized pack declaration to have a name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wanonymous-pack-parens" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cxx-attribute-extension</key>
    <name>clang-diagnostic-cxx-attribute-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ does not allow %select{an attribute list|%0}1 to appear here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcxx-attribute-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-requires-expression</key>
    <name>clang-diagnostic-requires-expression</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: this requires expression will only be checked for syntactic validity; did you intend to place it in a nested requirement? (add another 'requires' before the expression)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrequires-expression" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-static-inline-explicit-instantiation</key>
    <name>clang-diagnostic-static-inline-explicit-instantiation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '%select{static|inline}0' keyword on explicit template instantiation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bit-int-extension</key>
    <name>clang-diagnostic-bit-int-extension</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '_BitInt' in %select{C17 and earlier|C++}0 is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbit-int-extension" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-concepts-ts-compat</key>
    <name>clang-diagnostic-concepts-ts-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 does not permit the 'bool' keyword after 'concept'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconcepts-ts-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-duplicate-enum</key>
    <name>clang-diagnostic-duplicate-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: element %0 has been implicitly assigned %1 which another element has been assigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-compat-pedantic</key>
    <name>clang-diagnostic-c++98-c++11-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-comma</key>
    <name>clang-diagnostic-comma</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: possible misuse of comma operator here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomma" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-predefined-identifier-outside-function</key>
    <name>clang-diagnostic-predefined-identifier-outside-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: predefined identifier is only valid inside function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-interrupt-service-routine</key>
    <name>clang-diagnostic-interrupt-service-routine</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: interrupt service routine should only call a function with attribute 'no_caller_saved_registers'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winterrupt-service-routine" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-auto-decl-extensions</key>
    <name>clang-diagnostic-auto-decl-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: type inference of a declaration other than a plain identifier with optional trailing attributes is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-decl-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-excessive-regsave</key>
    <name>clang-diagnostic-excessive-regsave</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{interrupt service routine|function with attribute 'no_caller_saved_registers'}0 should only call a function with attribute 'no_caller_saved_registers' or be compiled with '-mgeneral-regs-only'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexcessive-regsave" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-redundant-parens</key>
    <name>clang-diagnostic-redundant-parens</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redundant parentheses surrounding declarator</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredundant-parens" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-out-of-scope-function</key>
    <name>clang-diagnostic-out-of-scope-function</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wout-of-scope-function" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-binding-in-condition</key>
    <name>clang-diagnostic-binding-in-condition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not permit structured binding declaration in a condition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbinding-in-condition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incomplete-setjmp-declaration</key>
    <name>clang-diagnostic-incomplete-setjmp-declaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration of built-in function '%0' requires the declaration of the 'jmp_buf' type, commonly provided in the header &lt;setjmp.h&gt;.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-setjmp-declaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-library-redeclaration</key>
    <name>clang-diagnostic-incompatible-library-redeclaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible redeclaration of library function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-library-redeclaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-strlcpy-strlcat-size</key>
    <name>clang-diagnostic-strlcpy-strlcat-size</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: size argument in %0 call appears to be size of the source; expected the size of the destination</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-c++14-compat</key>
    <name>clang-diagnostic-c++98-c++11-c++14-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-memsize-comparison</key>
    <name>clang-diagnostic-memsize-comparison</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: size argument in %0 call is a comparison</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmemsize-comparison" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-assume</key>
    <name>clang-diagnostic-assume</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the argument to %0 has side effects that will be discarded</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wassume" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-builtin-memcpy-chk-size</key>
    <name>clang-diagnostic-builtin-memcpy-chk-size</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' will always overflow; destination buffer has size %1, but size argument is %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-c-typedef-for-linkage</key>
    <name>clang-diagnostic-non-c-typedef-for-linkage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration; add a tag name here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-duplicate-protocol</key>
    <name>clang-diagnostic-duplicate-protocol</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: duplicate protocol definition of %0 is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-protocol" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-property-type</key>
    <name>clang-diagnostic-incompatible-property-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property type %0 is incompatible with type %1 inherited from %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-property-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-protocol-property-synthesis-ambiguity</key>
    <name>clang-diagnostic-protocol-property-synthesis-ambiguity</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprotocol-property-synthesis-ambiguity" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incomplete-implementation</key>
    <name>clang-diagnostic-incomplete-implementation</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method definition for %0 not found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-implementation" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-implicit-mismatch</key>
    <name>clang-diagnostic-objc-property-implicit-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: primary property declaration is implicitly strong while redeclaration in class extension is weak</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-implicit-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-property-with-user-defined-accessor</key>
    <name>clang-diagnostic-atomic-property-with-user-defined-accessor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-property-with-user-defined-accessor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-c++14-compat-pedantic</key>
    <name>clang-diagnostic-c++98-c++11-c++14-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-property-matches-cocoa-ownership-rule</key>
    <name>clang-diagnostic-objc-property-matches-cocoa-ownership-rule</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: property follows Cocoa naming convention for returning 'owned' objects</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-matches-cocoa-ownership-rule" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-protocol-property-synthesis</key>
    <name>clang-diagnostic-objc-protocol-property-synthesis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis will not synthesize property %0 declared in protocol %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-autosynthesis-property-ivar-name-match</key>
    <name>clang-diagnostic-objc-autosynthesis-property-ivar-name-match</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-autosynthesis-property-ivar-name-match" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-missing-property-synthesis</key>
    <name>clang-diagnostic-objc-missing-property-synthesis</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis is synthesizing property not explicitly synthesized</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-missing-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-arc-performSelector-leaks</key>
    <name>clang-diagnostic-arc-performSelector-leaks</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: performSelector may cause a leak because its selector is unknown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-performSelector-leaks" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-retain-self</key>
    <name>clang-diagnostic-implicit-retain-self</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-retain-self" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-readonly-iboutlet-property</key>
    <name>clang-diagnostic-readonly-iboutlet-property</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreadonly-iboutlet-property" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-messaging-id</key>
    <name>clang-diagnostic-objc-messaging-id</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: messaging unqualified id</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-messaging-id" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-static-assert-message</key>
    <name>clang-diagnostic-invalid-static-assert-message</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the message in this static assertion is not a constant expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-static-assert-message" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-redundant-consteval-if</key>
    <name>clang-diagnostic-redundant-consteval-if</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: consteval if is always true in an %select{unevaluated|immediate}0 context</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredundant-consteval-if" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-c++14-c++17-compat</key>
    <name>clang-diagnostic-c++98-c++11-c++14-c++17-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-weak-vtables</key>
    <name>clang-diagnostic-weak-vtables</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wweak-vtables" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-weak-template-vtables</key>
    <name>clang-diagnostic-weak-template-vtables</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: this warning is no longer in use and will be removed in the next release</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wweak-template-vtables" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-exception-spec</key>
    <name>clang-diagnostic-missing-exception-spec</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is missing exception specification '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-injected-class-name</key>
    <name>clang-diagnostic-injected-class-name</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winjected-class-name" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dtor-typedef</key>
    <name>clang-diagnostic-dtor-typedef</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: destructor cannot be declared using a %select{typedef|type alias}1 %0 of the class name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdtor-typedef" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-constexpr-not-const</key>
    <name>clang-diagnostic-constexpr-not-const</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstexpr-not-const" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-constexpr</key>
    <name>clang-diagnostic-invalid-constexpr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{constexpr|consteval}1 %select{function|constructor}0 never produces a constant expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-constexpr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-auto-var-id</key>
    <name>clang-diagnostic-auto-var-id</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'auto' deduced as 'id' in declaration of %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-var-id" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-arm-streaming</key>
    <name>clang-diagnostic-undefined-arm-streaming</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: builtin call has undefined behaviour when called from a %0 function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-arm-streaming" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-arm-za</key>
    <name>clang-diagnostic-undefined-arm-za</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: builtin call is not valid when calling from a function without active ZA state</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-arm-za" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++98-c++11-c++14-c++17-compat-pedantic</key>
    <name>clang-diagnostic-c++98-c++11-c++14-c++17-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: designated initializers are incompatible with C++ standards before C++20</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-arm-zt0</key>
    <name>clang-diagnostic-undefined-arm-zt0</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: builtin call is not valid when calling from a function without active ZT0 state</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-arm-zt0" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vec-elem-size</key>
    <name>clang-diagnostic-vec-elem-size</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: vector operands do not have the same elements sizes (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvec-elem-size" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-dictionary-duplicate-keys</key>
    <name>clang-diagnostic-objc-dictionary-duplicate-keys</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: duplicate key in dictionary literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-dictionary-duplicate-keys" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-alloca</key>
    <name>clang-diagnostic-alloca</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of function %0 is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#walloca" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-alloca-with-align-alignof</key>
    <name>clang-diagnostic-alloca-with-align-alignof</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: second argument to __builtin_alloca_with_align is supposed to be in bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#walloca-with-align-alignof" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-non-power-of-two-alignment</key>
    <name>clang-diagnostic-non-power-of-two-alignment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: requested alignment is not a power of 2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-power-of-two-alignment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-builtin-assume-aligned-alignment</key>
    <name>clang-diagnostic-builtin-assume-aligned-alignment</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: requested alignment must be %0 bytes or smaller; maximum alignment assumed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-assume-aligned-alignment" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cmse-union-leak</key>
    <name>clang-diagnostic-cmse-union-leak</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: passing union across security boundary via %select{parameter %1|return value}0 may leak information</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcmse-union-leak" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dll-attribute-on-redeclaration</key>
    <name>clang-diagnostic-dll-attribute-on-redeclaration</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of %q0 should not add %q1 attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-dllimport-static-field-def</key>
    <name>clang-diagnostic-dllimport-static-field-def</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of dllimport static field</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdllimport-static-field-def" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++2c-compat</key>
    <name>clang-diagnostic-pre-c++2c-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are incompatible with C++ standards before C++2c</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-2c-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-initializer-from-system-header</key>
    <name>clang-diagnostic-invalid-initializer-from-system-header</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid constructor from class in system header, should not be explicit</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-dll-base-class-template</key>
    <name>clang-diagnostic-unsupported-dll-base-class-template</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-encode-type</key>
    <name>clang-diagnostic-encode-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: encoding of %0 type is incomplete because %1 component has unknown encoding</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wencode-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-inline-cpp-without-extern</key>
    <name>clang-diagnostic-gnu-inline-cpp-without-extern</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'gnu_inline' attribute without 'extern' in C++ treated as externally available, this changed in Clang 10</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-inline-cpp-without-extern" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-prototype-for-cc</key>
    <name>clang-diagnostic-missing-prototype-for-cc</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function with no prototype cannot use the %0 calling convention</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototype-for-cc" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-availability-guard</key>
    <name>clang-diagnostic-unsupported-availability-guard</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-availability-guard" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ignored-availability-without-sdk-settings</key>
    <name>clang-diagnostic-ignored-availability-without-sdk-settings</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 availability is ignored without a valid 'SDKSettings.json' in the SDK</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-availability-without-sdk-settings" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-compare</key>
    <name>clang-diagnostic-pointer-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparing a pointer to a null character constant; did you mean to compare to %select{NULL|(void *)0}0?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-pointer-div</key>
    <name>clang-diagnostic-sizeof-pointer-div</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' will return the size of the pointer, not the array itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-pointer-div" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-array-div</key>
    <name>clang-diagnostic-sizeof-array-div</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression does not compute the number of elements in this array; element type is %0, not %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-array-div" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pre-c++2c-compat-pedantic</key>
    <name>clang-diagnostic-pre-c++2c-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are incompatible with C++ standards before C++2c</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpre-c-2c-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-attribute-packed-for-bitfield</key>
    <name>clang-diagnostic-attribute-packed-for-bitfield</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wattribute-packed-for-bitfield" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unsupported-visibility</key>
    <name>clang-diagnostic-unsupported-visibility</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: target does not support 'protected' visibility; using 'default'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-visibility" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-no-builtin-names</key>
    <name>clang-diagnostic-invalid-no-builtin-names</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is not a valid builtin name for %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-no-builtin-names" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-requires-super-attribute</key>
    <name>clang-diagnostic-requires-super-attribute</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute cannot be applied to %select{methods in protocols|dealloc}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrequires-super-attribute" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ambiguous-reversed-operator</key>
    <name>clang-diagnostic-ambiguous-reversed-operator</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 considers use of overloaded operator '%0' (with operand types %1 and %2) to be ambiguous despite there being a unique best viable function%select{ with non-reversed arguments|}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-reversed-operator" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-rewrite-not-bool</key>
    <name>clang-diagnostic-rewrite-not-bool</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 requires return type of selected 'operator==' function for rewritten '%1' comparison to be 'bool', not %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrewrite-not-bool" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unqualified-std-cast-call</key>
    <name>clang-diagnostic-unqualified-std-cast-call</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unqualified call to '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunqualified-std-cast-call" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-partial-specialization</key>
    <name>clang-diagnostic-invalid-partial-specialization</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|variable}0 template partial specialization is not more specialized than the primary template</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-partial-specialization" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unusable-partial-specialization</key>
    <name>clang-diagnostic-unusable-partial-specialization</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunusable-partial-specialization" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-instantiation-after-specialization</key>
    <name>clang-diagnostic-instantiation-after-specialization</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: explicit instantiation of %0 that occurs after an explicit specialization has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winstantiation-after-specialization" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++0x-narrowing</key>
    <name>clang-diagnostic-c++0x-narrowing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-narrowing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-typename-missing</key>
    <name>clang-diagnostic-typename-missing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: missing 'typename' prior to dependent type name '%0%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtypename-missing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-prototypes</key>
    <name>clang-diagnostic-missing-prototypes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no previous prototype for function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototypes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-variable-declarations</key>
    <name>clang-diagnostic-missing-variable-declarations</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no previous extern declaration for non-static variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-variable-declarations" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-internal</key>
    <name>clang-diagnostic-undefined-internal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %q1 has internal linkage but is not defined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-internal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-internal-type</key>
    <name>clang-diagnostic-undefined-internal-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-internal-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-undefined-inline</key>
    <name>clang-diagnostic-undefined-inline</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: inline function %q0 is not defined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-inline" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-typedef-redefinition</key>
    <name>clang-diagnostic-typedef-redefinition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of typedef %0 is a C11 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtypedef-redefinition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-retained-language-linkage</key>
    <name>clang-diagnostic-retained-language-linkage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: friend function %0 retaining previous language linkage is an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wretained-language-linkage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-forward-class-redefinition</key>
    <name>clang-diagnostic-objc-forward-class-redefinition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of forward class %0 of a typedef name of an object type is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-forward-class-redefinition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-interface-ivars</key>
    <name>clang-diagnostic-objc-interface-ivars</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: declaration of instance variables in the interface is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-interface-ivars" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-narrowing</key>
    <name>clang-diagnostic-narrowing</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnarrowing" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extern-initializer</key>
    <name>clang-diagnostic-extern-initializer</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'extern' variable has an initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextern-initializer" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-braced-scalar-init</key>
    <name>clang-diagnostic-braced-scalar-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: braces around %select{scalar |}0initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbraced-scalar-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-many-braces-around-scalar-init</key>
    <name>clang-diagnostic-many-braces-around-scalar-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: too many braces around %select{scalar |}0initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-complex-component-init</key>
    <name>clang-diagnostic-complex-component-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: complex initialization specifying real and imaginary components is an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomplex-component-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-qualified-void-return-type</key>
    <name>clang-diagnostic-qualified-void-return-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function cannot return qualified void type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wqualified-void-return-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-explicit-ownership-type</key>
    <name>clang-diagnostic-explicit-ownership-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: method parameter of type %0 with no explicit ownership</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexplicit-ownership-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-access</key>
    <name>clang-diagnostic-atomic-access</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: accessing a member of an atomic structure or union is undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-access" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-float-equal</key>
    <name>clang-diagnostic-float-equal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparing floating point with == or != is unsafe</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-equal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-negative-value</key>
    <name>clang-diagnostic-shift-negative-value</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: shifting a negative signed value is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-negative-value" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-count-negative</key>
    <name>clang-diagnostic-shift-count-negative</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: shift count is negative</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-count-negative" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++0x-compat</key>
    <name>clang-diagnostic-c++0x-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'static_assert' with no message is incompatible with C++ standards before C++17</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-count-overflow</key>
    <name>clang-diagnostic-shift-count-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: shift count &gt;= width of type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-count-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-overflow</key>
    <name>clang-diagnostic-shift-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-shift-sign-overflow</key>
    <name>clang-diagnostic-shift-sign-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-sign-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-constant-logical-operand</key>
    <name>clang-diagnostic-constant-logical-operand</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of logical '%0' with constant operand</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstant-logical-operand" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-extra-qualification</key>
    <name>clang-diagnostic-extra-qualification</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra qualification on member %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-qualification" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tentative-definition-incomplete-type</key>
    <name>clang-diagnostic-tentative-definition-incomplete-type</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: tentative definition of variable with internal linkage has incomplete non-array type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gnu-array-member-paren-init</key>
    <name>clang-diagnostic-gnu-array-member-paren-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: parenthesized initialization of a member array is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-array-member-paren-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-address-of-packed-member</key>
    <name>clang-diagnostic-address-of-packed-member</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress-of-packed-member" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-align-mismatch</key>
    <name>clang-diagnostic-align-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: passing %0-byte aligned argument to %1-byte aligned parameter %2%select{| of %4}3 may result in an unaligned pointer access</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#walign-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-integer-compare</key>
    <name>clang-diagnostic-pointer-integer-compare</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: comparison between pointer and integer (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-integer-compare" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++1z-compat</key>
    <name>clang-diagnostic-c++1z-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++20</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: captured structured bindings are incompatible with C++ standards before C++20</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20</li>
<li>warning: constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++20</li>
<li>warning: defaulted comparison operators are incompatible with C++ standards before C++20</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++20</li>
<li>warning: explicit(bool) is incompatible with C++ standards before C++20</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++20</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++20</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++20</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20</li>
<li>warning: member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20</li>
<li>warning: non-type template parameter of type %0 is incompatible with C++ standards before C++20</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++20</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: using declaration naming a scoped enumerator is incompatible with C++ standards before C++20</li>
<li>warning: using enum declaration is incompatible with C++ standards before C++20</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-circular-container</key>
    <name>clang-diagnostic-objc-circular-container</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to %1 might cause circular dependency in container</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-circular-container" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-unsafe-perform-selector</key>
    <name>clang-diagnostic-objc-unsafe-perform-selector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is incompatible with selectors that return a %select{struct|union|vector}1 type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-unsafe-perform-selector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-qual-unrelated</key>
    <name>clang-diagnostic-cast-qual-unrelated</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-qual-unrelated" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-mismatched-new-delete</key>
    <name>clang-diagnostic-mismatched-new-delete</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-new-delete" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-ambiguous-delete</key>
    <name>clang-diagnostic-ambiguous-delete</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-delete" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-altivec-src-compat</key>
    <name>clang-diagnostic-deprecated-altivec-src-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Current handling of vector bool and vector pixel types in this context are deprecated. The default behaviour will soon change to that implied by the '-altivec-compat=xl' option</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-altivec-src-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecate-lax-vec-conv-all</key>
    <name>clang-diagnostic-deprecate-lax-vec-conv-all</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: Implicit conversion between vector types ('%0' and '%1') is deprecated. In the future, the behavior implied by '-fno-lax-vector-conversions' will be the default.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecate-lax-vec-conv-all" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-jump-seh-finally</key>
    <name>clang-diagnostic-jump-seh-finally</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: jump out of __finally block has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wjump-seh-finally" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-idiomatic-parentheses</key>
    <name>clang-diagnostic-idiomatic-parentheses</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using the result of an assignment as a condition without parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#widiomatic-parentheses" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-sign</key>
    <name>clang-diagnostic-pointer-sign</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-sign" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++2a-compat</key>
    <name>clang-diagnostic-c++2a-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '%0' is a keyword in C++20</li>
<li>warning: '&lt;=&gt;' is a single token in C++20; add a space to avoid a change in behavior</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'consteval' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constinit' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++20</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: taking address of non-addressable standard library function is incompatible with C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++20</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of implicit 'typename' is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-function-pointer-types-strict</key>
    <name>clang-diagnostic-incompatible-function-pointer-types-strict</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-function-pointer-types-strict" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-memory-ordering</key>
    <name>clang-diagnostic-atomic-memory-ordering</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{|success |failure }0memory order argument to atomic operation is invalid</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-memory-ordering" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-atomic-implicit-seq-cst</key>
    <name>clang-diagnostic-atomic-implicit-seq-cst</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-implicit-seq-cst" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-gpu-maybe-wrong-side</key>
    <name>clang-diagnostic-gpu-maybe-wrong-side</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: capture host side class data member by this pointer in device or host device lambda function may result in invalid memory access if this pointer is not accessible on device side</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgpu-maybe-wrong-side" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cast-calling-convention</key>
    <name>clang-diagnostic-cast-calling-convention</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-calling-convention" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-type-mismatch</key>
    <name>clang-diagnostic-pointer-type-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: pointer type mismatch%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-conditional-type-mismatch</key>
    <name>clang-diagnostic-conditional-type-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconditional-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-volatile-lvalue</key>
    <name>clang-diagnostic-unused-volatile-lvalue</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: expression result unused; assign into a variable to force a volatile load</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-volatile-lvalue" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-constinit</key>
    <name>clang-diagnostic-missing-constinit</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'constinit' specifier missing on initializing declaration of %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-constinit" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-abstract-vbase-init</key>
    <name>clang-diagnostic-abstract-vbase-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initializer for virtual base class %0 of abstract class %1 will never be used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabstract-vbase-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++2a-compat-pedantic</key>
    <name>clang-diagnostic-c++2a-compat-pedantic</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: #warning is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: %select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23</li>
<li>warning: '%0' is a keyword in C++20</li>
<li>warning: '&lt;=&gt;' is a single token in C++20; add a space to avoid a change in behavior</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'auto' as a functional-style cast is incompatible with C++ standards before C++23</li>
<li>warning: 'consteval' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constinit' specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: 'size_t' suffix for literals is incompatible with C++ standards before C++23</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++20</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: alias declaration in this context is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: consteval if is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: label at end of compound statement is incompatible with C++ standards before C++23</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: static lambdas are incompatible with C++ standards before C++23</li>
<li>warning: taking address of non-addressable standard library function is incompatible with C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++20</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23</li>
<li>warning: use of implicit 'typename' is incompatible with C++ standards before C++20</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nested-anon-types</key>
    <name>clang-diagnostic-nested-anon-types</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: anonymous types declared in an anonymous %select{struct|union}0 are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnested-anon-types" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inaccessible-base</key>
    <name>clang-diagnostic-inaccessible-base</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: direct base %0 is inaccessible due to ambiguity:%1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winaccessible-base" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-inline-new-delete</key>
    <name>clang-diagnostic-inline-new-delete</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: replacement function %0 cannot be declared 'inline'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winline-new-delete" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-multiple-move-vbase</key>
    <name>clang-diagnostic-multiple-move-vbase</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmultiple-move-vbase" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++23-default-comp-relaxed-constexpr</key>
    <name>clang-diagnostic-c++23-default-comp-relaxed-constexpr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: defaulted definition of %select{%sub{select_defaulted_comparison_kind}1|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is a C++23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-23-default-comp-relaxed-constexpr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-exception-spec-mismatch</key>
    <name>clang-diagnostic-implicit-exception-spec-mismatch</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-CFString-literal</key>
    <name>clang-diagnostic-CFString-literal</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: input conversion stopped due to an input byte that does not belong to the input codeset UTF-8</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wCFString-literal" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-assign-enum</key>
    <name>clang-diagnostic-assign-enum</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: integer constant not in range of enumerated type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wassign-enum" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-argument-outside-range</key>
    <name>clang-diagnostic-argument-outside-range</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: argument value %0 is outside the valid range [%1, %2]</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wargument-outside-range" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-argument-undefined-behaviour</key>
    <name>clang-diagnostic-argument-undefined-behaviour</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: argument value %0 will result in undefined behaviour</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wargument-undefined-behaviour" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-return-local-addr</key>
    <name>clang-diagnostic-return-local-addr</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned</li>
<li>warning: returning %select{address of|reference to}0 local temporary object</li>
<li>warning: returning address of label, which is local</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-local-addr" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonportable-vector-initialization</key>
    <name>clang-diagnostic-nonportable-vector-initialization</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: vector initializers are not compatible with NEON intrinsics in big endian mode</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-vector-initialization" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sync-fetch-and-nand-semantics-changed</key>
    <name>clang-diagnostic-sync-fetch-and-nand-semantics-changed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-signed-unsigned-wchar</key>
    <name>clang-diagnostic-signed-unsigned-wchar</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' cannot be signed or unsigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsigned-unsigned-wchar" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-direct-ivar-access</key>
    <name>clang-diagnostic-direct-ivar-access</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: instance variable %0 is being directly accessed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdirect-ivar-access" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unaligned-qualifier-implicit-cast</key>
    <name>clang-diagnostic-unaligned-qualifier-implicit-cast</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit cast from type %0 to type %1 drops __unaligned qualifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunaligned-qualifier-implicit-cast" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-module-import-in-extern-c</key>
    <name>clang-diagnostic-module-import-in-extern-c</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: import of C++ module '%0' appears within extern "C" language linkage specification</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-import-in-extern-c" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-modules-import-nested-redundant</key>
    <name>clang-diagnostic-modules-import-nested-redundant</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: redundant #include of module '%0' appears within %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodules-import-nested-redundant" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-export-using-directive</key>
    <name>clang-diagnostic-export-using-directive</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 does not permit using directive to be exported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexport-using-directive" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-experimental-header-units</key>
    <name>clang-diagnostic-experimental-header-units</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: the implementation of header units is in an experimental phase</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexperimental-header-units" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-modules-ambiguous-internal-linkage</key>
    <name>clang-diagnostic-modules-ambiguous-internal-linkage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: ambiguous use of internal linkage declaration %0 defined in multiple modules</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-zero-as-null-pointer-constant</key>
    <name>clang-diagnostic-zero-as-null-pointer-constant</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: zero as null pointer constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-tcb-enforcement</key>
    <name>clang-diagnostic-tcb-enforcement</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: calling %0 is a violation of trusted computing base '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtcb-enforcement" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-pch-date-time</key>
    <name>clang-diagnostic-pch-date-time</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{precompiled header|module}0 uses __DATE__ or __TIME__</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpch-date-time" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-override-init</key>
    <name>clang-diagnostic-override-init</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverride-init" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-effc++</key>
    <name>clang-diagnostic-effc++</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#weffc-" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c2x-compat</key>
    <name>clang-diagnostic-c2x-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is a keyword in C23</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc2x-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sequence-point</key>
    <name>clang-diagnostic-sequence-point</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: multiple unsequenced modifications to %0</li>
<li>warning: unsequenced modification and access to %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsequence-point" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-address</key>
    <name>clang-diagnostic-address</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-CL4</key>
    <name>clang-diagnostic-CL4</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_overflow}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: %sub{subst_format_truncation}0,1,2</li>
<li>warning: '%%n' specifier not supported on this platform</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '&amp;&amp;' of a value and its negation always evaluates to false</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: '-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: '||' of a value and its negation always evaluates to true</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
<li>warning: ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: argument %0 of type %1 with mismatched bound</li>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?</li>
<li>warning: bitwise or with non-zero value always evaluates to true</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: call to function without interrupt attribute could clobber interruptee's VFP registers</li>
<li>warning: call to undeclared function %0; ISO C99 and later do not support implicit function declarations</li>
<li>warning: call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations</li>
<li>warning: calling '%0' with a nonzero argument is unsafe</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: converting the enum constant to a boolean</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean always evaluates to %select{false|true}0</li>
<li>warning: converting the result of '&lt;&lt;' to a boolean; did you mean '(%0) != 0'?</li>
<li>warning: converting the result of '?:' with integer constants to a boolean always evaluates to 'true'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute: %1</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute</li>
<li>warning: ignoring temporary created by a constructor declared with %0 attribute: %1</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer %select{partially |}0overrides prior initialization of this subobject</li>
<li>warning: initializer order does not match the declaration order</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: left operand of comma operator has no effect</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2</li>
<li>warning: loop variable %0 creates a copy from type %1</li>
<li>warning: method has no return type specified; defaults to 'id'</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'</li>
<li>warning: missing field %0 initializer</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void coroutine does not return a value</li>
<li>warning: non-void coroutine does not return a value in all control paths</li>
<li>warning: non-void function does not return a value</li>
<li>warning: non-void function does not return a value in all control paths</li>
<li>warning: non-void lambda does not return a value</li>
<li>warning: non-void lambda does not return a value in all control paths</li>
<li>warning: not packing field %0 as it is non-POD for the purposes of layout</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: parameter %0 set but not used</li>
<li>warning: parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
<li>warning: performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ROUND is not supported</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO</li>
<li>warning: semicolon before method body is ignored</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?</li>
<li>warning: switch condition has boolean value</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused parameter %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of bitwise '%0' with boolean operands</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using '%0' format specifier, but argument has boolean value</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when passed as a const reference argument here</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable %0 set but not used</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wCL4" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-endif-labels</key>
    <name>clang-diagnostic-endif-labels</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: extra tokens at end of #%0 directive</li>
<li>warning: extra tokens at the end of '#pragma omp %0' are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wendif-labels" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-cpp</key>
    <name>clang-diagnostic-cpp</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcpp" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-comments</key>
    <name>clang-diagnostic-comments</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '/*' within block comment</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: multi-line // comment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomments" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-conversion-null</key>
    <name>clang-diagnostic-conversion-null</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconversion-null" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-bool-conversions</key>
    <name>clang-diagnostic-bool-conversions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbool-conversions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-int-conversions</key>
    <name>clang-diagnostic-int-conversions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-vector-conversions</key>
    <name>clang-diagnostic-vector-conversions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvector-conversions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-unused-local-typedefs</key>
    <name>clang-diagnostic-unused-local-typedefs</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unused %select{typedef|type alias}0 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-local-typedefs" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++0x-extensions</key>
    <name>clang-diagnostic-c++0x-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{defaulted|deleted}0 function definitions are a C++11 extension</li>
<li>warning: '%0' keyword is a C++11 extension</li>
<li>warning: 'auto' type specifier is a C++11 extension</li>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'template' keyword outside of a template</li>
<li>warning: 'typename' occurs outside of a template</li>
<li>warning: [[]] attributes are a C++11 extension</li>
<li>warning: alias declarations are a C++11 extension</li>
<li>warning: befriending enumeration type %0 is a C++11 extension</li>
<li>warning: commas at the end of enumerator lists are a C++11 extension</li>
<li>warning: default member initializer for non-static data member is a C++11 extension</li>
<li>warning: default template arguments for a function template are a C++11 extension</li>
<li>warning: enumeration types with a fixed underlying type are a C++11 extension</li>
<li>warning: explicit conversion functions are a C++11 extension</li>
<li>warning: extern templates are a C++11 extension</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: generalized initializer lists are a C++11 extension</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension</li>
<li>warning: inline namespaces are a C++11 feature</li>
<li>warning: non-class friend type %0 is a C++11 extension</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension</li>
<li>warning: range-based for loop is a C++11 extension</li>
<li>warning: reference qualifiers on functions are a C++11 extension</li>
<li>warning: rvalue references are a C++11 extension</li>
<li>warning: scoped enumerations are a C++11 extension</li>
<li>warning: static data member %0 in union is a C++11 extension</li>
<li>warning: unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1</li>
<li>warning: use of enumeration in a nested name specifier is a C++11 extension</li>
<li>warning: variadic templates are a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-deprecated-copy-dtor</key>
    <name>clang-diagnostic-deprecated-copy-dtor</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-copy-dtor" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++1y-extensions</key>
    <name>clang-diagnostic-c++1y-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is a C++14 extension</li>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: initialized lambda captures are a C++14 extension</li>
<li>warning: multiple return statements in constexpr function is a C++14 extension</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: use of the %0 attribute is a C++14 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable templates are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1y-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++1z-extensions</key>
    <name>clang-diagnostic-c++1z-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%select{if|switch}0' initialization statements are a C++17 extension</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is a C++17 extension</li>
<li>warning: 'constexpr' on lambda expressions is a C++17 extension</li>
<li>warning: 'static_assert' with no message is a C++17 extension</li>
<li>warning: ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension</li>
<li>warning: capture of '*this' by copy is a C++17 extension</li>
<li>warning: constexpr if is a C++17 extension</li>
<li>warning: decomposition declarations are a C++17 extension</li>
<li>warning: default scope specifier for attributes is a C++17 extension</li>
<li>warning: hexadecimal floating literals are a C++17 feature</li>
<li>warning: inline variables are a C++17 extension</li>
<li>warning: nested namespace definition is a C++17 extension; define each namespace separately</li>
<li>warning: pack expansion of using declaration is a C++17 extension</li>
<li>warning: pack fold expression is a C++17 extension</li>
<li>warning: template template parameter using 'typename' is a C++17 extension</li>
<li>warning: use of multiple declarators in a single using declaration is a C++17 extension</li>
<li>warning: use of the %0 attribute is a C++17 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++2a-extensions</key>
    <name>clang-diagnostic-c++2a-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension</li>
<li>warning: captured structured bindings are a C++20 extension</li>
<li>warning: constexpr constructor that does not initialize all members is a C++20 extension</li>
<li>warning: constexpr union constructor that does not initialize any member is a C++20 extension</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension</li>
<li>warning: default member initializer for bit-field is a C++20 extension</li>
<li>warning: defaulted comparison operators are a C++20 extension</li>
<li>warning: designated initializers are a C++20 extension</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is a C++20 extension</li>
<li>warning: explicit template parameter list for lambdas is a C++20 extension</li>
<li>warning: explicit(bool) is a C++20 extension</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: initialized lambda pack captures are a C++20 extension</li>
<li>warning: inline nested namespace definition is a C++20 extension</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is a C++20 extension</li>
<li>warning: missing 'typename' prior to dependent type name %0%1; implicit 'typename' is a C++20 extension</li>
<li>warning: range-based for loop initialization statements are a C++20 extension</li>
<li>warning: uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension</li>
<li>warning: use of the %0 attribute is a C++20 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension</li>
<li>warning: using declaration naming a scoped enumerator is a C++20 extension</li>
<li>warning: using enum declaration is a C++20 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++2b-extensions</key>
    <name>clang-diagnostic-c++2b-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %select{an attribute specifier sequence|%0}1 in this position is a C++23 extension</li>
<li>warning: 'size_t' suffix for literals is a C++23 extension</li>
<li>warning: alias declaration in this context is a C++23 extension</li>
<li>warning: consteval if is a C++23 extension</li>
<li>warning: declaring overloaded %0 as 'static' is a C++23 extension</li>
<li>warning: definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension</li>
<li>warning: label at end of compound statement is a C++23 extension</li>
<li>warning: lambda without a parameter clause is a C++23 extension</li>
<li>warning: static lambdas are a C++23 extension</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C++23 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2b-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c++2c-extensions</key>
    <name>clang-diagnostic-c++2c-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: placeholder variables are a C++2c extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2c-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-c2x-extensions</key>
    <name>clang-diagnostic-c2x-extensions</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '_BitInt' suffix for literals is a C23 extension</li>
<li>warning: '_Static_assert' with no message is a C23 extension</li>
<li>warning: 'nullptr' is a C23 extension</li>
<li>warning: [[]] attributes are a C23 extension</li>
<li>warning: label at end of compound statement is a C23 extension</li>
<li>warning: label followed by a declaration is a C23 extension</li>
<li>warning: omitting the parameter name in a function definition is a C23 extension</li>
<li>warning: use of a '#%select{&lt;BUG IF SEEN&gt;|elifdef|elifndef}0' directive is a C23 extension</li>
<li>warning: use of an empty initializer is a C23 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc2x-extensions" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-msvc-include</key>
    <name>clang-diagnostic-msvc-include</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmsvc-include" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-frame-larger-than=</key>
    <name>clang-diagnostic-frame-larger-than=</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
<li>warning: stack frame size (%0) exceeds limit (%1) in '%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframe-larger-than=" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-spirv-compat</key>
    <name>clang-diagnostic-spirv-compat</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: sampler initializer has invalid %0 bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wspirv-compat" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-integer-overflow</key>
    <name>clang-diagnostic-integer-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overflow in expression; result is %0 with type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winteger-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-partial-availability</key>
    <name>clang-diagnostic-partial-availability</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpartial-availability" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-fixed-point-overflow</key>
    <name>clang-diagnostic-fixed-point-overflow</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overflow in expression; result is %0 with type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfixed-point-overflow" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-enum-constexpr-conversion</key>
    <name>clang-diagnostic-enum-constexpr-conversion</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: integer value %0 is outside the valid range of values [%1, %2] for the enumeration type %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-constexpr-conversion" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>CRITICAL</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-constant-evaluated</key>
    <name>clang-diagnostic-constant-evaluated</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: '%0' will always evaluate to 'true' in a manifestly constant-evaluated expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstant-evaluated" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-stack-exhausted</key>
    <name>clang-diagnostic-stack-exhausted</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: stack nearly exhausted; compilation time may suffer, and crashes due to stack overflow are likely</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstack-exhausted" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nan-infinity-disabled</key>
    <name>clang-diagnostic-nan-infinity-disabled</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: use of %select{infinity|NaN}0%select{| via a macro}1 is undefined behavior due to the currently enabled floating-point options</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnan-infinity-disabled" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-stack-protector</key>
    <name>clang-diagnostic-stack-protector</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: unable to protect inline asm that clobbers stack pointer against stack clash</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstack-protector" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-slh-asm-goto</key>
    <name>clang-diagnostic-slh-asm-goto</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: speculative load hardening does not protect functions with asm goto</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wslh-asm-goto" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-duplicate-category-definition</key>
    <name>clang-diagnostic-objc-duplicate-category-definition</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: duplicate definition of category %1 on interface %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-duplicate-category-definition" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-invalid-feature-combination</key>
    <name>clang-diagnostic-invalid-feature-combination</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: invalid feature combination: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-feature-combination" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-knl-knm-isa-support-removed</key>
    <name>clang-diagnostic-knl-knm-isa-support-removed</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: KNL, KNM related Intel Xeon Phi CPU's specific ISA's supports will be removed in LLVM 19.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wknl-knm-isa-support-removed" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-sloc-usage</key>
    <name>clang-diagnostic-sloc-usage</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>remark: source manager location address space usage:</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rsloc-usage" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-apinotes</key>
    <name>clang-diagnostic-apinotes</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wapinotes" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonportable-private-apinotes-path</key>
    <name>clang-diagnostic-nonportable-private-apinotes-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-private-apinotes-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-nonportable-private-system-apinotes-path</key>
    <name>clang-diagnostic-nonportable-private-system-apinotes-path</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-private-system-apinotes-path" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-poison-system-directories</key>
    <name>clang-diagnostic-poison-system-directories</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: include location '%0' is unsafe for cross-compilation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpoison-system-directories" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overriding-option</key>
    <name>clang-diagnostic-overriding-option</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding '%0' option with '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverriding-option" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-overriding-t-option</key>
    <name>clang-diagnostic-overriding-t-option</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: overriding '%0' option with '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverriding-t-option" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-missing-sysroot</key>
    <name>clang-diagnostic-missing-sysroot</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: no such sysroot directory: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-sysroot" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-incompatible-sysroot</key>
    <name>clang-diagnostic-incompatible-sysroot</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: using sysroot for '%0' but targeting '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-sysroot" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-debug-compression-unavailable</key>
    <name>clang-diagnostic-debug-compression-unavailable</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: cannot compress debug sections (%0 not enabled)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdebug-compression-unavailable" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>
  <rule>
    <key>clang-diagnostic-delayed-template-parsing-in-cxx20</key>
    <name>clang-diagnostic-delayed-template-parsing-in-cxx20</name>
    <description>
      <![CDATA[<p>Diagnostic text:</p>
<ul>
<li>warning: -fdelayed-template-parsing is deprecated after C++20</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelayed-template-parsing-in-cxx20" target="_blank">Diagnostic flags in Clang</a></p>]]>
      </description>
    <severity>INFO</severity>
    </rule>

</rules>
